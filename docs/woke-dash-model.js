window.model = {
    "folders": [
        {
            "key": "/",
            "name": "/",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "name": "contracts",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core",
            "name": "panoptic-v1-core",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic",
            "name": "23-panoptic",
            "parent": "/Users/dteiml/p/logic-group",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group",
            "name": "logic-group",
            "parent": "/Users/dteiml/p",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p",
            "name": "p",
            "parent": "/Users/dteiml",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml",
            "name": "dteiml",
            "parent": "/Users",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users",
            "name": "Users",
            "parent": "/",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "name": "libraries",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall",
            "name": "multicall",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery",
            "name": "periphery",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens",
            "name": "tokens",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces",
            "name": "interfaces",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types",
            "name": "types",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries",
            "name": "univ3-libraries",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy",
            "name": "proxy",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts",
            "name": "contracts",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts",
            "name": "openzeppelin-contracts",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib",
            "name": "lib",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security",
            "name": "security",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155",
            "name": "ERC1155",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token",
            "name": "token",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions",
            "name": "extensions",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils",
            "name": "utils",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20",
            "name": "ERC20",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions",
            "name": "extensions",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils",
            "name": "utils",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection",
            "name": "introspection",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math",
            "name": "math",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces",
            "name": "interfaces",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts",
            "name": "contracts",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core",
            "name": "v3-core",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "name": "pool",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces",
            "node_type": "folder",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries",
            "name": "libraries",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts",
            "node_type": "folder",
            "checked": true
        }
    ],
    "files": [
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol",
            "name": "CollateralTracker.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol",
            "name": "PanopticFactory.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol",
            "name": "PanopticPool.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol",
            "name": "SemiFungiblePositionManager.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol",
            "name": "CallbackLib.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Constants.sol",
            "name": "Constants.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Errors.sol",
            "name": "Errors.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol",
            "name": "FeesCalc.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol",
            "name": "InteractionHelper.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol",
            "name": "Math.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol",
            "name": "PanopticMath.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol",
            "name": "SafeTransferLib.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol",
            "name": "Multicall.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol",
            "name": "PanopticHelper.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol",
            "name": "ERC1155Minimal.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol",
            "name": "ERC20Minimal.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol",
            "name": "IERC20Partial.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol",
            "name": "LeftRight.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol",
            "name": "LiquidityChunk.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol",
            "name": "TickStateCallContext.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol",
            "name": "TokenId.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol",
            "name": "LiquidityAmounts.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol",
            "name": "TickMath.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
            "name": "Clones.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
            "name": "ReentrancyGuard.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
            "name": "ERC1155.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol",
            "name": "IERC1155.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol",
            "name": "IERC1155Receiver.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol",
            "name": "IERC1155MetadataURI.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol",
            "name": "ERC1155Holder.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol",
            "name": "ERC1155Receiver.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "name": "IERC20.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
            "name": "IERC20Metadata.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol",
            "name": "Address.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "name": "Context.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
            "name": "Strings.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
            "name": "ERC165.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
            "name": "IERC165.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
            "name": "Math.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
            "name": "IUniswapV3Factory.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
            "name": "IUniswapV3Pool.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
            "name": "IUniswapV3PoolActions.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
            "name": "IUniswapV3PoolDerivedState.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol",
            "name": "IUniswapV3PoolErrors.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
            "name": "IUniswapV3PoolEvents.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
            "name": "IUniswapV3PoolImmutables.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
            "name": "IUniswapV3PoolOwnerActions.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
            "name": "IUniswapV3PoolState.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FixedPoint96.sol",
            "name": "FixedPoint96.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol",
            "name": "FullMath.sol",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries",
            "node_type": "file",
            "checked": true
        }
    ],
    "free_functions": [],
    "contracts": [
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "name": "CollateralTracker",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "name": "PanopticFactory",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "name": "PanopticPool",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "name": "SemiFungiblePositionManager",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib",
            "name": "CallbackLib",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Constants.sol.Constants",
            "name": "Constants",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Constants.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Errors.sol.Errors",
            "name": "Errors",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Errors.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "name": "FeesCalc",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "name": "InteractionHelper",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "name": "Math",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "name": "PanopticMath",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib",
            "name": "SafeTransferLib",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall",
            "name": "Multicall",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "name": "PanopticHelper",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "name": "ERC1155",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol",
            "kind": "contract",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "name": "ERC20Minimal",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "name": "IERC20Partial",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "name": "LeftRight",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "name": "LiquidityChunk",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "name": "TickStateCallContext",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "name": "TokenId",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "name": "LiquidityAmounts",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath",
            "name": "TickMath",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "name": "Clones",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "name": "ReentrancyGuard",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "name": "ERC1155",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "name": "IERC1155",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver",
            "name": "IERC1155Receiver",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI",
            "name": "IERC1155MetadataURI",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder",
            "name": "ERC1155Holder",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver",
            "name": "ERC1155Receiver",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol",
            "kind": "contract",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "name": "IERC20",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "name": "IERC20Metadata",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "name": "Address",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context",
            "name": "Context",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "name": "Strings",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165",
            "name": "ERC165",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
            "kind": "contract",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165",
            "name": "IERC165",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "name": "Math",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "name": "IUniswapV3Factory",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
            "name": "IUniswapV3Pool",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "name": "IUniswapV3PoolActions",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState",
            "name": "IUniswapV3PoolDerivedState",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol.IUniswapV3PoolErrors",
            "name": "IUniswapV3PoolErrors",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol",
            "kind": "interface",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol.IUniswapV3PoolEvents",
            "name": "IUniswapV3PoolEvents",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
            "kind": "interface",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "name": "IUniswapV3PoolImmutables",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions",
            "name": "IUniswapV3PoolOwnerActions",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "name": "IUniswapV3PoolState",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol",
            "kind": "interface",
            "fully_implemented": false,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FixedPoint96.sol.FixedPoint96",
            "name": "FixedPoint96",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FixedPoint96.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath",
            "name": "FullMath",
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol",
            "kind": "library",
            "fully_implemented": true,
            "node_type": "contract",
            "checked": true,
            "isGroup": true
        }
    ],
    "functions": [
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)",
            "signature": "startToken(address,address,address)",
            "name": "startToken",
            "name_with_params": "startToken(underlyingToken, uniswapPool, panopticPool)",
            "declaration_string": "/// @notice Initialize a new collateral tracker for a specific token corresponding to the Panoptic Pool being created by the factory that called it.\n/// @dev The factory calls this function to start a new collateral tracking system for the incoming token at 'underlyingToken'.\n/// The factory will do this for each of the two tokens being tracked. Thus, the collateral tracking system does not track *both* tokens at once.\n/// @param underlyingToken the address of the token to track collateral for corresponding to the Panoptic Pool being created by the factory calling this (as 'msg.sender').\n/// @param uniswapPool the address of the Uniswap pool that this token is a part of.\n/// @param panopticPool the address of the Panoptic Pool being created and linked to this Collateral Tracker.\nfunction startToken(address underlyingToken, IUniswapV3Pool uniswapPool, PanopticPool panopticPool) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.updateParameters((uint256,int128,int128,int128,int128,int128,int128,int128))",
            "signature": "updateParameters((uint256,int128,int128,int128,int128,int128,int128,int128))",
            "name": "updateParameters",
            "name_with_params": "updateParameters(newParameters)",
            "declaration_string": "/// @notice update the parameters of the Collateral Tracking System.\n/// @dev see struct 'Parameters' for passed in arguments.\n/// @param newParameters Struct containing the new parameters to set.\nfunction updateParameters(CollateralTracker.Parameters calldata newParameters) external onlyFactoryOwner",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.onlyFactoryOwner"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getPoolData()",
            "signature": "getPoolData()",
            "name": "getPoolData",
            "name_with_params": "getPoolData()",
            "declaration_string": "/// @notice Get the Panoptic pool data.\n/// @dev the Panoptic pool owns this collateral token. This token, in turn, keeps a reference to the Panoptic pool.\n/// @return poolAssets cached amount of assets accounted to be held by the Panoptic Pool - ignores donations, pending fee payouts, and other untracked balance changes.\n/// @return insideAMM the underlying token amount held in the AMM.\n/// @return currentPoolUtilization Packing of the pool utilization (how much funds are in the Panoptic pool versus the AMM pool at the time of minting),\n/// right 64bits for token0 and left 64bits for token1, defined as (inAMM * 10_000) / totalAssets().\n/// Where totalAssets is the total tracked assets in the AMM and PanopticPool minus fees and donations to the Panoptic pool.\nfunction getPoolData() external view returns (uint256 poolAssets, uint256 insideAMM, int128 currentPoolUtilization)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.name()",
            "signature": "name()",
            "name": "name",
            "name_with_params": "name()",
            "declaration_string": "/// @notice Returns name of token composed of underlying token symbol and pool data.\n/// @return name The name of the token.\nfunction name() external view returns (string memory name)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.symbol()",
            "signature": "symbol()",
            "name": "symbol",
            "name_with_params": "symbol()",
            "declaration_string": "/// @notice Returns symbol as prefixed symbol of underlying token.\n/// @return symbol The symbol of the token.\nfunction symbol() external view returns (string memory symbol)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.decimals()",
            "signature": "decimals()",
            "name": "decimals",
            "name_with_params": "decimals()",
            "declaration_string": "/// @notice Returns decimals of underlying token (0 if not present)\n/// @return decimals The decimals of the token.\nfunction decimals() external view returns (uint8)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transfer(address,uint256)",
            "signature": "transfer(address,uint256)",
            "name": "transfer",
            "name_with_params": "transfer(recipient, amount)",
            "declaration_string": "/// @dev See {IERC20-transfer}.\n/// Requirements:\n/// - the caller must have a balance of at least 'amount'.\n/// - the msg.sender must not have any position on the panoptic pool\nfunction transfer(address recipient, uint256 amount) public override(ERC20Minimal) returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.transfer(address,uint256)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transferFrom(address,address,uint256)",
            "signature": "transferFrom(address,address,uint256)",
            "name": "transferFrom",
            "name_with_params": "transferFrom(from, to, amount)",
            "declaration_string": "/// @dev See {IERC20-transferFrom}.\n/// Requirements:\n/// - the 'from' must have a balance of at least 'amount'.\n/// - the caller must have allowance for 'from' of at least 'amount' tokens.\n/// - 'from' must not have any open positions on the panoptic pool.\nfunction transferFrom(address from, address to, uint256 amount) public override(ERC20Minimal) returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.transferFrom(address,address,uint256)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.asset()",
            "signature": "asset()",
            "name": "asset",
            "name_with_params": "asset()",
            "declaration_string": "/// @notice Get the token contract address of the underlying asset being managed.\n/// @return assetTokenAddress The address of the underlying asset.\nfunction asset() external view returns (address assetTokenAddress)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.totalAssets()",
            "signature": "totalAssets()",
            "name": "totalAssets",
            "name_with_params": "totalAssets()",
            "declaration_string": "/// @notice Get the total amount of assets managed by the CollateralTracker vault.\n/// @dev This returns the total tracked assets in the AMM and PanopticPool,\n/// @dev - EXCLUDING the amount of collected fees (because they are reserved for short options)\n/// @dev - EXCLUDING any donations that have been made to the pool\n/// @return totalManagedAssets The total amount of assets managed.\nfunction totalAssets() public view returns (uint256 totalManagedAssets)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
            "signature": "convertToShares(uint256)",
            "name": "convertToShares",
            "name_with_params": "convertToShares(assets)",
            "declaration_string": "/// @notice Returns the amount of shares that can be minted for the given amount of assets.\n/// @param assets The amount of assets to be deposited.\n/// @return shares The amount of shares that can be minted.\nfunction convertToShares(uint256 assets) public view returns (uint256 shares)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)",
            "signature": "convertToAssets(uint256)",
            "name": "convertToAssets",
            "name_with_params": "convertToAssets(shares)",
            "declaration_string": "/// @notice Returns the amount of assets that can be redeemed for the given amount of shares.\n/// @param shares The amount of shares to be redeemed.\n/// @return assets The amount of assets that can be redeemed.\nfunction convertToAssets(uint256 shares) public view returns (uint256 assets)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxDeposit(address)",
            "signature": "maxDeposit(address)",
            "name": "maxDeposit",
            "name_with_params": "maxDeposit()",
            "declaration_string": "/// @notice returns The maximum deposit amount.\n/// @return maxAssets The maximum amount of assets that can be deposited.\nfunction maxDeposit(address) external pure returns (uint256 maxAssets)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewDeposit(uint256)",
            "signature": "previewDeposit(uint256)",
            "name": "previewDeposit",
            "name_with_params": "previewDeposit(assets)",
            "declaration_string": "/// @notice Returns shares received for depositing given amount of assets.\n/// @param assets The amount of assets to be deposited.\n/// @return shares The amount of shares that can be minted.\nfunction previewDeposit(uint256 assets) public view returns (uint256 shares)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.deposit(uint256,address)",
            "signature": "deposit(uint256,address)",
            "name": "deposit",
            "name_with_params": "deposit(assets, receiver)",
            "declaration_string": "/// @notice Deposit underlying tokens (assets) to the Panoptic pool from the LP and mint corresponding amount of shares.\n/// There is a maximum asset deposit limit of (2 ** 104) - 1.\n/// An MEV tax is levied, which is equal to a single payment of the commissionRate BEFORE adding the funds.\n/// @dev Shares are minted and sent to the LP ('receiver').\n/// @param assets Amount of assets deposited.\n/// @param receiver User to receive the shares.\n/// @return shares The amount of Panoptic pool shares that were minted to the recipient.\nfunction deposit(uint256 assets, address receiver) external returns (uint256 shares)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxMint(address)",
            "signature": "maxMint(address)",
            "name": "maxMint",
            "name_with_params": "maxMint()",
            "declaration_string": "/// @notice Returns the maximum shares received for a deposit.\n/// @return maxShares The maximum amount of shares that can be minted.\nfunction maxMint(address) external view returns (uint256 maxShares)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewMint(uint256)",
            "signature": "previewMint(uint256)",
            "name": "previewMint",
            "name_with_params": "previewMint(shares)",
            "declaration_string": "/// @notice Returns the amount of assets that would be deposited to mint a given amount of shares.\n/// @param shares The amount of shares to be minted.\n/// @return assets The amount of assets that would be deposited.\nfunction previewMint(uint256 shares) public view returns (uint256 assets)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.mint(uint256,address)",
            "signature": "mint(uint256,address)",
            "name": "mint",
            "name_with_params": "mint(shares, receiver)",
            "declaration_string": "/// @notice Deposit required amount of assets to receive specified amount of shares.\n/// There is a maximum asset deposit limit of (2 ** 104) - 1.\n/// An MEV tax is levied, which is equal to a single payment of the commissionRate BEFORE adding the funds.\n/// @dev Shares are minted and sent to the LP ('receiver').\n/// @param shares Amount of shares to be minted.\n/// @param receiver User to receive the shares.\n/// @return assets The amount of assets deposited to mint the desired amount of shares.\nfunction mint(uint256 shares, address receiver) external returns (uint256 assets)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxWithdraw(address)",
            "signature": "maxWithdraw(address)",
            "name": "maxWithdraw",
            "name_with_params": "maxWithdraw(owner)",
            "declaration_string": "/// @notice Returns The maximum amount of assets that can be withdrawn for a given user.\n/// If the user has any open positions, the max withdrawable balance is zero.\n/// @dev Calculated from the balance of the user; limited by the assets the pool has available.\n/// @param owner The address being withdrawn for.\n/// @return maxAssets The maximum amount of assets that can be withdrawn.\nfunction maxWithdraw(address owner) public view returns (uint256 maxAssets)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewWithdraw(uint256)",
            "signature": "previewWithdraw(uint256)",
            "name": "previewWithdraw",
            "name_with_params": "previewWithdraw(assets)",
            "declaration_string": "/// @notice Returns the amount of shares that would be burned to withdraw a given amount of assets.\n/// @param assets The amount of assets to be withdrawn.\n/// @return shares The amount of shares that would be burned.\nfunction previewWithdraw(uint256 assets) public view returns (uint256 shares)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.withdraw(uint256,address,address)",
            "signature": "withdraw(uint256,address,address)",
            "name": "withdraw",
            "name_with_params": "withdraw(assets, receiver, owner)",
            "declaration_string": "/// @notice Redeem the amount of shares required to withdraw the specified amount of assets.\n/// We can only use this standard 4626 withdraw function if the user has no open positions.\n/// @dev Shares are burned and assets are sent to the LP ('receiver').\n/// @param assets Amount of assets to be withdrawn.\n/// @param receiver User to receive the assets.\n/// @param owner User to burn the shares from.\n/// @return shares The amount of shares burned to withdraw the desired amount of assets.\nfunction withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxRedeem(address)",
            "signature": "maxRedeem(address)",
            "name": "maxRedeem",
            "name_with_params": "maxRedeem(owner)",
            "declaration_string": "/// @notice Returns the maximum amount of shares that can be redeemed for a given user.\n/// If the user has any open positions, the max redeemable balance is zero.\n/// @param owner The redeeming address.\n/// @return maxShares The maximum amount of shares that can be redeemed.\nfunction maxRedeem(address owner) public view returns (uint256 maxShares)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewRedeem(uint256)",
            "signature": "previewRedeem(uint256)",
            "name": "previewRedeem",
            "name_with_params": "previewRedeem(shares)",
            "declaration_string": "/// @notice returns the amount of assets resulting from a given amount of shares being redeemed\n/// @param shares the amount of shares to be redeemed\n/// @return assets the amount of assets resulting from the redemption\nfunction previewRedeem(uint256 shares) public view returns (uint256 assets)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.redeem(uint256,address,address)",
            "signature": "redeem(uint256,address,address)",
            "name": "redeem",
            "name_with_params": "redeem(shares, receiver, owner)",
            "declaration_string": "/// @notice Redeem exact shares for underlying assets\n/// We can only use this standard 4626 redeem function if the user has no open positions.\n/// @param shares Amount of shares to be redeemed\n/// @param receiver User to receive the assets\n/// @param owner User to burn the shares from\n/// @return assets the amount of assets resulting from the redemption\nfunction redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)",
            "signature": "computeBonus(address,uint256[2][],uint256,int24,uint160,int128)",
            "name": "computeBonus",
            "name_with_params": "computeBonus(account, positionBalanceArray, otherTokenData, twapTick, sqrtPriceX96, premium)",
            "declaration_string": "/// @notice Compute a liquidator's potential bonus during liquidation of an account. The bonus depends on degree of distress (0% bonus at 100% collateral).\n/// @param account The account to be liquidated.\n/// @param positionBalanceArray The list of all historical positions held by the 'optionOwner', stored as [[tokenId, balance/poolUtilizationAtMint], ...].\n/// @param otherTokenData The token data of the other collateral token in the Panoptic Pool (with tokenBalance in right slot and required collateral in the left slot).\n/// @param twapTick Tick at which the collateral requirement will be evaluated at(Uniswap TWAP tick at time of call).\n/// @param sqrtPriceX96 The sqrt price to 96 bit precision.\n/// @param premium The premium of the open positions.\n/// @return bonusAmounts LeftRight encoding for the the bonus paid in each token in the Panoptic Pool to the liquidator.\n/// @return tokenData LeftRight encoding with tokenbalance, ie assets, (in the right slot) and amount required in collateral (left slot).\nfunction computeBonus(address account, uint256[2][] memory positionBalanceArray, uint256 otherTokenData, int24 twapTick, uint160 sqrtPriceX96, int128 premium) external view returns (int256 bonusAmounts, uint256 tokenData)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)",
            "signature": "exerciseCost(address,int24,int24,uint256,uint128,int256)",
            "name": "exerciseCost",
            "name_with_params": "exerciseCost(account, currentTick, medianTick, positionId, positionBalance, longAmounts)",
            "declaration_string": "/// @notice Get the cost of exercising an option. Used during a forced exercise.\n/// @dev This one computes the cost of calling the forceExercise function on a position:\n/// - The forceExercisor will have to *pay* the exercisee because their position will be closed \"against their will\"\n/// - The cost must be larger when the position is close to being in-range, and should be minimal when it is far from being in range. eg. Exercising a (1000, 1050)\n///   position will cost more if the price is 999 than if it is 100\n/// - The cost is an exponentially decaying function of the distance between the position's strike and the current price\n/// - The cost decreases by a factor of 2 for every \"position's width\"\n/// - Note that the cost is the largest among all active legs, not the sum\n/// @dev Example exercise costs:\n/// - 10% if the position is liquidated when the price is between 950 and 1000, or if it is between 1050 and 1100\n/// - 5% if the price is between 900 and 950 or (1100, 1150)\n/// - 2.5% if between (850, 900) or (1150, 1200)\n/// @param account Address of the exercised account.\n/// @param currentTick The current price tick.\n/// @param medianTick The median price tick.\n/// @param positionId The position to be exercised\n/// @param positionBalance The balance in `account` of the position to be exercised\n/// @param longAmounts The amount of longs in the position.\n/// @return exerciseFees The fees for exercising the option position.\nfunction exerciseCost(address account, int24 currentTick, int24 medianTick, uint256 positionId, uint128 positionBalance, int256 longAmounts) external view returns (int256 exerciseFees)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)",
            "signature": "getRefundAmounts(address,int256,int24,address)",
            "name": "getRefundAmounts",
            "name_with_params": "getRefundAmounts(refunder, refundValues, atTick, collateralToken1)",
            "declaration_string": "/// @notice Returns the original delegated value to a user at a certain tick based on the available collateral from the exercised user.\n/// @dev Only called on collateralTracker0, so we must query balances from collateralTracker1.\n/// @param refunder Address of the user the refund is coming from (the force exercisee).\n/// @param refundValues Token values to refund at the given tick(atTick) rightSlot = token0 left = token1.\n/// @param atTick Tick to convert values at. This can be the current tick or some TWAP/median tick.\n/// @param collateralToken1 The address of the collateralTracker for token 1.\n/// @return refundAmounts The amount of tokens to refund to the user.\nfunction getRefundAmounts(address refunder, int256 refundValues, int24 atTick, CollateralTracker collateralToken1) public view returns (int256 refundAmounts)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._poolUtilization()",
            "signature": "_poolUtilization()",
            "name": "_poolUtilization",
            "name_with_params": "_poolUtilization()",
            "declaration_string": "/// @dev compute: inAMM/totalAssets().\n/// @dev 1bps precision controlled by DECIMALS.\n/// @return poolUtilization the pool utilization as a fraction.\nfunction _poolUtilization() internal view returns (int128 poolUtilization)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._sellCollateralRatio(int128)",
            "signature": "_sellCollateralRatio(int128)",
            "name": "_sellCollateralRatio",
            "name_with_params": "_sellCollateralRatio(utilization)",
            "declaration_string": "/// @notice Get the (sell) collateral ratio that is paid when a short option is minted at a specific pool utilization.\n/// @dev This is computed at the time the position is minted.\n/// @param utilization The fraction of totalAssets() that belongs to the Uniswap Pool.\n/// @return sellCollateralRatio The sell collateral ratio.\nfunction _sellCollateralRatio(int128 utilization) internal view returns (int128 sellCollateralRatio)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._buyCollateralRatio(int128)",
            "signature": "_buyCollateralRatio(int128)",
            "name": "_buyCollateralRatio",
            "name_with_params": "_buyCollateralRatio(utilization)",
            "declaration_string": "/// @notice Get the (buy) collateral ratio that is paid when a long option is minted at a specific pool utilization.\n/// @dev This is computed at the time the position is minted.\n/// @param utilization The fraction of totalBalance() that belongs to the Uniswap Pool.\n/// @return buyCollateralRatio The buy collateral ratio.\nfunction _buyCollateralRatio(int128 utilization) internal view returns (int128 buyCollateralRatio)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)",
            "signature": "delegate(address,address,uint256)",
            "name": "delegate",
            "name_with_params": "delegate(delegator, delegatee, assets)",
            "declaration_string": "/// @notice Delegate and transfer shares corresponding to the incoming assets 'from' delegator 'to' delegatee.\n/// @dev This is controlled by the Panoptic Pool - not individual users.\n/// @param delegator The delegator to send shares from - the sender of the shares.\n/// @param delegatee The delegatee to send shares to - the recipient of the shares.\n/// @param assets The assets to which the shares delegated correspond.\nfunction delegate(address delegator, address delegatee, uint256 assets) external onlyPanopticPool",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.onlyPanopticPool"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)",
            "signature": "revoke(address,address,uint256)",
            "name": "revoke",
            "name_with_params": "revoke(delegator, delegatee, assets)",
            "declaration_string": "/// @notice Revoke previously delegated shares. The opposite of 'delegate'.\n/// @param delegator The delegator to send shares *to* (because we are revoking - opposite when we delegate).\n/// @param delegatee The delegatee to send shares *from* (because we are revoking - opposite when we delegate).\n/// @param assets The assets to which the shares revoked correspond.\nfunction revoke(address delegator, address delegatee, uint256 assets) external onlyPanopticPool",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.onlyPanopticPool"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)",
            "signature": "refund(address,address,int256)",
            "name": "refund",
            "name_with_params": "refund(refunder, refundee, assets)",
            "declaration_string": "/// @notice Refunds delegated tokens to 'refunder' from 'refundee', similar to 'revoke'\n/// @dev Assumes that the refunder has enough money to pay for the refund\n/// @dev can handle negative refund amounts that go from refundee to refunder in the case of high exercise fees.\n/// @param refunder The account refunding tokens to 'refundee'.\n/// @param refundee The amount being refunded to.\n/// @param assets The amount of assets to refund. Positive means a transfer from refunder to refundee, vice versa for negative.\nfunction refund(address refunder, address refundee, int256 assets) external onlyPanopticPool",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.onlyPanopticPool"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])",
            "signature": "takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])",
            "name": "takeCommissionAddData",
            "name_with_params": "takeCommissionAddData(environmentContext, longAmount, shortAmount, portfolioPremium, oldPositionPremia, swappedAmount, positionBalanceArray)",
            "declaration_string": "/// @notice Take commission on option creation/opening (commissions will not be taken on closing).\n/// @param environmentContext Container that holds current tick, median tick, and caller.\n/// @param longAmount The amount of longs.\n/// @param shortAmount The amount of shorts.\n/// @param portfolioPremium Equal to the total accumulated long premium for the whole portfolio.\n/// @param oldPositionPremia Equal to the premium of the burnt option if this is a roll.\n/// @param swappedAmount The amount of tokens swapped during creation of the option position (non-zero for options minted ITM).\n/// @param positionBalanceArray The list of all historical positions held by the 'optionOwner', stored as [[tokenId, balance/poolUtilizationAtMint], ...].\n/// @return utilization The utilization of the Panoptic Pool.\n/// @return tokenData LeftRight encoding with tokenbalance, ie assets, (in the right slot) and amount required in collateral (left slot).\nfunction takeCommissionAddData(uint256 environmentContext, int128 longAmount, int128 shortAmount, int128 portfolioPremium, int128 oldPositionPremia, int128 swappedAmount, uint256[2][] memory positionBalanceArray) external onlyPanopticPool returns (int128 utilization, uint256 tokenData)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.onlyPanopticPool"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)",
            "signature": "exercise(address,int128,int128,int128,int128)",
            "name": "exercise",
            "name_with_params": "exercise(optionOwner, longAmount, shortAmount, swappedAmount, currentPositionPremium)",
            "declaration_string": "/// @notice Exercise an option and pay to the seller what is owed from the buyer.\n/// @dev Called when a position is burnt because it may need to be exercised.\n/// @param optionOwner The owner of the option being burned and potentially exercised.\n/// @param longAmount The amount of longs to be exercised (if any).\n/// @param shortAmount The amount of shorts to be exercised (if any).\n/// @param swappedAmount The amount of tokens potentially swapped.\n/// @param currentPositionPremium The position premium.\nfunction exercise(address optionOwner, int128 longAmount, int128 shortAmount, int128 swappedAmount, int128 currentPositionPremium) external onlyPanopticPool",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.onlyPanopticPool"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getExchangedAmount(int128,int128,int128)",
            "signature": "_getExchangedAmount(int128,int128,int128)",
            "name": "_getExchangedAmount",
            "name_with_params": "_getExchangedAmount(longAmount, shortAmount, swappedAmount)",
            "declaration_string": "/// @notice Get the amount exchanged to mint an option.\n/// @param longAmount The amount of long options held.\n/// @param shortAmount The amount of short options held.\n/// @param swappedAmount The (potential) amount swapped during any ITM option creations.\n/// @return exchangedAmount The amount of funds to be exchanged for minting an option (includes commission, swapFee, and intrinsic value).\nfunction _getExchangedAmount(int128 longAmount, int128 shortAmount, int128 swappedAmount) internal view returns (int256 exchangedAmount)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)",
            "signature": "getAccountMarginDetails(address,int24,uint256[2][],int128)",
            "name": "getAccountMarginDetails",
            "name_with_params": "getAccountMarginDetails(user, currentTick, positionBalanceArray, premiumAllPositions)",
            "declaration_string": "/// @notice Get the collateral status/margin details of an account/user.\n/// NOTE: It's up to the caller to confirm from the returned result that the account has enough collateral.\n/// @dev This can be used to check the health: how many tokens a user has compared to the margin threshold.\n/// @param user The account to check collateral/margin health for.\n/// @param currentTick The current AMM price tick.\n/// @param positionBalanceArray The list of all historical positions held by the 'optionOwner', stored as [[tokenId, balance/poolUtilizationAtMint], ...].\n/// @param premiumAllPositions The premium collected thus far across all positions.\n/// @return tokenData Information collected for the tokens about the health of the account.\n/// The collateral balance of the user is in the right slot and the threshold for margin call is in the left slot.\nfunction getAccountMarginDetails(address user, int24 currentTick, uint256[2][] memory positionBalanceArray, int128 premiumAllPositions) public view returns (uint256 tokenData)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)",
            "signature": "_getAccountMargin(address,int24,uint256[2][],int128)",
            "name": "_getAccountMargin",
            "name_with_params": "_getAccountMargin(user, atTick, positionBalanceArray, premiumAllPositions)",
            "declaration_string": "/// @notice Get the collateral status/margin details of an account/user.\n/// NOTE: It's up to the caller to confirm from the returned result that the account has enough collateral.\n/// @dev This can be used to check the health: how many tokens a user has compared to the margin threshold.\n/// @param user the account to check collateral/margin health for.\n/// @param atTick tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param positionBalanceArray the list of all historical positions held by the 'optionOwner', stored as [[tokenId, balance/poolUtilizationAtMint], ...].\n/// @param premiumAllPositions the premium collected thus far across all positions.\n/// @return tokenData information collected for the tokens about the health of the account.\n/// The collateral balance of the user is in the right slot and the threshold for margin call is in the left slot.\nfunction _getAccountMargin(address user, int24 atTick, uint256[2][] memory positionBalanceArray, int128 premiumAllPositions) internal view returns (uint256 tokenData)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getTotalRequiredCollateral(int24,uint256[2][])",
            "signature": "_getTotalRequiredCollateral(int24,uint256[2][])",
            "name": "_getTotalRequiredCollateral",
            "name_with_params": "_getTotalRequiredCollateral(atTick, positionBalanceArray)",
            "declaration_string": "/// @notice Get the total required amount of collateral tokens of a user/account across all active positions to stay above the margin requirement.\n/// @dev Returns the token amounts required for the entire account with active positions in 'positionIdList' (list of tokenIds).\n/// @param atTick Tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param positionBalanceArray The list of all historical positions held by the 'optionOwner', stored as [[tokenId, balance/poolUtilizationAtMint], ...].\n/// @return tokenRequired The amount of tokens required to stay above the margin threshold for all active positions of user.\nfunction _getTotalRequiredCollateral(int24 atTick, uint256[2][] memory positionBalanceArray) internal view returns (uint256 tokenRequired)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtTickSinglePosition(uint256,uint128,int24,uint128)",
            "signature": "_getRequiredCollateralAtTickSinglePosition(uint256,uint128,int24,uint128)",
            "name": "_getRequiredCollateralAtTickSinglePosition",
            "name_with_params": "_getRequiredCollateralAtTickSinglePosition(tokenId, positionSize, atTick, poolUtilization)",
            "declaration_string": "/// @notice Get the required amount of collateral tokens corresponding to a specific single position 'tokenId' at a price 'tick'.\n/// The required collateral of an account depends on the price ('tick') in the AMM pool: if in the position's favor less collateral needed, etc.\n/// @param tokenId The option position.\n/// @param positionSize The size of the option position.\n/// @param atTick Tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param poolUtilization The utilization of the Panoptic pool (balance of buying and selling).\n/// @return tokenRequired total required tokens for all legs of the specified tokenId.\nfunction _getRequiredCollateralAtTickSinglePosition(uint256 tokenId, uint128 positionSize, int24 atTick, uint128 poolUtilization) internal view returns (uint256 tokenRequired)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLeg(uint256,uint256,uint128,int24,uint128)",
            "signature": "_getRequiredCollateralSingleLeg(uint256,uint256,uint128,int24,uint128)",
            "name": "_getRequiredCollateralSingleLeg",
            "name_with_params": "_getRequiredCollateralSingleLeg(tokenId, index, positionSize, atTick, poolUtilization)",
            "declaration_string": "/// @notice Calculate the required amount of collateral for a single leg 'index' of position 'tokenId' when the leg does not have a risk partner.\n/// @dev Also called \"undefined risk.\"\n/// @param tokenId The option position.\n/// @param index The leg index (associated with a liquidity chunk) to consider a partner for.\n/// @param positionSize The size of the position.\n/// @param atTick Tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param poolUtilization The pool utilization: how much funds are in the Panoptic pool versus the AMM pool.\n/// @return required The required amount collateral needed for this leg 'index'.\nfunction _getRequiredCollateralSingleLeg(uint256 tokenId, uint256 index, uint128 positionSize, int24 atTick, uint128 poolUtilization) internal view returns (uint256 required)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)",
            "signature": "_getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)",
            "name": "_getRequiredCollateralSingleLegNoPartner",
            "name_with_params": "_getRequiredCollateralSingleLegNoPartner(tokenId, index, positionSize, atTick, poolUtilization)",
            "declaration_string": "/// @notice Calculate the required amount of collateral for leg 'index' of position 'tokenId' when the leg does not have a risk partner.\n/// @dev Also called \"defined risk.\"\n/// @param tokenId The option position.\n/// @param index The leg index (associated with a liquidity chunk) to consider a partner for.\n/// @param positionSize The size of the position.\n/// @param atTick Tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param poolUtilization The pool utilization: ratio of how much funds are in the Panoptic pool versus the AMM pool.\n/// @return required The required amount collateral needed for this leg 'index'.\nfunction _getRequiredCollateralSingleLegNoPartner(uint256 tokenId, uint256 index, uint128 positionSize, int24 atTick, uint128 poolUtilization) internal view returns (uint256 required)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)",
            "signature": "_getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)",
            "name": "_getRequiredCollateralSingleLegPartner",
            "name_with_params": "_getRequiredCollateralSingleLegPartner(tokenId, index, positionSize, atTick, poolUtilization)",
            "declaration_string": "/// @notice Calculate the required amount of collateral for leg 'index' for position 'tokenId' accounting for its partner leg.\n/// @notice If the two token long-types are different (one is a long, the other a short, e.g.) but the tokenTypes are the same, this is a spread\n/// a spread is a defined risk position which has a max loss given by difference between the long and short strikes.\n/// @notice If the two token long-types are the same but the tokenTypes are different (one is a call, the other a put, e.g.), this is a strangle -\n/// a strangle benefits from enhanced capital efficiency because only one side can be ITM at a time.\n/// @dev if the position is a spread, then the collateral requirement consists of two components:\n///   1) The difference in notional value at both strikes: abs(strikeLong - strikeShort) or abs(strikeShort - strikeLong)\n///   2) A spread term which is relevant for legs that have different widths (calendar spreads)\n/// @dev If a position is a strangle, only one leg can be tested at a time which allows us to increase the capital efficiency.\n/// @param tokenId the option position\n/// @param index the leg index (associated with a liquidity chunk) to consider a partner for\n/// @param positionSize the size of the position\n/// @param atTick tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param poolUtilization the pool utilization: how much funds are in the Panoptic pool versus the AMM pool.\n/// @return required the required amount collateral needed for this leg 'index', accounting for what the leg's risk partner is.\nfunction _getRequiredCollateralSingleLegPartner(uint256 tokenId, uint256 index, uint128 positionSize, int24 atTick, uint128 poolUtilization) internal view returns (uint256 required)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtUtilization(uint128,uint256,int64)",
            "signature": "_getRequiredCollateralAtUtilization(uint128,uint256,int64)",
            "name": "_getRequiredCollateralAtUtilization",
            "name_with_params": "_getRequiredCollateralAtUtilization(amount, isLong, utilization)",
            "declaration_string": "/// @notice Get the base collateral requirement for an 'amount' at the current Panoptic pool 'utilization' level.\n/// @notice For a given incoming 'amount' - which is the size of a user position (e.g. opening a position), what is the corresponding required collateral to have.\n/// @dev NOTE this does not depend on the price of the AMM pool. This only computes what is needed in response to the current utilization.\n/// @param amount The amount from which required collateral is computed.\n/// @param isLong Whether the position is long (=1) or short (=0).\n/// @param utilization The utilization of the Panoptic pool (balance between sellers and buyers).\n/// @return required The required collateral corresponding to the incoming 'amount'.\nfunction _getRequiredCollateralAtUtilization(uint128 amount, uint256 isLong, int64 utilization) internal view returns (uint256 required)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)",
            "signature": "_computeBase(uint256,uint128,uint256,uint256)",
            "name": "_computeBase",
            "name_with_params": "_computeBase(tokenId, positionSize, index, partnerIndex)",
            "declaration_string": "/// @notice Calculate The base required amount of collateral for the spread position (both legs).\n/// @param tokenId The option position.\n/// @param positionSize The size of the position.\n/// @param index The leg index (associated with a liquidity chunk) to consider a partner for.\n/// @param partnerIndex The associated spread leg that is apart of the spread position.\n/// @return baseRequirement The required amount of collateral needed for the spread base portion.\nfunction _computeBase(uint256 tokenId, uint128 positionSize, uint256 index, uint256 partnerIndex) internal view returns (uint256 baseRequirement)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)",
            "signature": "_computeSpread(uint256,uint128,uint256,uint256)",
            "name": "_computeSpread",
            "name_with_params": "_computeSpread(tokenId, positionSize, index, partnerIndex)",
            "declaration_string": "/// @notice Calculate the required amount of collateral for the spread portion of the spread position.\n/// @param tokenId the option position.\n/// @param positionSize the size of the position.\n/// @param index the leg index (associated with a liquidity chunk) to consider a partner for.\n/// @param partnerIndex the associated spread leg that is apart of the spread position.\n/// @return spreadRequirement the required amount of collateral needed for the spread portion.\nfunction _computeSpread(uint256 tokenId, uint128 positionSize, uint256 index, uint256 partnerIndex) internal view returns (uint256 spreadRequirement)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeStrangle(uint256,uint256,uint128,int24,uint128)",
            "signature": "_computeStrangle(uint256,uint256,uint128,int24,uint128)",
            "name": "_computeStrangle",
            "name_with_params": "_computeStrangle(tokenId, index, positionSize, atTick, poolUtilization)",
            "declaration_string": "/// @notice Calculate the required amount of collateral for a strangle leg.\n/// Strangle legs are evaluated at 2x capital efficiency at low pool utilizations.\n/// @dev A strangle can only have only one of its leg tested at the same time, so this reduces the total risk and collateral requirement.\n/// @param tokenId The option position.\n/// @param positionSize The size of the position.\n/// @param index The leg index (associated with a liquidity chunk) to consider a partner for.\n/// @param atTick Tick to convert values at. This can be the current tick or the Uniswap pool TWAP tick.\n/// @param poolUtilization The pool utilization: how much funds are in the Panoptic pool versus the AMM pool.\n/// @return strangleRequired The required amount of collateral needed for the strangle leg.\nfunction _computeStrangle(uint256 tokenId, uint256 index, uint128 positionSize, int24 atTick, uint128 poolUtilization) internal view returns (uint256 strangleRequired)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.constructor(address,address,address,address,address)",
            "signature": "constructor(address,address,address,address,address)",
            "name": "constructor",
            "name_with_params": "constructor(_WETH9, _SFPM, _univ3Factory, _poolReference, _collateralReference)",
            "declaration_string": "/// @notice Construct the Panoptic Factory.\n/// @dev This is meant to be a one-time operation. We have one factory spinning out Panoptic Pools.\n/// @notice This factory mimics the Uniswap v3 factory.\n/// @notice Anyone can spin up Panoptic Pools readily using the factory pattern,\n/// akin to how Uniswap pools can be spun up using the Uniswap factory pattern.\n/// @param _WETH9 The Wrapped Ether contract address.\n/// @param _SFPM The semi fungible position manager keeping track of all options positions of users.\n/// @param _univ3Factory The uniswap v3 factory used to get and confirm existing uniswap v3 pool details.\n/// @param _poolReference The reference implementation of the Panoptic Pool to clone.\n/// @param _collateralReference The reference implementation of the Collateral Token to clone.\nconstructor(address _WETH9, SemiFungiblePositionManager _SFPM, IUniswapV3Factory _univ3Factory, address _poolReference, address _collateralReference) public ERC1155(\"\")",
            "kind": "constructor",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.setOwner(address)",
            "signature": "setOwner(address)",
            "name": "setOwner",
            "name_with_params": "setOwner(newOwner)",
            "declaration_string": "/// @notice Set the owner of the Panoptic Factory.\n/// @notice emits an OwnerChanged event.\n/// @param newOwner the new owner of the Panoptic Factory\nfunction setOwner(address newOwner) external nonReentrant onlyOwner",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard.nonReentrant",
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.onlyOwner"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.factoryOwner()",
            "signature": "factoryOwner()",
            "name": "factoryOwner",
            "name_with_params": "factoryOwner()",
            "declaration_string": "/// @notice Get the address of the owner of this Panoptic Factory.\n/// @return the address which owns this Panoptic Factory.\nfunction factoryOwner() external view returns (address)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.uniswapV3MintCallback(uint256,uint256,bytes)",
            "signature": "uniswapV3MintCallback(uint256,uint256,bytes)",
            "name": "uniswapV3MintCallback",
            "name_with_params": "uniswapV3MintCallback(amount0Owed, amount1Owed, data)",
            "declaration_string": "/// @notice Called after minting liquidity to a position.\n/// @dev Pays the pool tokens owed for the minted liquidity from the payer (always the caller)\n/// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n/// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n/// @param data Contains the payer address and the pool features required to validate the callback\nfunction uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)",
            "signature": "deployNewPool(address,address,uint24,uint96)",
            "name": "deployNewPool",
            "name_with_params": "deployNewPool(token0, token1, fee, salt)",
            "declaration_string": "/// @notice Create a new Panoptic Pool linked to the given Uniswap pool identified uniquely by the incoming parameters.\n/// @notice NOTE: If called by a contract, the caller must implement {IERC1155Receiver-onERC1155Received}\n/// and return the acceptance magic value!\n/// @notice There is a 1:1 mapping between a Panoptic Pool and a Uniswap Pool.\n/// @dev A Uniswap pool is uniquely given by its tokens and the fee.\n/// @param token0 Address of token0 for the underlying Uniswap v3 pool.\n/// @param token1 Address of token1 for the underlying Uniswap v3 pool.\n/// @param fee The fee level of the underlying Uniswap v3 pool, denominated in hundredths of bips.\n/// @param salt User-defined salt used in CREATE2.\n/// @return newPoolContract The interface of the newly deployed Panoptic pool.\nfunction deployNewPool(address token0, address token1, uint24 fee, uint96 salt) external nonReentrant returns (PanopticPool newPoolContract)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard.nonReentrant"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)",
            "signature": "minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)",
            "name": "minePoolAddress",
            "name_with_params": "minePoolAddress(token0, token1, fee, salt, deployer, loops, minTargetRarity)",
            "declaration_string": "/// @notice Find the salt which would give a Panoptic Pool the highest rarity within the search parameters.\n/// The rarity is defined in terms of how many leading hex characters that are zero the Panoptic pool address has.\n/// The salt parameter returned is then needed as a next step as input to 'deployNewPool(...)' to ensure the found rarity.\n/// @dev Anyone can create a new Panoptic Pool. Rare addresses of said pools will get a rare NFT.\n/// @param token0  Address of token0 for the underlying Uniswap v3 pool.\n/// @param token1  Address of token1 for the underlying Uniswap v3 pool.\n/// @param fee The fee level of the of the underlying Uniswap v3 pool, denominated in hundredths of bips.\n/// @param salt Optional salt value to start from (can be zero).\n/// @param deployer Address of the deployer.\n/// @param loops The number of mining operations starting from 'salt' in trying to find the highest rarity.\n/// @param minTargetRarity The minimum target rarity to mine for. The internal loop stops when this is reached *or* when no more iterations.\n/// @return bestSalt The salt of the rarest pool (potentially at the specified minimum target).\n/// @return highestRarity The highest rarity found.\nfunction minePoolAddress(address token0, address token1, uint24 fee, uint96 salt, address deployer, uint256 loops, uint256 minTargetRarity) external view returns (uint96 bestSalt, uint256 highestRarity)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._mintFullRange(address,address,address,uint24,int24)",
            "signature": "_mintFullRange(address,address,address,uint24,int24)",
            "name": "_mintFullRange",
            "name_with_params": "_mintFullRange(v3Pool, token0, token1, fee, tickSpacing)",
            "declaration_string": "/// @notice Seeds Uniswap V3 pool with a full-tick-range liquidity deployment using funds from caller.\n/// @param v3Pool The address of the Uniswap V3 pool to deploy liquidity in.\n/// @param token0 The address of the first token in the Uniswap V3 pool.\n/// @param token1 The address of the second token in the Uniswap V3 pool.\n/// @param fee The fee level of the of the underlying Uniswap v3 pool, denominated in hundredths of bips\n/// @param tickSpacing The tick spacing of the underlying Uniswap v3 pool\n/// @return the amount of token0 deployed at full range\n/// @return the amount of token1 deployed at full range\nfunction _mintFullRange(IUniswapV3Pool v3Pool, address token0, address token1, uint24 fee, int24 tickSpacing) internal returns (uint256, uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._issueNFTToDonor()",
            "signature": "_issueNFTToDonor()",
            "name": "_issueNFTToDonor",
            "name_with_params": "_issueNFTToDonor()",
            "declaration_string": "/// @notice Issue an NFT to the creator of the new Panoptic pool - the donor of genesis full-range liquidity.\n/// @return tokenId the ID of the NFT issued to the creator of the new Panoptic pool.\nfunction _issueNFTToDonor() internal returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getUniswapPool(address,address,uint24)",
            "signature": "_getUniswapPool(address,address,uint24)",
            "name": "_getUniswapPool",
            "name_with_params": "_getUniswapPool(_token0, _token1, _fee)",
            "declaration_string": "/// @notice Return the Uniswap v3 pool from the Uniswap factory corresponding to the incoming pool parameters.\n/// @param _token0 The token0 of the pool requested from the Uniswap factory.\n/// @param _token1 The token1 of the pool requested from the Uniswap factory.\n/// @param _fee The fee level of the of the underlying Uniswap v3 pool, denominated in hundredths of bips.\n/// @return The address of the Uniswap v3 pool from the Uniswap factory corresponding to the incoming pool parameters.\nfunction _getUniswapPool(address _token0, address _token1, uint24 _fee) internal view returns (IUniswapV3Pool)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getSalt(address,address,uint96)",
            "signature": "_getSalt(address,address,uint96)",
            "name": "_getSalt",
            "name_with_params": "_getSalt(_v3Pool, _deployer, _nonce)",
            "declaration_string": "/// @notice Get a salt value to use with the clone deterministic pattern.\n/// @param _v3Pool The Uniswap v3 pool address / implementation.\n/// @param _deployer The deployer of the contract.\n/// @param _nonce A nonce used in the context of mining rarity.\n/// @return A value to use with clone deterministic (in the context of 'minePoolAddress').\nfunction _getSalt(address _v3Pool, address _deployer, uint96 _nonce) internal pure returns (bytes32)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.getPanopticPool(address)",
            "signature": "getPanopticPool(address)",
            "name": "getPanopticPool",
            "name_with_params": "getPanopticPool(univ3pool)",
            "declaration_string": "/// @notice Return the address of the Panoptic Pool associated with 'univ3pool'.\n/// @param univ3pool the Uniswap V3 pool address that 'panopticPool' is associated with.\n/// @return address of the Panoptic Pool associated with 'univ3pool'.\nfunction getPanopticPool(IUniswapV3Pool univ3pool) external view returns (PanopticPool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.constructor(address)",
            "signature": "constructor(address)",
            "name": "constructor",
            "name_with_params": "constructor(_sfpm)",
            "declaration_string": "/// @notice During construction: sets the address of the panoptic factory smart contract and the SemiFungiblePositionMananger (SFPM).\n/// @param _sfpm The address of the SemiFungiblePositionManager (SFPM) contract.\nconstructor(SemiFungiblePositionManager _sfpm) public",
            "kind": "constructor",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.startPool(address,int24,int24,address,address,address,address)",
            "signature": "startPool(address,int24,int24,address,address,address,address)",
            "name": "startPool",
            "name_with_params": "startPool(univ3pool, tickSpacing, currentTick, token0, token1, collateralTracker0, collateralTracker1)",
            "declaration_string": "/// @notice Creates a method for creating a Panoptic Pool on top of an existing Uniswap v3 pair.\n/// @dev Must be called first before any transaction can occur. Must also deploy collateralReference first.\n/// @param univ3pool Address of the target Uniswap v3 pool.\n/// @param tickSpacing TickSpacing of the UniswapV3Pool.\n/// @param currentTick Current tick in the UniswapV3Pool.\n/// @param token0 Address of the pool's token0.\n/// @param token1 Address of the pool's token1.\n/// @param collateralTracker0 Interface for collateral token0.\n/// @param collateralTracker1 Interface for collateral token1.\nfunction startPool(IUniswapV3Pool univ3pool, int24 tickSpacing, int24 currentTick, address token0, address token1, CollateralTracker collateralTracker0, CollateralTracker collateralTracker1) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.optionPositionBalance(address,uint256)",
            "signature": "optionPositionBalance(address,uint256)",
            "name": "optionPositionBalance",
            "name_with_params": "optionPositionBalance(user, tokenId)",
            "declaration_string": "/// @notice Returns the total number of contracts owned by user for a specified position.\n/// @param user Address of the account to be checked.\n/// @param tokenId TokenId of the option position to be checked.\n/// @return balance Number of contracts of tokenId owned by the user.\n/// @return poolUtilization0 The utilization of token0 in the Panoptic pool at mint.\n/// @return poolUtilization1 The utilization of token1 in the Panoptic pool at mint.\nfunction optionPositionBalance(address user, uint256 tokenId) external view returns (uint128 balance, uint64 poolUtilization0, uint64 poolUtilization1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculateAccumulatedFeesBatch(address,uint256[])",
            "signature": "calculateAccumulatedFeesBatch(address,uint256[])",
            "name": "calculateAccumulatedFeesBatch",
            "name_with_params": "calculateAccumulatedFeesBatch(user, positionIdList)",
            "declaration_string": "/// @notice Compute the total amount of premium accumulated for a list of positions.\n/// @dev Can be costly as it reads information from 2 ticks for each leg of each tokenId.\n/// @param user Address of the user that owns the positions.\n/// @param positionIdList List of positions. Written as [tokenId1, tokenId2, ...].\n/// @return premium0 Premium for token0 (negative = amount is owed).\n/// @return premium1 Premium for token1 (negative = amount is owed).\n/// @return balances A list of balances and pool utilization for each position, of the form [[tokenId0, balances0], [tokenId1, balances1], ...].\nfunction calculateAccumulatedFeesBatch(address user, uint256[] calldata positionIdList) external view returns (int128 premium0, int128 premium1, uint256[2][] memory)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculatePortfolioValue(address,int24,uint256[])",
            "signature": "calculatePortfolioValue(address,int24,uint256[])",
            "name": "calculatePortfolioValue",
            "name_with_params": "calculatePortfolioValue(user, atTick, positionIdList)",
            "declaration_string": "/// @notice Compute the total value of the portfolio defined by the positionIdList at the given tick.\n/// @dev The return values do not include the value of the accumulated fees.\n/// @dev value0 and value1 are related to one another according to: value1 = value0 * price(atTick).\n/// @param user Address of the user that owns the positions.\n/// @param atTick Tick at which the portfolio value is evaluated.\n/// @param positionIdList List of positions. Written as [tokenId1, tokenId2, ...].\n/// @return value0 Portfolio value in terms of token0 (negative = loss, when compared with starting value).\n/// @return value1 Portfolio value in terms of token1 (negative = loss, when compared to starting value).\nfunction calculatePortfolioValue(address user, int24 atTick, uint256[] calldata positionIdList) external view returns (int256 value0, int256 value1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)",
            "signature": "_calculateAccumulatedPremia(address,uint256[],bool,int24)",
            "name": "_calculateAccumulatedPremia",
            "name_with_params": "_calculateAccumulatedPremia(user, positionIdList, collateralCalculation, atTick)",
            "declaration_string": "/// @notice Calculate the accumulated premia owed from the option buyer to the option seller.\n/// @param user The holder of options.\n/// @param positionIdList The list of all option positions held by user.\n/// @param collateralCalculation If true do not compute premium of short options - these are liquidity chunks in the AMM currently.\n/// This is because the contracts only consider long premium as part of the collateral,\n/// so setting it as true will compute all the long premia and deduct it from the collateral balance.\n/// @param atTick Tick at which the accumulated premia is evaluated.\n/// @return portfolioPremium The computed premia of the user's positions, where premia contains the accumulated premia for token0 in the right slot and for token1 in the left slot.\n/// @return balances A list of balances and pool utilization for each position, of the form [[tokenId0, balances0], [tokenId1, balances1], ...].\nfunction _calculateAccumulatedPremia(address user, uint256[] calldata positionIdList, bool collateralCalculation, int24 atTick) internal view returns (int256 portfolioPremium, uint256[2][] memory balances)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)",
            "signature": "_getPriceAndCheckSlippageViolation(int24,int24)",
            "name": "_getPriceAndCheckSlippageViolation",
            "name_with_params": "_getPriceAndCheckSlippageViolation(tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Check for slippage violation given the incoming tick limits and extract current price information from the AMM.\n/// @dev If the current price is beyond the slippage bounds a reversion is thrown.\n/// @param tickLimitLow The lower slippage limit on the tick.\n/// @param tickLimitHigh The upper slippage limit on the tick.\n/// @return currentTick The current price tick in the AMM.\n/// @return medianTick The median price in the mini-TWAP storage.\n/// @return tickLimitLow Adjusted value for the lower tick limit.\n/// @return tickLimitHigh Adjusted value for the upper tick limit.\nfunction _getPriceAndCheckSlippageViolation(int24 tickLimitLow, int24 tickLimitHigh) internal view returns (int24 currentTick, int24 medianTick, int24, int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.mintOptions(uint256[],uint128,uint64,int24,int24)",
            "signature": "mintOptions(uint256[],uint128,uint64,int24,int24)",
            "name": "mintOptions",
            "name_with_params": "mintOptions(positionIdList, positionSize, effectiveLiquidityLimitX32, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Validates the current options of the user, and mints a new position.\n/// @param positionIdList the list of currently held positions by the user, where the newly minted position(token) will be the last element in 'positionIdList'.\n/// @param positionSize The size of the position to be minted, expressed in terms of the asset.\n/// @param effectiveLiquidityLimitX32 Maximum amount of \"spread\" defined as shortLiquidity/netLiquidity for a new position.\n/// denominated as X32 = (ratioLimit * 2**32). Set to 0 for no limit / only short options.\n/// @param tickLimitLow The lower tick slippagelimit.\n/// @param tickLimitHigh The upper tick slippagelimit.\nfunction mintOptions(uint256[] calldata positionIdList, uint128 positionSize, uint64 effectiveLiquidityLimitX32, int24 tickLimitLow, int24 tickLimitHigh) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.burnOptions(uint256,int24,int24)",
            "signature": "burnOptions(uint256,int24,int24)",
            "name": "burnOptions",
            "name_with_params": "burnOptions(tokenId, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Burns the entire balance of tokenId of the caller(msg.sender).\n/// @dev Will exercise if necessary, and will revert if user does not have enough collateral to exercise.\n/// @param tokenId The tokenId of the option position to be burnt.\n/// @param tickLimitLow Price slippage limit when burning an ITM option.\n/// @param tickLimitHigh Price slippage limit when burning an ITM option.\nfunction burnOptions(uint256 tokenId, int24 tickLimitLow, int24 tickLimitHigh) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.burnOptions(uint256[],int24,int24)",
            "signature": "burnOptions(uint256[],int24,int24)",
            "name": "burnOptions",
            "name_with_params": "burnOptions(positionIdList, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Burns the entire balance of all tokenIds provided in positionIdList of the caller(msg.sender).\n/// @dev Will exercise if necessary, and will revert if user does not have enough collateral to exercise.\n/// @param positionIdList The list of tokenIds for the option positions to be burnt.\n/// @param tickLimitLow Price slippage limit when burning an ITM option.\n/// @param tickLimitHigh Price slippage limit when burning an ITM option.\nfunction burnOptions(uint256[] calldata positionIdList, int24 tickLimitLow, int24 tickLimitHigh) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.rollOptions(uint256,uint256,uint256[],uint64,int24,int24)",
            "signature": "rollOptions(uint256,uint256,uint256[],uint64,int24,int24)",
            "name": "rollOptions",
            "name_with_params": "rollOptions(oldTokenId, newTokenId, positionIdList, effectiveLiquidityLimitX32, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Rolls the entire liquidity of oldTokenId into the last item in positionIdList.\n/// @param oldTokenId The tokenId of the position to be burnt.\n/// @param newTokenId The tokenId of the position to be minted.\n/// @param positionIdList Positions list. IF new tokenId is out-of-range, then list can be set be the empty [] to avoid checking for collateral requirements and save gas. Otherwise, last item MUST be oldTokenId.\n/// @param effectiveLiquidityLimitX32 Maximum amount of \"spread\" defined as shortLiquidity/netLiquidity for a new position.\n/// denominated as X32 = (ratioLimit * 2**32). Set to 0 for no limit / only short options.\n/// @param tickLimitLow Price slippage limit when burning an ITM option.\n/// @param tickLimitHigh Price slippage limit when burning an ITM option.\nfunction rollOptions(uint256 oldTokenId, uint256 newTokenId, uint256[] calldata positionIdList, uint64 effectiveLiquidityLimitX32, int24 tickLimitLow, int24 tickLimitHigh) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)",
            "signature": "_mintOptions(uint256[],uint128,uint64,int24,int24)",
            "name": "_mintOptions",
            "name_with_params": "_mintOptions(positionIdList, positionSize, effectiveLiquidityLimitX32, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Validates the current options of the user, and mints a new position.\n/// @param positionIdList the list of currently held positions by the user, where the newly minted position(token) will be the last element in 'positionIdList'.\n/// @param positionSize The size of the position to be minted, expressed in terms of the asset.\n/// @param effectiveLiquidityLimitX32 Maximum amount of \"spread\" defined as shortLiquidity/netLiquidity for a new position.\n/// denominated as X32 = (ratioLimit * 2**32). Set to 0 for no limit / only short options.\n/// @param tickLimitLow The lower tick slippagelimit.\n/// @param tickLimitHigh The upper tick slippagelimit.\nfunction _mintOptions(uint256[] calldata positionIdList, uint128 positionSize, uint64 effectiveLiquidityLimitX32, int24 tickLimitLow, int24 tickLimitHigh) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)",
            "signature": "_mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)",
            "name": "_mintInSFPMAndUpdateCollateral",
            "name_with_params": "_mintInSFPMAndUpdateCollateral(tokenId, tickStateCallContext, positionSize, positionIdList, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Check user health (collateral status).\n/// @dev Moves the required liquidity and checks for user health.\n/// @param tokenId The option position to be minted.\n/// @param tickStateCallContext Container that holds current tick, median tick, and caller.\n/// @param positionSize The size of the position, expressed in terms of the asset.\n/// @param positionIdList The existing positions held by the user.\n/// @param tickLimitLow The lower slippage limit on the tick.\n/// @param tickLimitHigh The upper slippage limit on the tick.\n/// @return poolUtilizations Packing of the pool utilization (how much funds are in the Panoptic pool versus the AMM pool) at the time of minting,\n/// right 64bits for token0 and left 64bits for token1.\nfunction _mintInSFPMAndUpdateCollateral(uint256 tokenId, uint256 tickStateCallContext, uint128 positionSize, uint256[] calldata positionIdList, int24 tickLimitLow, int24 tickLimitHigh) internal returns (uint128 poolUtilizations)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])",
            "signature": "_payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])",
            "name": "_payCommissionAndWriteData",
            "name_with_params": "_payCommissionAndWriteData(tickStateCallContext, oldTokenId, tokenId, positionSize, totalSwapped, oldPositionPremia, positionIdList)",
            "declaration_string": "/// @notice Pay the commission fees for creating the options and update internal state.\n/// @dev Computes long+short amounts, extracts pool utilizations.\n/// @param tickStateCallContext Container that holds current tick, median tick, and caller.\n/// @param oldTokenId The old option position - used for rolls only: rolling *from* this position.\n/// @param tokenId The option position; in case of a roll: the position to roll *to*.\n/// @param positionSize The size of the position, expressed in terms of the asset\n/// @param totalSwapped How much was swapped (if in-the-money position).\n/// @param oldPositionPremia Premia of the closed position, if this is a roll.\n/// @param positionIdList The total amount of positions held by the user.\n/// @return poolUtilizations Packing of the pool utilization (how much funds are in the Panoptic pool versus the AMM pool at the time of minting),\n/// right 64bits for token0 and left 64bits for token1, defined as (inAMM * 10_000) / totalAssets().\n/// Where totalAssets is the total tracked assets in the AMM and PanopticPool minus fees and donations to the Panoptic pool.\nfunction _payCommissionAndWriteData(uint256 tickStateCallContext, uint256 oldTokenId, uint256 tokenId, uint128 positionSize, int256 totalSwapped, int256 oldPositionPremia, uint256[] calldata positionIdList) internal returns (uint128 poolUtilizations)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)",
            "signature": "takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)",
            "name": "takeCommission",
            "name_with_params": "takeCommission(positionBalanceArray, tickStateCallContext, longAmounts, shortAmounts, portfolioPremium, totalSwapped, oldPositionPremia)",
            "declaration_string": "/// @notice Takes the commission for each collateral token and check for user solvency.\n/// @dev Solvency check is only performed if the positionBalanceArray length is larger that 0 (it is zero when rolling a position).\n/// @param positionBalanceArray Array containing a list of [tokenId, s_positionBalance], where s_positionBalance is (utilization0, utilization1, positionSize).\n/// @param tickStateCallContext Container that holds current tick, median tick, and caller.\n/// @param longAmounts The notional value of long legs in the position.\n/// @param shortAmounts The notional value of short legs in the position.\n/// @param portfolioPremium Value of the long premia owed for all position in positionIdList.\n/// @param totalSwapped Amount of tokens that were swapped during minting/rolling. Only happens when minting ITM positions.\n/// @param oldPositionPremia Premia accumulated for the position that was closed during a roll.\nfunction takeCommission(uint256[2][] memory positionBalanceArray, uint256 tickStateCallContext, int256 longAmounts, int256 shortAmounts, int256 portfolioPremium, int256 totalSwapped, int256 oldPositionPremia) internal returns (uint128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)",
            "signature": "_addUserOption(uint256,uint64)",
            "name": "_addUserOption",
            "name_with_params": "_addUserOption(mintTokenId, effectiveLiquidityLimitX32)",
            "declaration_string": "/// @notice Store user option data. Track fees collected for the options.\n/// @dev Computes and stores the option data for each leg.\n/// @param mintTokenId The id of the minted option position.\n/// @param effectiveLiquidityLimitX32 Maximum amount of \"spread\" defined as shortLiquidity/netLiquidity for a new position\n/// denominated as X32 = (ratioLimit * 2**32). Set to 0 for no limit / only short options.\nfunction _addUserOption(uint256 mintTokenId, uint64 effectiveLiquidityLimitX32) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._setUserOptionsBalance(address,uint256,uint128,uint128)",
            "signature": "_setUserOptionsBalance(address,uint256,uint128,uint128)",
            "name": "_setUserOptionsBalance",
            "name_with_params": "_setUserOptionsBalance(user, tokenId, positionSize, poolUtilizationAtMint)",
            "declaration_string": "/// @notice Set a new option balance for user of option position 'tokenId'.\n/// @param user The user/account to update the balance of.\n/// @param tokenId The option position in question.\n/// @param positionSize The size of the option position in 'tokenId' owned by '_user'.\n/// @param poolUtilizationAtMint The pool utilization ratio when the original position was minted.\nfunction _setUserOptionsBalance(address user, uint256 tokenId, uint128 positionSize, uint128 poolUtilizationAtMint) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doMintChecks(uint256)",
            "signature": "_doMintChecks(uint256)",
            "name": "_doMintChecks",
            "name_with_params": "_doMintChecks(mintTokenId)",
            "declaration_string": "/// @notice Validate the incoming list of positions for the user as it relates to minting.\n/// @dev reverts If the validation fails.\n/// @param mintTokenId The candidate option position to validate.\nfunction _doMintChecks(uint256 mintTokenId) internal view",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)",
            "signature": "_getSolvencyBalances(uint256,uint256,uint160)",
            "name": "_getSolvencyBalances",
            "name_with_params": "_getSolvencyBalances(tokenData0, tokenData1, sqrtPriceX96)",
            "declaration_string": "/// @notice Get parameters related to the solvency state of the account associated with the incoming tokenData.\n/// @param tokenData0 Leftright encoded word with balance of token0 in the right slot, and required balance in left slot.\n/// @param tokenData1 Leftright encoded word with balance of token1 in the right slot, and required balance in left slot.\n/// @param sqrtPriceX96 The current sqrt(price) of the AMM.\n/// @return balanceCross The current cross-collateral balance of the option positions.\n/// @return thresholdCross The cross-collateral threshold balance under which the account is insolvent.\nfunction _getSolvencyBalances(uint256 tokenData0, uint256 tokenData1, uint160 sqrtPriceX96) internal pure returns (uint256 balanceCross, uint256 thresholdCross)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAllOptionsFrom(address,int24,int24,uint256[])",
            "signature": "_burnAllOptionsFrom(address,int24,int24,uint256[])",
            "name": "_burnAllOptionsFrom",
            "name_with_params": "_burnAllOptionsFrom(owner, tickLimitLow, tickLimitHigh, positionIdList)",
            "declaration_string": "/// @notice Helper to burn option during a liquidation from an account _owner.\n/// @param owner the owner of the option position to be liquidated.\n/// @param tickLimitLow Price slippage limit when burning an ITM option\n/// @param tickLimitHigh Price slippage limit when burning an ITM option\n/// @param positionIdList the option position to liquidate.\nfunction _burnAllOptionsFrom(address owner, int24 tickLimitLow, int24 tickLimitHigh, uint256[] calldata positionIdList) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)",
            "signature": "_burnOptions(uint256,address,int24,int24)",
            "name": "_burnOptions",
            "name_with_params": "_burnOptions(tokenId, owner, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Helper to burn an option position held by '_owner'.\n/// @param tokenId the option position to burn.\n/// @param owner the owner of the option position to be burned.\n/// @param tickLimitLow Price slippage limit when burning an ITM option\n/// @param tickLimitHigh Price slippage limit when burning an ITM option\nfunction _burnOptions(uint256 tokenId, address owner, int24 tickLimitLow, int24 tickLimitHigh) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)",
            "signature": "_updatePositionDataBurn(address,uint256)",
            "name": "_updatePositionDataBurn",
            "name_with_params": "_updatePositionDataBurn(owner, burnTokenId)",
            "declaration_string": "/// @notice Update the internal tracking of the owner's position data upon burning/rolling a position.\n/// @param owner The owner of the option position.\n/// @param burnTokenId The option position to burn.\nfunction _updatePositionDataBurn(address owner, uint256 burnTokenId) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)",
            "signature": "_burnAndHandleExercise(uint256,uint128,address,int24,int24)",
            "name": "_burnAndHandleExercise",
            "name_with_params": "_burnAndHandleExercise(tokenId, positionSize, owner, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Burns and handles the exercise of options.\n/// @param tokenId The option position to burn.\n/// @param positionSize The size of the option position, expressed in terms of the asset.\n/// @param tickLimitLow The lower slippage limit on the tick.\n/// @param tickLimitHigh The upper slippage limit on the tick.\n/// @param owner The owner of the option position.\nfunction _burnAndHandleExercise(uint256 tokenId, uint128 positionSize, address owner, int24 tickLimitLow, int24 tickLimitHigh) internal returns (int256 currentPositionPremia)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)",
            "signature": "_rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)",
            "name": "_rollOptions",
            "name_with_params": "_rollOptions(oldTokenId, newTokenId, tickStateCallContext, positionIdList, effectiveLiquidityLimitX32, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Helper to Roll options from an old position to a new position.\n/// @param oldTokenId Roll *from* this option position.\n/// @param newTokenId Roll *to* this option position.\n/// @param tickStateCallContext Container that holds current tick, median tick, and caller.\n/// @param positionIdList The list of position's the user holds. If rolling to an OTM position pass in an empty list of existing positions (not needed).\n/// @param effectiveLiquidityLimitX32 Maximum amount of \"spread\" defined as shortLiquidity/netLiquidity for a new position.\n/// denominated as X32 = (ratioLimit * 2**32). Set to 0 for no limit / only short options.\n/// @param tickLimitLow The lower slippage limit on the tick.\n/// @param tickLimitHigh The upper slippage limit on the tick.\nfunction _rollOptions(uint256 oldTokenId, uint256 newTokenId, uint256 tickStateCallContext, uint256[] calldata positionIdList, uint64 effectiveLiquidityLimitX32, int24 tickLimitLow, int24 tickLimitHigh) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)",
            "signature": "_writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)",
            "name": "_writeDataForRolls",
            "name_with_params": "_writeDataForRolls(oldTokenId, newTokenId, positionSize, tickStateCallContext, positionIdList, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Update The amount of funds in the AMM and the premia. Also updates the number of positions.\n/// @param oldTokenId The position to roll *from*.\n/// @param newTokenId The position to roll *to*.\n/// @param positionSize The size of the position to roll, expressed in terms of the asset.\n/// @param tickStateCallContext Container that holds current tick, median tick, and caller.\n/// @param positionIdList Use an empty list for the positions held by a user because we are rolling.\n/// @param tickLimitLow The lower slippage limit on the tick.\n/// @param tickLimitHigh The upper slippage limit on the tick.\n/// @return poolUtilizations Packing of the pool utilization (how much funds are in the Panoptic pool versus the AMM pool) at the time of minting,\n/// right 64bits for token0 and left 64bits for token1.\n/// @return oldPositionPremia Premium collected for the position that was closed.\nfunction _writeDataForRolls(uint256 oldTokenId, uint256 newTokenId, uint128 positionSize, uint256 tickStateCallContext, uint256[] calldata positionIdList, int24 tickLimitLow, int24 tickLimitHigh) internal returns (uint128 poolUtilizations, int256 oldPositionPremia)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRoll(uint256,uint256,uint128,int24,int24)",
            "signature": "_doRoll(uint256,uint256,uint128,int24,int24)",
            "name": "_doRoll",
            "name_with_params": "_doRoll(oldTokenId, newTokenId, positionSize, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Calls the SFPM to perform a roll of an option position and returns relevant data\n/// @param oldTokenId roll *from* this option position\n/// @param newTokenId roll *to* this option position\n/// @param positionSize the size of the option position\n/// @param tickLimitLow the lower slippage limit on the tick\n/// @param tickLimitHigh the upper slippage limit on the tick\n/// @return totalSwappedNet the net amount moved after burning `oldTokenId` and minting `newTokenId` including the swapped amount\n/// @return newTick the `currentTick` in the Uniswap pool after rolling `oldTokenId` to `newTokenId`\nfunction _doRoll(uint256 oldTokenId, uint256 newTokenId, uint128 positionSize, int24 tickLimitLow, int24 tickLimitHigh) internal returns (int256, int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRollChecks(uint256[],uint256,uint256,int24)",
            "signature": "_doRollChecks(uint256[],uint256,uint256,int24)",
            "name": "_doRollChecks",
            "name_with_params": "_doRollChecks(positionIdList, oldTokenId, newTokenId, currentTick)",
            "declaration_string": "/// @notice Checks that the roll tokens (old to new) are valid.\n/// @param positionIdList Positions list. IF new tokenId is out-of-range, then list can be set be the empty [] to avoid checking for collateral requirements and save gas\n/// @param oldTokenId the position being rolled *from*\n/// @param newTokenId the position being rolled *to*\n/// @param currentTick the current tick of the AMM\nfunction _doRollChecks(uint256[] calldata positionIdList, uint256 oldTokenId, uint256 newTokenId, int24 currentTick) internal view",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])",
            "signature": "liquidateAccount(address,int24,int24,uint256[])",
            "name": "liquidateAccount",
            "name_with_params": "liquidateAccount(account, tickLimitLow, tickLimitHigh, positionIdList)",
            "declaration_string": "/// @notice Liquidates a distressed account. Will burn all positions and will issue a bonus to the liquidator.\n/// @dev Will revert if: account is not margin called or if the user liquidates themselves.\n/// @param account Address of the distressed account.\n/// @param tickLimitLow The lower tick slippagelimit.\n/// @param tickLimitHigh The upper tick slippagelimit.\n/// @param positionIdList List of positions owned by the user. Written as [tokenId1, tokenId2, ...].\nfunction liquidateAccount(address account, int24 tickLimitLow, int24 tickLimitHigh, uint256[] calldata positionIdList) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])",
            "signature": "forceExercise(address,int24,int24,uint256[],uint256[])",
            "name": "forceExercise",
            "name_with_params": "forceExercise(account, tickLimitLow, tickLimitHigh, touchedId, idsToBurn)",
            "declaration_string": "/// @notice Force the exercise of a single position. Exercisor will have to pay a small fee do force exercise.\n/// @dev Will revert if: number of touchedId is larger than 1 or if user force exercises their own position\n/// @param account Address of the distressed account\n/// @param tickLimitLow The lower tick slippagelimit\n/// @param tickLimitHigh The upper tick slippagelimit\n/// @param touchedId List of position to be force exercised. Can only contain one tokenId, written as [tokenId]\n/// @param idsToBurn List of positions to be burned if the force exercisor has open positions\n/// @dev The collateral decrease resulting from burning these positions must be greater than the force exercise fee\nfunction forceExercise(address account, int24 tickLimitLow, int24 tickLimitHigh, uint256[] calldata touchedId, uint256[] calldata idsToBurn) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._validatePositionList(address,uint256[],uint256)",
            "signature": "_validatePositionList(address,uint256[],uint256)",
            "name": "_validatePositionList",
            "name_with_params": "_validatePositionList(account, positionIdList, offset)",
            "declaration_string": "/// @notice Makes sure that the positions in the incoming user's list match the existing active option positions.\n/// @dev Check whether the list of positionId 1) has duplicates and 2) matches the length stored in the positionsHash.\n/// @param account The owner of the incoming list of positions.\n/// @param positionIdList The existing list of active options for the owner.\n/// @param offset Changes depending on whether this is a new mint or a roll (=1 if new mint, 0 if roll).\nfunction _validatePositionList(address account, uint256[] calldata positionIdList, uint256 offset) internal view",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionsHash(address,uint256,bool)",
            "signature": "_updatePositionsHash(address,uint256,bool)",
            "name": "_updatePositionsHash",
            "name_with_params": "_updatePositionsHash(account, tokenId, addFlag)",
            "declaration_string": "/// @notice Updates the hash for all positions owned by an account. This fingerprints the list of all incoming options with a single hash.\n/// @dev The outcome of this function will be to update the hash of positions.\n/// This is done as a duplicate/validation check of the incoming list O(N).\n/// @dev The positions hash is stored as the XOR of the keccak256 of each tokenId. Updating will XOR the existing hash with the new tokenId.\n/// The same update can either add a new tokenId (when minting an option), or remove an existing one (when burning it) - this happens through the XOR.\n/// @param account The owner of the options.\n/// @param tokenId The option position.\n/// @param addFlag Pass addFlag=true when this is adding a position, needed to ensure the number of positions increases or decreases.\nfunction _updatePositionsHash(address account, uint256 tokenId, bool addFlag) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()",
            "signature": "pokeMedian()",
            "name": "pokeMedian",
            "name_with_params": "pokeMedian()",
            "declaration_string": "/// @notice Updates the mini twap of the PanopticPool, called externally\nfunction pokeMedian() external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getMedian()",
            "signature": "getMedian()",
            "name": "getMedian",
            "name_with_params": "getMedian()",
            "declaration_string": "/// @notice Computes The mini twap of the PanopticPool.\n/// @return medianTick The median value over the last 8 interactions.\nfunction getMedian() internal view returns (int24 medianTick)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.updateMedian(int24)",
            "signature": "updateMedian(int24)",
            "name": "updateMedian",
            "name_with_params": "updateMedian(currentTick)",
            "declaration_string": "/// @notice Updates the mini twap of the PanopticPool.\n/// @param currentTick The currentTick.\nfunction updateMedian(int24 currentTick) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.univ3pool()",
            "signature": "univ3pool()",
            "name": "univ3pool",
            "name_with_params": "univ3pool()",
            "declaration_string": "/// @notice Get the address of the AMM pool connected to this Panoptic pool.\n/// @return univ3pool AMM pool corresponding to this Panoptic pool.\nfunction univ3pool() external view returns (IUniswapV3Pool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.collateralToken0()",
            "signature": "collateralToken0()",
            "name": "collateralToken0",
            "name_with_params": "collateralToken0()",
            "declaration_string": "/// @notice Get the collateral token corresponding to token0 of the AMM pool.\n/// @return collateralToken Collateral token corresponding to token0 in the AMM.\nfunction collateralToken0() external view returns (CollateralTracker collateralToken)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.collateralToken1()",
            "signature": "collateralToken1()",
            "name": "collateralToken1",
            "name_with_params": "collateralToken1()",
            "declaration_string": "/// @notice Get the collateral token corresponding to token1 of the AMM pool.\n/// @return collateralToken collateral token corresponding to token1 in the AMM.\nfunction collateralToken1() external view returns (CollateralTracker)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.numberOfPositions(address)",
            "signature": "numberOfPositions(address)",
            "name": "numberOfPositions",
            "name_with_params": "numberOfPositions(user)",
            "declaration_string": "/// @notice get the number of positions for an account\n/// @param user the account to get the positions hash of\n/// @return _numberOfPositions number of positions in the account\nfunction numberOfPositions(address user) public view returns (uint256 _numberOfPositions)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getUniV3TWAP()",
            "signature": "getUniV3TWAP()",
            "name": "getUniV3TWAP",
            "name_with_params": "getUniV3TWAP()",
            "declaration_string": "/// @notice Compute the TWAP price from the last 600s = 10mins.\n/// @return twapTick The TWAP price in ticks.\nfunction getUniV3TWAP() internal view returns (int24 twapTick)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getPriceArray()",
            "signature": "getPriceArray()",
            "name": "getPriceArray",
            "name_with_params": "getPriceArray()",
            "declaration_string": "/// @notice return the array of the last 8 price values stored internally.\n/// @return priceArray the series of prices used to compute the median price.\n/// @return medianTick the median tick of the current price array.\nfunction getPriceArray() external view returns (int24[] memory priceArray, int24 medianTick)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)",
            "signature": "_checkLiquiditySpread(uint256,uint256,int24,int24,uint64)",
            "name": "_checkLiquiditySpread",
            "name_with_params": "_checkLiquiditySpread(tokenId, leg, tickLower, tickUpper, effectiveLiquidityLimitX32)",
            "declaration_string": "/// @notice Ensure the effective liquidity in a given chunk is above a certain threshold.\n/// @param tokenId The id of the option position.\n/// @param leg The leg of the option position (used to check if long or short).\n/// @param tickLower The lower tick of the chunk.\n/// @param tickUpper The upper tick of the chunk.\n/// @param effectiveLiquidityLimitX32 Maximum amount of \"spread\" defined as shortLiquidity/netLiquidity for a new position\n/// denominated as X32 = (ratioLimit * 2**32). Set to 0 for no limit / only short options.\nfunction _checkLiquiditySpread(uint256 tokenId, uint256 leg, int24 tickLower, int24 tickUpper, uint64 effectiveLiquidityLimitX32) internal view",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)",
            "signature": "_getPremia(uint256,uint128,address,bool,int24)",
            "name": "_getPremia",
            "name_with_params": "_getPremia(tokenId, positionSize, owner, collateralCalculation, atTick)",
            "declaration_string": "/// @notice Compute the premia collected for a single option position 'tokenId'.\n/// @param tokenId The option position.\n/// @param positionSize The number of contracts (size) of the option position.\n/// @param owner The holder of the tokenId option.\n/// @param collateralCalculation If true do not compute premium of short options - these are liquidity chunks in the AMM currently.\n/// This is because the contracts only consider long premium as part of the collateral,\n/// so setting it as true will compute all the long premia and deduct it from the collateral balance.\n/// @param atTick The tick at which the premia is calculated -> use (atTick < type(int24).max) to compute it\n/// up to current block. atTick = type(int24).max will only consider fees as of the last on-chain transaction.\n/// @return premia The computed premia (LeftRight-packed) of the option position for tokens 0 (right slot) and 1 (left slot).\nfunction _getPremia(uint256 tokenId, uint128 positionSize, address owner, bool collateralCalculation, int24 atTick) internal view returns (int256 premia)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.beginReentrancyLock(uint64)",
            "signature": "beginReentrancyLock(uint64)",
            "name": "beginReentrancyLock",
            "name_with_params": "beginReentrancyLock(poolId)",
            "declaration_string": "/// @notice Add reentrancy lock on pool\n/// @dev reverts if the pool is already locked\n/// @param poolId The poolId of the pool to add the reentrancy lock to\nfunction beginReentrancyLock(uint64 poolId) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.endReentrancyLock(uint64)",
            "signature": "endReentrancyLock(uint64)",
            "name": "endReentrancyLock",
            "name_with_params": "endReentrancyLock(poolId)",
            "declaration_string": "/// @notice Remove reentrancy lock on pool\n/// @param poolId The poolId of the pool to remove the reentrancy lock from\nfunction endReentrancyLock(uint64 poolId) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.constructor(address)",
            "signature": "constructor(address)",
            "name": "constructor",
            "name_with_params": "constructor(_factory)",
            "declaration_string": "/// @notice Construct the Semi-Fungible Position Manager (SFPM)\n/// @param _factory the Uniswap v3 Factory used to retrieve registered Uniswap pools\nconstructor(IUniswapV3Factory _factory) public",
            "kind": "constructor",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.initializeAMMPool(address,address,uint24)",
            "signature": "initializeAMMPool(address,address,uint24)",
            "name": "initializeAMMPool",
            "name_with_params": "initializeAMMPool(token0, token1, fee)",
            "declaration_string": "/// @notice Initialize a Uniswap v3 pool in the SemifungiblePositionManager contract\n/// @dev Revert if already initialized.\n/// @param token0 The contract address of token0 of the pool\n/// @param token1 The contract address of token1 of the pool\n/// @param fee The fee level of the of the underlying Uniswap v3 pool, denominated in hundredths of bips\nfunction initializeAMMPool(address token0, address token1, uint24 fee) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3MintCallback(uint256,uint256,bytes)",
            "signature": "uniswapV3MintCallback(uint256,uint256,bytes)",
            "name": "uniswapV3MintCallback",
            "name_with_params": "uniswapV3MintCallback(amount0Owed, amount1Owed, data)",
            "declaration_string": "/// @notice Called after minting liquidity to a position\n/// @dev Pays the pool tokens owed for the minted liquidity from the payer (always the caller)\n/// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n/// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n/// @param data Contains the payer address and the pool features required to validate the callback\nfunction uniswapV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3SwapCallback(int256,int256,bytes)",
            "signature": "uniswapV3SwapCallback(int256,int256,bytes)",
            "name": "uniswapV3SwapCallback",
            "name_with_params": "uniswapV3SwapCallback(amount0Delta, amount1Delta, data)",
            "declaration_string": "/// @notice Called by the pool after executing a swap during an ITM option mint/burn.\n/// @dev Pays the pool tokens owed for the swap from the payer (always the caller)\n/// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n/// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n/// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n/// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n/// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n/// @param data Contains the payer address and the pool features required to validate the callback\nfunction uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.burnTokenizedPosition(uint256,uint128,int24,int24)",
            "signature": "burnTokenizedPosition(uint256,uint128,int24,int24)",
            "name": "burnTokenizedPosition",
            "name_with_params": "burnTokenizedPosition(tokenId, positionSize, slippageTickLimitLow, slippageTickLimitHigh)",
            "declaration_string": "/// @notice Burn a new position containing up to 4 legs wrapped in a ERC1155 token.\n/// @dev Auto-collect all accumulated fees.\n/// @param tokenId The tokenId of the minted position, which encodes information about up to 4 legs\n/// @param positionSize The number of contracts minted, expressed in terms of the asset\n/// @param slippageTickLimitLow The lower price slippage limit when minting an ITM position (set to larger than slippageTickLimitHigh for swapping when minting)\n/// @param slippageTickLimitHigh The higher slippage limit when minting an ITM position (set to lower than slippageTickLimitLow for swapping when minting)\n/// @return totalCollected A LeftRight encoded word containing the total amount of token0 and token1 collected as fees\n/// @return totalSwapped A LeftRight encoded word containing the total amount of token0 and token1 swapped if minting ITM\n/// @return newTick the current tick in the pool after all the mints and swaps\nfunction burnTokenizedPosition(uint256 tokenId, uint128 positionSize, int24 slippageTickLimitLow, int24 slippageTickLimitHigh) external ReentrancyLock(tokenId.univ3pool()) returns (int256 totalCollected, int256 totalSwapped, int24 newTick)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.ReentrancyLock"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)",
            "signature": "rollTokenizedPositions(uint256,uint256,uint128,int24,int24)",
            "name": "rollTokenizedPositions",
            "name_with_params": "rollTokenizedPositions(oldTokenId, newTokenId, positionSize, slippageTickLimitLow, slippageTickLimitHigh)",
            "declaration_string": "/// @notice Roll a position containing up to 4 legs stored in `oldTokenId` to `newTokenId`.\n/// @dev Will either i) perform burnTokenizedPosition then mintTokenizedPosition or ii) create a new tokenId that only rolls the touched legs\n/// @param oldTokenId The tokenId of the burnt position\n/// @param newTokenId The tokenId of the newly minted position\n/// @param positionSize The number of contracts minted, expressed in terms of the asset\n/// @param slippageTickLimitLow The lower price slippage limit when minting an ITM position (set to larger than slippageTickLimitHigh for swapping when minting)\n/// @param slippageTickLimitHigh The higher slippage limit when minting an ITM position (set to lower than slippageTickLimitLow for swapping when minting)\n/// @return totalCollectedBurn A LeftRight encoded word containing the total amount of token0 and token1 collected as fees when burning the position\n/// @return totalSwappedBurn A LeftRight encoded word containing the total amount of token0 and token1 swapped if burned ITM\n/// @return totalCollectedMint A LeftRight encoded word containing the total amount of token0 and token1 collect as fees when minting the position\n/// @return totalSwappedMint A LeftRight encoded word containing the total amount of token0 and token1 swapped if minted ITM\n/// @return newTick the current tick in the pool after all the mints and swaps\nfunction rollTokenizedPositions(uint256 oldTokenId, uint256 newTokenId, uint128 positionSize, int24 slippageTickLimitLow, int24 slippageTickLimitHigh) external ReentrancyLockRoll(oldTokenId.univ3pool(), newTokenId.univ3pool()) returns (int256 totalCollectedBurn, int256 totalSwappedBurn, int256 totalCollectedMint, int256 totalSwappedMint, int24 newTick)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.ReentrancyLockRoll"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.mintTokenizedPosition(uint256,uint128,int24,int24)",
            "signature": "mintTokenizedPosition(uint256,uint128,int24,int24)",
            "name": "mintTokenizedPosition",
            "name_with_params": "mintTokenizedPosition(tokenId, positionSize, slippageTickLimitLow, slippageTickLimitHigh)",
            "declaration_string": "/// @notice Create a new position `tokenId` containing up to 4 legs.\n/// @dev Revert if the position is not unique.\n/// @param tokenId The tokenId of the minted position, which encodes information for up to 4 legs\n/// @param positionSize The number of contracts minted, expressed in terms of the asset\n/// @param slippageTickLimitLow The lower price slippage limit when minting an ITM position (set to larger than slippageTickLimitHigh for swapping when minting)\n/// @param slippageTickLimitHigh The higher slippage limit when minting an ITM position (set to lower than slippageTickLimitLow for swapping when minting)\n/// @return totalCollected A LeftRight encoded word containing the total amount of token0 and token1 collected as fees\n/// @return totalSwapped A LeftRight encoded word containing the total amount of token0 and token1 swapped if minting ITM\n/// @return newTick the current tick in the pool after all the mints and swaps\nfunction mintTokenizedPosition(uint256 tokenId, uint128 positionSize, int24 slippageTickLimitLow, int24 slippageTickLimitHigh) external ReentrancyLock(tokenId.univ3pool()) returns (int256 totalCollected, int256 totalSwapped, int24 newTick)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.ReentrancyLock"
            ],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.afterTokenTransfer(address,address,uint256[],uint256[])",
            "signature": "afterTokenTransfer(address,address,uint256[],uint256[])",
            "name": "afterTokenTransfer",
            "name_with_params": "afterTokenTransfer(from, to, ids, amounts)",
            "declaration_string": "/// @notice called after batch transfers (NOT mints or burns)\n/// @param from The address of the sender\n/// @param to The address of the recipient\n/// @param ids The tokenIds being transferred\n/// @param amounts The amounts of each token being transferred\nfunction afterTokenTransfer(address from, address to, uint256[] memory ids, uint256[] memory amounts) internal override",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.afterTokenTransfer(address,address,uint256[],uint256[])"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.afterTokenTransfer(address,address,uint256,uint256)",
            "signature": "afterTokenTransfer(address,address,uint256,uint256)",
            "name": "afterTokenTransfer",
            "name_with_params": "afterTokenTransfer(from, to, id, amount)",
            "declaration_string": "/// @notice called after single transfers (NOT mints or burns)\n/// @param from The address of the sender\n/// @param to The address of the recipient\n/// @param id The tokenId being transferred\n/// @param amount The amount of the token being transferred\nfunction afterTokenTransfer(address from, address to, uint256 id, uint256 amount) internal override",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.afterTokenTransfer(address,address,uint256,uint256)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)",
            "signature": "registerTokenTransfer(address,address,uint256,uint256)",
            "name": "registerTokenTransfer",
            "name_with_params": "registerTokenTransfer(from, to, id, amount)",
            "declaration_string": "/// @notice update user position data following a token transfer\n/// @dev token transfers are only allowed if you transfer your entire balance of a given tokenId and the recipient has none\n/// @param from The address of the sender\n/// @param to The address of the recipient\n/// @param id The tokenId being transferred'\n/// @param amount The amount of the token being transferred\nfunction registerTokenTransfer(address from, address to, uint256 id, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)",
            "signature": "_validateAndForwardToAMM(uint256,uint128,int24,int24,bool)",
            "name": "_validateAndForwardToAMM",
            "name_with_params": "_validateAndForwardToAMM(tokenId, positionSize, tickLimitLow, tickLimitHigh, isBurn)",
            "declaration_string": "/// @notice Helper that checks the proposed option position and size and forwards the minting and potential swapping tasks.\n/// @notice This helper function checks:\n/// @notice  - that the `tokenId` is valid\n/// @notice  - confirms that the Uniswap pool exists\n/// @notice  - retrieves Uniswap pool info\n/// @notice and then forwards the minting/burning/swapping to another internal helper functions which perform the AMM pool actions.\n///   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n///   \u2502mintTokenizedPosition()\u251c\u2500\u2500\u2500\u2510\n///   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n///                               \u2502\n///   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n///   \u2502burnTokenizedPosition()\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u25ba _validateAndForwardToAMM(...) \u251c\u2500 (...) --> (mint/burn in AMM)\n///   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n///                               \u2502\n///   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n///   \u2502rollTokenizedPosition()\u251c\u2500\u2500\u2500\u2518\n///   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n/// @param tokenId the option position\n/// @param positionSize the size of the position to create\n/// @param tickLimitLow lower limits on potential slippage\n/// @param tickLimitHigh upper limits on potential slippage\n/// @param isBurn is equal to false for mints and true for burns\n/// @return totalCollectedFromAMM the total amount of funds collected from Uniswap\n/// @return totalMoved the total amount of funds swapped in Uniswap as part of building potential ITM positions\n/// @return newTick the tick *after* the mint+swap\nfunction _validateAndForwardToAMM(uint256 tokenId, uint128 positionSize, int24 tickLimitLow, int24 tickLimitHigh, bool isBurn) internal returns (int256 totalCollectedFromAMM, int256 totalMoved, int24 newTick)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)",
            "signature": "swapInAMM(address,int256)",
            "name": "swapInAMM",
            "name_with_params": "swapInAMM(univ3pool, itmAmounts)",
            "declaration_string": "/// @notice When a position is minted or burnt in-the-money (ITM) we are *not* 100% token0 or 100% token1: we have a mix of both tokens.\n/// @notice The swapping for ITM options is needed because only one of the tokens are \"borrowed\" by a user to create the position.\n/// @notice This is an ITM situation below (price within the range of the chunk):\n///        AMM       strike\n///     liquidity   price tick\n///        \u25b2           \u2502\n///        \u2502       \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510\n///        \u2502       \u2502       \u2502liquidity chunk\n///        \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2510\n///        \u2502 \u2502       \u2502           \u2502\n///        \u2502 \u2502       :           \u2502\n///        \u2502 \u2502       :           \u2502\n///        \u2502 \u2502       :           \u2502\n///        \u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u25ba price\n///                  \u2502\n///             current price\n///             in-the-money: mix of tokens 0 and 1 within the chunk\n///   If we take token0 as an example, we deploy it to the AMM pool and *then* swap to get the right mix of token0 and token1\n///   to be correctly in the money at that strike.\n///   It that position is burnt, then we remove a mix of the two tokens and swap one of them so that the user receives only one.\n/// @param univ3pool the uniswap pool in which to swap.\n/// @param itmAmounts how much to swap - how much is ITM\n/// @return totalSwapped the amount swapped in the AMM\nfunction swapInAMM(IUniswapV3Pool univ3pool, int256 itmAmounts) internal returns (int256 totalSwapped)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)",
            "signature": "_createPositionInAMM(address,uint256,uint128,bool)",
            "name": "_createPositionInAMM",
            "name_with_params": "_createPositionInAMM(univ3pool, tokenId, positionSize, isBurn)",
            "declaration_string": "/// @notice Create the position in the AMM given in the tokenId. This could imply modifying (rolling) an existing position.\n/// @dev Loops over each leg in the tokenId and calls _createLegInAMM for each, which does the mint/burn in the AMM.\n/// @param univ3pool the Uniswap pool.\n/// @param tokenId the option position\n/// @param positionSize the size of the option position\n/// @param isBurn is true if the position is burnt\n/// @return totalMoved the total amount of liquidity moved from the msg.sender to Uniswap\n/// @return totalCollected the total amount of liquidity collected from Uniswap to msg.sender\n/// @return itmAmounts the amount of tokens swapped due to legs being in-the-money\nfunction _createPositionInAMM(IUniswapV3Pool univ3pool, uint256 tokenId, uint128 positionSize, bool isBurn) internal returns (int256 totalMoved, int256 totalCollected, int256 itmAmounts)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)",
            "signature": "_createLegInAMM(address,uint256,uint256,uint256,bool)",
            "name": "_createLegInAMM",
            "name_with_params": "_createLegInAMM(_univ3pool, _tokenId, _leg, _liquidityChunk, _isBurn)",
            "declaration_string": "/// @notice Create the position in the AMM for a specific leg in the tokenId. This could imply modifying (rolling) an existing position.\n/// @dev For the leg specified by the _leg input:\n/// @dev  - mints any new liquidity in the AMM needed (via _mintLiquidity)\n/// @dev  - burns any new liquidity in the AMM needed (via _burnLiquidity)\n/// @dev  - tracks all amounts minted and burned\n/// @dev to burn a position, the opposing position is \"created\" through this function\n/// but we need to pass in a flag to indicate that so the shortLiquidity is updated.\n/// @param _univ3pool the Uniswap pool.\n/// @param _tokenId the option position\n/// @param _leg the leg index that needs to be modified\n/// @param _liquidityChunk has lower tick, upper tick, and liquidity amount to mint\n/// @param _isBurn is true if the position is burnt\n/// @return _moved the total amount of liquidity moved from the msg.sender to Uniswap\n/// @return _itmAmounts the amount of tokens swapped due to legs being in-the-money\n/// @return _totalCollected the total amount of liquidity collected from Uniswap to msg.sender\nfunction _createLegInAMM(IUniswapV3Pool _univ3pool, uint256 _tokenId, uint256 _leg, uint256 _liquidityChunk, bool _isBurn) internal returns (int256 _moved, int256 _itmAmounts, int256 _totalCollected)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._updateStoredPremia(bytes32,uint256,int256)",
            "signature": "_updateStoredPremia(bytes32,uint256,int256)",
            "name": "_updateStoredPremia",
            "name_with_params": "_updateStoredPremia(positionKey, currentLiquidity, collectedAmounts)",
            "declaration_string": "/// @notice caches/stores the accumulated premia values for the specified postion.\n/// @param positionKey the hashed data which represents the underlying position in the Uniswap pool\n/// @param currentLiquidity the total amount of liquidity in the AMM for the specific position\n/// @param collectedAmounts amount of tokens (token0 and token1) collected from Uniswap\nfunction _updateStoredPremia(bytes32 positionKey, uint256 currentLiquidity, int256 collectedAmounts) private",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)",
            "signature": "_getFeesBase(address,uint128,uint256)",
            "name": "_getFeesBase",
            "name_with_params": "_getFeesBase(univ3pool, liquidity, liquidityChunk)",
            "declaration_string": "/// @notice Compute the feesGrowth * liquidity / 2**128 by reading feeGrowthInside0LastX128 and feeGrowthInside1LastX128 from univ3pool.positions.\n/// @param univ3pool the Uniswap pool.\n/// @param liquidity the total amount of liquidity in the AMM for the specific position\n/// @param liquidityChunk has lower tick, upper tick, and liquidity amount to mint\nfunction _getFeesBase(IUniswapV3Pool univ3pool, uint128 liquidity, uint256 liquidityChunk) private view returns (int256 feesBase)",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)",
            "signature": "_mintLiquidity(uint256,address)",
            "name": "_mintLiquidity",
            "name_with_params": "_mintLiquidity(liquidityChunk, univ3pool)",
            "declaration_string": "/// @notice Mint a chunk of liquidity (`liquidityChunk`) in the Uniswap v3 pool; return the amount moved.\n/// @dev note that \"moved\" means: mint in Uniswap and move tokens from msg.sender.\n/// @param liquidityChunk the chunk of liquidity to mint given by tick upper, tick lower, and its size\n/// @param univ3pool the Uniswap v3 pool to mint liquidity in/to\n/// @return movedAmounts how many tokens were moved from msg.sender to Uniswap\nfunction _mintLiquidity(uint256 liquidityChunk, IUniswapV3Pool univ3pool) internal returns (int256 movedAmounts)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)",
            "signature": "_burnLiquidity(uint256,address)",
            "name": "_burnLiquidity",
            "name_with_params": "_burnLiquidity(liquidityChunk, univ3pool)",
            "declaration_string": "/// @notice Burn a chunk of liquidity (`liquidityChunk`) in the Uniswap v3 pool and send to msg.sender; return the amount moved.\n/// @dev note that \"moved\" means: burn position in Uniswap and send tokens to msg.sender.\n/// @param liquidityChunk the chunk of liquidity to burn given by tick upper, tick lower, and its size\n/// @param univ3pool the Uniswap v3 pool to burn liquidity in/from\n/// @return movedAmounts how many tokens were moved from Uniswap to msg.sender\nfunction _burnLiquidity(uint256 liquidityChunk, IUniswapV3Pool univ3pool) internal returns (int256 movedAmounts)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)",
            "signature": "_collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)",
            "name": "_collectAndWritePositionData",
            "name_with_params": "_collectAndWritePositionData(liquidityChunk, univ3pool, currentLiquidity, positionKey, movedInLeg, isLong)",
            "declaration_string": "/// @notice Helper to collect amounts between msg.sender and Uniswap and also to update the Uniswap fees collected to date from the AMM.\n/// @param liquidityChunk the liquidity chunk representing the option position/leg\n/// @param univ3pool the Uniswap pool where the position is deployed\n/// @param currentLiquidity the existing liquidity msg.sender owns in the AMM for this chunk before the SFPM was called\n/// @param positionKey the unique key to identify the liquidity chunk/tokenType pairing in this uniswap pool\n/// @param movedInLeg how much liquidity has been moved between msg.sender and Uniswap before this function call\n/// @param isLong whether the leg in question is long (=1) or short (=0)\n/// @return collectedOut the incoming totalCollected with potentially whatever is collected in this function added to it\nfunction _collectAndWritePositionData(uint256 liquidityChunk, IUniswapV3Pool univ3pool, uint256 currentLiquidity, bytes32 positionKey, int256 movedInLeg, uint256 isLong) internal returns (int256 collectedOut)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)",
            "signature": "_getPremiaDeltas(uint256,int256)",
            "name": "_getPremiaDeltas",
            "name_with_params": "_getPremiaDeltas(currentLiquidity, collectedAmounts)",
            "declaration_string": "/// @notice Function that updates the Owed and Gross account liquidities.\n/// @param currentLiquidity netLiquidity (right) and removedLiquidity (left) at the start of the transaction\n/// @param collectedAmounts total amount of tokens (token0 and token1) collected from Uniswap.\n/// @return deltaPremiumOwed The extra premium to be added to the owed accumulator for token0 (right) and token1 (right)\n/// @return deltaPremiumGross The extra premium to be added to the gross accumulator for token0 (right) and token1 (right)\nfunction _getPremiaDeltas(uint256 currentLiquidity, int256 collectedAmounts) private pure returns (uint256 deltaPremiumOwed, uint256 deltaPremiumGross)",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._exerciseRolls(uint256,uint256,uint128,int24,int24)",
            "signature": "_exerciseRolls(uint256,uint256,uint128,int24,int24)",
            "name": "_exerciseRolls",
            "name_with_params": "_exerciseRolls(burnTokenId, mintTokenId, positionSize, tickLimitLow, tickLimitHigh)",
            "declaration_string": "/// @notice Helper to carry out the option position rolls. A roll moves a position's liquidity chunks.\n/// @notice for example: move leg index 2 from strike 500 to strike 1000 but maintain its width\n/// that requires burning the old chunk at strike 500 and then mint at strike 1000.\n/// @param burnTokenId the option position to burn during the roll\n/// @param mintTokenId the option position to mint during the roll\n/// @param positionSize the amount of the position to roll\n/// @param tickLimitLow lower tick for slippage check\n/// @param tickLimitHigh upper tick for slippage check\n/// @return totalCollectedBurn total amount of fees collected from the burnt chunk\n/// @return totalSwappedBurn total amount of tokens swapped during the burn\n/// @return totalCollectedMint total amount of fees collected from the mint chunk\n/// @return totalSwappedMint total amount of tokens swapped during the mint\nfunction _exerciseRolls(uint256 burnTokenId, uint256 mintTokenId, uint128 positionSize, int24 tickLimitLow, int24 tickLimitHigh) internal returns (int256 totalCollectedBurn, int256 totalSwappedBurn, int256 totalCollectedMint, int256 totalSwappedMint, int24 newTick)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountLiquidity(address,address,uint256,int24,int24)",
            "signature": "getAccountLiquidity(address,address,uint256,int24,int24)",
            "name": "getAccountLiquidity",
            "name_with_params": "getAccountLiquidity(univ3pool, owner, tokenType, tickLower, tickUpper)",
            "declaration_string": "/// @notice Return the liquidity associated with a given position.\n/// @dev Computes accountLiquidity[keccak256(abi.encodePacked(univ3pool, owner, tokenType, tickLower, tickUpper))]\n/// @param univ3pool The address of the Uniswap v3 Pool\n/// @param owner The address of the account that is queried\n/// @param tokenType The tokenType of the position (the token it started as)\n/// @param tickLower The lower end of the tick range for the position (int24)\n/// @param tickUpper The upper end of the tick range for the position (int24)\n/// @return accountLiquidities The amount of liquidity that has been shorted/added to the Uniswap contract (removedLiquidity:netLiquidity -> rightSlot:leftSlot)\nfunction getAccountLiquidity(address univ3pool, address owner, uint256 tokenType, int24 tickLower, int24 tickUpper) external view returns (uint256 accountLiquidities)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)",
            "signature": "getAccountPremium(address,address,uint256,int24,int24,int24,uint256)",
            "name": "getAccountPremium",
            "name_with_params": "getAccountPremium(univ3pool, owner, tokenType, tickLower, tickUpper, atTick, isLong)",
            "declaration_string": "/// @notice Return the premium associated with a given position, where Premium is an accumulator of feeGrowth for the touched position.\n/// @dev Computes s_accountPremium{isLong ? Owed : Gross}[keccak256(abi.encodePacked(univ3pool, owner, tokenType, tickLower, tickUpper))]\n/// @dev if an atTick parameter is provided that is different from type(int24).max, then it will update the premium up to the current\n/// @dev block at the provided atTick value. We do this because this may be called immediately after the Uni v3 pool has been touched\n/// @dev so no need to read the feeGrowths from the Uni v3 pool.\n/// @param univ3pool The address of the Uniswap v3 Pool\n/// @param owner The address of the account that is queried\n/// @param tokenType The tokenType of the position (the token it started as)\n/// @param tickLower The lower end of the tick range for the position (int24)\n/// @param tickUpper The upper end of the tick range for the position (int24)\n/// @param atTick The current tick. Set atTick < type(int24).max = 8388608 to get latest premium up to the current block\n/// @param isLong whether the position is long (=1) or short (=0)\n/// @return premiumToken0 The amount of premium for token0 = sum (feeGrowthLast0X128) over every block where the position has been touched\n/// @return premiumToken1 The amount of premium for token1 = sum (feeGrowthLast0X128) over every block where the position has been touched\nfunction getAccountPremium(address univ3pool, address owner, uint256 tokenType, int24 tickLower, int24 tickUpper, int24 atTick, uint256 isLong) external view returns (uint128 premiumToken0, uint128 premiumToken1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountFeesBase(address,address,uint256,int24,int24)",
            "signature": "getAccountFeesBase(address,address,uint256,int24,int24)",
            "name": "getAccountFeesBase",
            "name_with_params": "getAccountFeesBase(univ3pool, owner, tokenType, tickLower, tickUpper)",
            "declaration_string": "/// @notice Return the feesBase associated with a given position.\n/// @dev Computes accountFeesBase[keccak256(abi.encodePacked(univ3pool, owner, tickLower, tickUpper))]\n/// @dev feesBase0 is computed as Math.mulDiv128(feeGrowthInside0X128, legLiquidity)\n/// @param univ3pool The address of the Uniswap v3 Pool\n/// @param owner The address of the account that is queried\n/// @param tokenType The tokenType of the position (the token it started as)\n/// @param tickLower The lower end of the tick range for the position (int24)\n/// @param tickUpper The upper end of the tick range for the position (int24)\n/// @return feesBase0 The feesBase of the position for token0\n/// @return feesBase1 The feesBase of the position for token1\nfunction getAccountFeesBase(address univ3pool, address owner, uint256 tokenType, int24 tickLower, int24 tickUpper) external view returns (int128 feesBase0, int128 feesBase1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
            "signature": "getPoolId(address)",
            "name": "getPoolId",
            "name_with_params": "getPoolId(univ3pool)",
            "declaration_string": "/// @notice Returns the poolId for a given Uniswap v3 pool.\n/// @dev poolId is typically the first 8 bytes of the uni v3 pool address\n/// @dev But poolId can be different for first 8 bytes if there is a collision between Uni v3 pool addresses\n/// @param univ3pool The address of the Uniswap v3 Pool\n/// @return poolId The unique poolId for that Uni v3 pool\nfunction getPoolId(address univ3pool) external view returns (uint64 poolId)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib.validateCallback(address,address,(address,address,uint24))",
            "signature": "validateCallback(address,address,(address,address,uint24))",
            "name": "validateCallback",
            "name_with_params": "validateCallback(sender, factory, features)",
            "declaration_string": "/// @notice Verifies that a callback came from the canonical Uniswap pool with a claimed set of features.\n/// @param sender The address initiating the callback and claiming to be a Uniswap pool\n/// @param factory The address of the canonical Uniswap V3 factory\n/// @param features The features `sender` claims to contain\nfunction validateCallback(address sender, address factory, PoolFeatures memory features) internal pure",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])",
            "signature": "getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])",
            "name": "getPortfolioValue",
            "name_with_params": "getPortfolioValue(univ3pool, atTick, userBalance, positionIdList)",
            "declaration_string": "/// @notice Calculate NAV of user's option portfolio at a given tick.\n/// @param univ3pool the pair the positions are on\n/// @param atTick the tick to calculate the value at\n/// @param userBalance the position balances of the user\n/// @param positionIdList a list of all positions the user holds on that pool\n/// @return value0 the amount of token0 owned by portfolio\n/// @return value1 the amount of token1 owned by portfolio\nfunction getPortfolioValue(IUniswapV3Pool univ3pool, int24 atTick, mapping(uint256 tokenId => uint256 balance) storage userBalance, uint256[] calldata positionIdList) external view returns (int256 value0, int256 value1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFees(address,int24,uint256,uint256,uint128)",
            "signature": "calculateAMMSwapFees(address,int24,uint256,uint256,uint128)",
            "name": "calculateAMMSwapFees",
            "name_with_params": "calculateAMMSwapFees(univ3pool, currentTick, tokenId, index, positionSize)",
            "declaration_string": "/// @notice Calculate the AMM Swap/Trading Fees for the incoming position (and leg `index` within that position)\n/// This is what defines the option price/premium\n/// @dev calculate the base (aka AMM swap trading) fees by looking at feeGrowth in the Uniswap v3 pool.\n/// @param univ3pool the AMM/Uniswap pool where premia is collected in\n/// @param currentTick the current price tick in the AMM\n/// @param tokenId the option position\n/// @param index the leg index to compute position fees for - this identifies a liquidity chunk in the AMM\n/// @param positionSize the size of the option position\n/// @return liquidityChunk the liquidity chunk in question representing the leg of the position\n/// @return feesPerToken the fees collected (LeftRight-packed) per token0 (right slot) and token1 (left slot)\nfunction calculateAMMSwapFees(IUniswapV3Pool univ3pool, int24 currentTick, uint256 tokenId, uint256 index, uint128 positionSize) public view returns (uint256 liquidityChunk, int256 feesPerToken)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)",
            "signature": "calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)",
            "name": "calculateAMMSwapFeesLiquidityChunk",
            "name_with_params": "calculateAMMSwapFeesLiquidityChunk(univ3pool, currentTick, startingLiquidity, liquidityChunk)",
            "declaration_string": "/// @notice Calculate the AMM Swap/trading fees for a `liquidityChunk` of each token.\n/// @dev read from the uniswap pool and compute the accumulated fees from swapping activity.\n/// @param univ3pool the AMM/Uniswap pool where fees are collected from\n/// @param currentTick the current price tick\n/// @param startingLiquidity the liquidity of the option position leg deployed in the AMM\n/// @param liquidityChunk the chunk of liquidity of the option position leg deployed in the AMM\n/// @return feesEachToken the fees collected from the AMM for each token (LeftRight-packed) with token0 in the right slot and token1 in the left slot\nfunction calculateAMMSwapFeesLiquidityChunk(IUniswapV3Pool univ3pool, int24 currentTick, uint128 startingLiquidity, uint256 liquidityChunk) public view returns (int256 feesEachToken)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc._getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)",
            "signature": "_getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)",
            "name": "_getAMMSwapFeesPerLiquidityCollected",
            "name_with_params": "_getAMMSwapFeesPerLiquidityCollected(univ3pool, currentTick, tickLower, tickUpper)",
            "declaration_string": "/// @notice Calculate the fee growth that has occurred (per unit of liquidity) in the AMM/Uniswap for an\n/// option position's `liquidity chunk` within its tick range given.\n/// @dev extract the feeGrowth from the uniswap v3 pool.\n/// @param univ3pool the AMM pool where the leg is deployed\n/// @param currentTick the current price tick in the AMM\n/// @param tickLower the lower tick of the option position leg (a liquidity chunk)\n/// @param tickUpper the upper tick of the option position leg (a liquidity chunk)\n/// @return feeGrowthInside0X128 the fee growth in the AMM of token0\n/// @return feeGrowthInside1X128 the fee growth in the AMM of token1\nfunction _getAMMSwapFeesPerLiquidityCollected(IUniswapV3Pool univ3pool, int24 currentTick, int24 tickLower, int24 tickUpper) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.doApprovals(address,address,address,address,address)",
            "signature": "doApprovals(address,address,address,address,address)",
            "name": "doApprovals",
            "name_with_params": "doApprovals(sfpm, ct0, ct1, token0, token1)",
            "declaration_string": "/// @notice Function that performs approvals on behalf of the PanopticPool for CollateralTracker and SemiFungiblePositionManager.\n/// @param sfpm the SemiFungiblePositionManager being approved for both token0 and token1\n/// @param ct0 the CollateralTracker (token0) being approved for token0\n/// @param ct1 the CollateralTracker (token1) being approved for token1\n/// @param token0 the token0 (in Uniswap) being approved for\n/// @param token1 the token1 (in Uniswap) being approved for\nfunction doApprovals(SemiFungiblePositionManager sfpm, CollateralTracker ct0, CollateralTracker ct1, address token0, address token1) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeName(address,address,bool,uint24,string)",
            "signature": "computeName(address,address,bool,uint24,string)",
            "name": "computeName",
            "name_with_params": "computeName(token0, token1, isToken0, fee, prefix)",
            "declaration_string": "/// @notice Computes the name of a CollateralTracker based on the token composition and fee of the underlying Uniswap Pool.\n/// @dev Some tokens do not have proper symbols so error handling is required - this logic takes up significant bytecode size, which is why it is in a library.\n/// @param token0 the token0 in the Uniswap Pool\n/// @param token1 the token1 in the Uniswap Pool\n/// @param isToken0 whether the collateral token computing the name is for token0 or token1\n/// @param fee the fee of the Uniswap pool in basis points\n/// @param prefix a constant string appended to the start of the token name\n/// @return the complete name of the collateral token calling this function\nfunction computeName(address token0, address token1, bool isToken0, uint24 fee, string memory prefix) external view returns (string memory)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeSymbol(address,string)",
            "signature": "computeSymbol(address,string)",
            "name": "computeSymbol",
            "name_with_params": "computeSymbol(token, prefix)",
            "declaration_string": "/// @notice returns symbol as prefixed symbol of underlying token.\n/// @param token the address of the underlying token used to compute the symbol\n/// @param prefix a constant string appended to the symbol of the underlying token to create the final symbol\n/// @return _symbol the symbol of the token\nfunction computeSymbol(address token, string memory prefix) external view returns (string memory _symbol)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeDecimals(address)",
            "signature": "computeDecimals(address)",
            "name": "computeDecimals",
            "name_with_params": "computeDecimals(token)",
            "declaration_string": "/// @notice returns decimals of underlying token (0 if not present).\n/// @param token the address of the underlying token used to compute the decimals\n/// @return decimals the decimals of the token\nfunction computeDecimals(address token) external view returns (uint8)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.min24(int24,int24)",
            "signature": "min24(int24,int24)",
            "name": "min24",
            "name_with_params": "min24(a, b)",
            "declaration_string": "/// @notice Compute the min of the incoming int24s `a` and `b`.\n/// @param a the first number\n/// @param b the second number\n/// @return the min of `a` and `b`: min(a, b), e.g.: min(4, 1) = 1\nfunction min24(int24 a, int24 b) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.max24(int24,int24)",
            "signature": "max24(int24,int24)",
            "name": "max24",
            "name_with_params": "max24(a, b)",
            "declaration_string": "/// @notice Compute the max of the incoming int24s `a` and `b`.\n/// @param a the first number\n/// @param b the second number\n/// @return the max of `a` and `b`: max(a, b), e.g.: max(4, 1) = 4\nfunction max24(int24 a, int24 b) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.abs(int256)",
            "signature": "abs(int256)",
            "name": "abs",
            "name_with_params": "abs(x)",
            "declaration_string": "/// @notice Compute the absolute value of an integer (int256).\n/// @param x the incoming *signed* integer to take the absolute value of\n/// @dev Does not support `type(int256).min` and will revert (type(int256).max is one less).\n/// @return the absolute value of `x`, e.g. abs(-4) = 4\nfunction abs(int256 x) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.absUint(int256)",
            "signature": "absUint(int256)",
            "name": "absUint",
            "name_with_params": "absUint(x)",
            "declaration_string": "/// @notice Compute the absolute value of an integer (int256).\n/// @param x the incoming *signed* integer to take the absolute value of\n/// @dev Supports `type(int256).min` because the corresponding value can fit in a uint (unlike `type(int256).max`).\n/// @return the absolute value of `x`, e.g. abs(-4) = 4\nfunction absUint(int256 x) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mostSignificantNibble(uint160)",
            "signature": "mostSignificantNibble(uint160)",
            "name": "mostSignificantNibble",
            "name_with_params": "mostSignificantNibble(x)",
            "declaration_string": "/// @notice Returns the index of the most significant nibble of the 160-bit number,\n/// where the least significant nibble is at index 0 and the most significant nibble is at index 40.\n/// @param x the value for which to compute the most significant nibble\n/// @return r the index of the most significant nibble (default: 0)\nfunction mostSignificantNibble(uint160 x) internal pure returns (uint256 r)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.toUint128(uint256)",
            "signature": "toUint128(uint256)",
            "name": "toUint128",
            "name_with_params": "toUint128(toDowncast)",
            "declaration_string": "/// @notice Downcast uint256 to uint128. Revert on overflow or underflow.\n/// @param toDowncast the uint256 to be downcasted\n/// @return downcastedInt the downcasted uint (uint128 now)\nfunction toUint128(uint256 toDowncast) internal pure returns (uint128 downcastedInt)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.toInt128(uint128)",
            "signature": "toInt128(uint128)",
            "name": "toInt128",
            "name_with_params": "toInt128(toCast)",
            "declaration_string": "/// @notice Recast uint128 to int128.\n/// @param toCast the uint256 to be downcasted.\n/// @return downcastedInt the downcasted int (int128 now)\nfunction toInt128(uint128 toCast) internal pure returns (int128 downcastedInt)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
            "signature": "mulDiv(uint256,uint256,uint256)",
            "name": "mulDiv",
            "name_with_params": "mulDiv(a, b, denominator)",
            "declaration_string": "/// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0.\n/// @param a the multiplicand\n/// @param b the multiplier\n/// @param denominator the divisor\n/// @return result The 256-bit result\n/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\nfunction mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv64(uint256,uint256)",
            "signature": "mulDiv64(uint256,uint256)",
            "name": "mulDiv64",
            "name_with_params": "mulDiv64(a, b)",
            "declaration_string": "/// @notice Calculates floor(a\u00d7b\u00f72^64) with full precision. Throws if result overflows a uint256 or denominator == 0.\n/// @param a The multiplicand\n/// @param b The multiplier\n/// @return result The 256-bit result\nfunction mulDiv64(uint256 a, uint256 b) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
            "signature": "mulDiv96(uint256,uint256)",
            "name": "mulDiv96",
            "name_with_params": "mulDiv96(a, b)",
            "declaration_string": "/// @notice Calculates floor(a\u00d7b\u00f72^96) with full precision. Throws if result overflows a uint256 or denominator == 0.\n/// @param a The multiplicand\n/// @param b The multiplier\n/// @return result The 256-bit result\nfunction mulDiv96(uint256 a, uint256 b) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv128(uint256,uint256)",
            "signature": "mulDiv128(uint256,uint256)",
            "name": "mulDiv128",
            "name_with_params": "mulDiv128(a, b)",
            "declaration_string": "/// @notice Calculates floor(a\u00d7b\u00f72^128) with full precision. Throws if result overflows a uint256 or denominator == 0.\n/// @param a The multiplicand\n/// @param b The multiplier\n/// @return result The 256-bit result\nfunction mulDiv128(uint256 a, uint256 b) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv192(uint256,uint256)",
            "signature": "mulDiv192(uint256,uint256)",
            "name": "mulDiv192",
            "name_with_params": "mulDiv192(a, b)",
            "declaration_string": "/// @notice Calculates floor(a\u00d7b\u00f72^192) with full precision. Throws if result overflows a uint256 or denominator == 0.\n/// @param a The multiplicand\n/// @param b The multiplier\n/// @return result The 256-bit result\nfunction mulDiv192(uint256 a, uint256 b) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDivDown(uint256,uint256,uint256)",
            "signature": "mulDivDown(uint256,uint256,uint256)",
            "name": "mulDivDown",
            "name_with_params": "mulDivDown(x, y, denominator)",
            "declaration_string": "/// @notice From the Solmate/FixedPointMathLib.sol library, calculates (a\u00d7b\u00f7denominator) rounded down.\n/// @param x The multiplicand\n/// @param y The multiplier\n/// @param denominator The divisor\n/// @return z The 256-bit result\nfunction mulDivDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDivUp(uint256,uint256,uint256)",
            "signature": "mulDivUp(uint256,uint256,uint256)",
            "name": "mulDivUp",
            "name_with_params": "mulDivUp(x, y, denominator)",
            "declaration_string": "/// @notice From the Solmate/FixedPointMathLib.sol library, calculates (a\u00d7b\u00f7denominator) rounded up.\n/// @param x The multiplicand\n/// @param y The multiplier\n/// @param denominator The divisor\n/// @return z The 256-bit result\nfunction mulDivUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.quickSort(int24[],int256,int256)",
            "signature": "quickSort(int24[],int256,int256)",
            "name": "quickSort",
            "name_with_params": "quickSort(arr, left, right)",
            "declaration_string": "/// @notice QuickSort is a sorting algorithm that employs the Divide and Conquer strategy. It selects a pivot element and arranges the given array around\n/// this pivot by correctly positioning it within the sorted array.\n/// @param arr the elements that must be sorted\n/// @param left the starting index\n/// @param right the ending index\nfunction quickSort(int24[] memory arr, int256 left, int256 right) internal pure",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.sort(int24[])",
            "signature": "sort(int24[])",
            "name": "sort",
            "name_with_params": "sort(data)",
            "declaration_string": "/// @notice calls `quickSort` with default starting index of 0 and ending index of the last element in the array.\n/// @param data the elements that must be sorted\nfunction sort(int24[] memory data) internal pure returns (int24[] memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getPoolId(address)",
            "signature": "getPoolId(address)",
            "name": "getPoolId",
            "name_with_params": "getPoolId(univ3pool)",
            "declaration_string": "/// @notice Given an address to a Uniswap v3 pool, return its 64-bit ID as used in the `TokenId` of Panoptic.\n/// @dev Example:\n///      the 64 bits are the 64 *last* (most significant) bits - and thus corresponds to the *first* 16 hex characters (reading left to right)\n///      of the Uniswap v3 pool address, e.g.:\n///        univ3pool = 0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8\n///      the returned id is then:\n///        0x8ad599c3A0ff1De0\n///      which as a uint64 is:\n///        10004071212772171232.\n/// @param univ3pool the Uniswap v3 pool to get the ID of\n/// @return a uint64 representing a fingerprint of the uniswap v3 pool address\nfunction getPoolId(address univ3pool) internal pure returns (uint64)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getFinalPoolId(uint64,address,address,uint24)",
            "signature": "getFinalPoolId(uint64,address,address,uint24)",
            "name": "getFinalPoolId",
            "name_with_params": "getFinalPoolId(basePoolId, token0, token1, fee)",
            "declaration_string": "/// @notice Returns the resultant pool ID for the given 64-bit base pool ID and parameters.\n/// @param basePoolId the 64-bit base pool ID\n/// @param token0 the address of the first token in the pool\n/// @param token1 the address of the second token in the pool\n/// @param fee the fee of the pool in hundredths of a bi\n/// @return finalPoolId the final 64-bit pool id as encoded in the `TokenId` type - composed of the last 64 bits of the address and a hash of the parameters\nfunction getFinalPoolId(uint64 basePoolId, address token0, address token1, uint24 fee) internal pure returns (uint64)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.numberOfLeadingHexZeros(address)",
            "signature": "numberOfLeadingHexZeros(address)",
            "name": "numberOfLeadingHexZeros",
            "name_with_params": "numberOfLeadingHexZeros(addr)",
            "declaration_string": "/// @notice Get the number of leading hex characters in an address.\n///     0x0000bababaab...     0xababababab...\n///          \u25b2                 \u25b2\n///          \u2502                 \u2502\n///     4 leading hex      0 leading hex\n///    character zeros    character zeros\n/// @param addr the address to get the number of leading zero hex characters for\n/// @return the number of leading zero hex characters in the address\nfunction numberOfLeadingHexZeros(address addr) external pure returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.updatePositionsHash(uint256,uint256,bool)",
            "signature": "updatePositionsHash(uint256,uint256,bool)",
            "name": "updatePositionsHash",
            "name_with_params": "updatePositionsHash(existingHash, tokenId, addFlag)",
            "declaration_string": "/// @notice Update an existing accounts \"positions hash\" with a new single position `tokenId`.\n/// @notice The positions hash contains a single fingerprint of all positions created by an account/user as well as a tally of the positions.\n/// @dev the combined hash is the XOR of all individual position hashes.\n/// @param existingHash the existing position hash containing all historical N positions created and the count of the positions\n/// @param tokenId the new position to add to the existing hash: existingHash = uint248(existingHash) ^ hashOf(tokenId)\n/// @param addFlag whether to mint (add) the tokenId to the count of positions or burn (subtract) it from the count (existingHash >> 248) +/- 1\n/// @return newHash the new positionHash with the updated hash\nfunction updatePositionsHash(uint256 existingHash, uint256 tokenId, bool addFlag) internal pure returns (uint256 newHash)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.twapFilter(address,uint32)",
            "signature": "twapFilter(address,uint32)",
            "name": "twapFilter",
            "name_with_params": "twapFilter(univ3pool, twapWindow)",
            "declaration_string": "/// @notice Computes the twap of a Uniswap V3 pool using data from its oracle.\n/// @dev Note that our definition of TWAP differs from a typical mean of prices over a time window\n/// @dev We instead observe the average price over a series of time intervals, and define the TWAP as the median of those averages\n/// @param univ3pool the Uniswap pool upon which to compute the TWAP\n/// @param twapWindow the time window to compute the twap over\n/// @return twapTick the final calculated TWAP tick\nfunction twapFilter(IUniswapV3Pool univ3pool, uint32 twapWindow) external view returns (int24 twapTick)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
            "signature": "getLiquidityChunk(uint256,uint256,uint128,int24)",
            "name": "getLiquidityChunk",
            "name_with_params": "getLiquidityChunk(tokenId, legIndex, positionSize, tickSpacing)",
            "declaration_string": "/// Liquidity chunk  (defined by tick upper, tick lower, and its size/amount: the liquidity)\n///   liquidity    \u2502\n///         \u25b2      \u2502\n///         \u2502     \u250c\u25bc\u2510\n///         \u2502  \u250c\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2510\n///         \u2502  \u2502       \u2502\n///         \u2502  \u2502       \u2502\n///         \u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u25ba price\n///         Uniswap v3 Pool\n/// @param tokenId the option position id\n/// @param legIndex the leg index of the option position, can be {0,1,2,3}\n/// @param positionSize the number of contracts held by this leg\n/// @param tickSpacing the tick spacing of the underlying univ3 pool\n/// @return liquidityChunk a uint256 bit-packed (see `LiquidityChunk.sol`) with `tickLower`, `tickUpper`, and `liquidity`\nfunction getLiquidityChunk(uint256 tokenId, uint256 legIndex, uint128 positionSize, int24 tickSpacing) internal pure returns (uint256 liquidityChunk)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)",
            "signature": "computeExercisedAmounts(uint256,uint256,uint128,int24)",
            "name": "computeExercisedAmounts",
            "name_with_params": "computeExercisedAmounts(tokenId, oldTokenId, positionSize, tickSpacing)",
            "declaration_string": "/// @notice Compute the amount of funds that are underlying this option position. This is useful when exercising a position.\n/// @param tokenId the option position id\n/// @param oldTokenId the position id being burnt if rolling from a position\n/// @param positionSize The number of contracts of this option\n/// @param tickSpacing the tick spacing of the underlying Uniswap v3 pool\n/// @return longAmounts Left-right packed word where the right conains the total contract size and the left total notional\n/// @return shortAmounts Left-right packed word where the right conains the total contract size and the left total notional\nfunction computeExercisedAmounts(uint256 tokenId, uint256 oldTokenId, uint128 positionSize, int24 tickSpacing) internal pure returns (int256 longAmounts, int256 shortAmounts)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)",
            "signature": "convertCollateralData(uint256,uint256,uint256,uint160)",
            "name": "convertCollateralData",
            "name_with_params": "convertCollateralData(tokenData0, tokenData1, tokenType, sqrtPriceX96)",
            "declaration_string": "/// @notice Adds required collateral and collateral balance from collateralTracker0 and collateralTracker1 and converts to single values in terms of `tokenType`.\n/// @param tokenData0 LeftRight type container holding the collateralBalance (right slot) and requiredCollateral (left slot) for a user in CollateralTracker0 (expressed in terms of token0)\n/// @param tokenData1 LeftRight type container holding the collateralBalance (right slot) and requiredCollateral (left slot) for a user in CollateralTracker0 (expressed in terms of token1)\n/// @param tokenType the type of token (token0 or token1) to express collateralBalance and requiredCollateral in\n/// @param sqrtPriceX96 the sqrt price at which to convert between token0/token1\n/// @return collateralBalance the total combined balance of token0 and token1 for a user in terms of tokenType\n/// @return requiredCollateral The combined collateral requirement for a user in terms of tokenType\nfunction convertCollateralData(uint256 tokenData0, uint256 tokenData1, uint256 tokenType, uint160 sqrtPriceX96) internal pure returns (uint256, uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,int24)",
            "signature": "convertCollateralData(uint256,uint256,uint256,int24)",
            "name": "convertCollateralData",
            "name_with_params": "convertCollateralData(tokenData0, tokenData1, tokenType, tick)",
            "declaration_string": "/// @notice Adds required collateral and collateral balance from collateralTracker0 and collateralTracker1 and converts to single values in terms of `tokenType`\n/// @param tokenData0 LeftRight type container holding the collateralBalance (right slot) and requiredCollateral (left slot) for a user in CollateralTracker0 (expressed in terms of token0)\n/// @param tokenData1 LeftRight type container holding the collateralBalance (right slot) and requiredCollateral (left slot) for a user in CollateralTracker0 (expressed in terms of token1)\n/// @param tokenType the type of token (token0 or token1) to express collateralBalance and requiredCollateral in\n/// @param tick the tick at which to convert between token0/token1\n/// @return collateralBalance the total combined balance of token0 and token1 for a user in terms of tokenType\n/// @return requiredCollateral The combined collateral requirement for a user in terms of tokenType\nfunction convertCollateralData(uint256 tokenData0, uint256 tokenData1, uint256 tokenType, int24 tick) internal pure returns (uint256, uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)",
            "signature": "convertNotional(uint128,int24,int24,uint256)",
            "name": "convertNotional",
            "name_with_params": "convertNotional(contractSize, tickLower, tickUpper, asset)",
            "declaration_string": "/// @notice Compute the notional amount given an incoming total number of `contracts` deployed between `tickLower` and `tickUpper`.\n/// @notice The notional value of an option is the value of the crypto assets that are controlled (rather than the cost of the transaction).\n/// @notice Example: Notional value in an option refers to the value that the option controls.\n/// @notice For example, token ABC is trading for $20 with a particular ABC call option costing $1.50.\n/// @notice One option controls 100 underlying tokens. A trader purchases the option for $1.50 x 100 = $150.\n/// @notice The notional value of the option is $20 x 100 = $2,000 --> (underlying price) * (contract/position size).\n/// @notice Thus, `contracts` refer to \"100\" in this example. The $20 is the strike price. We get the strike price from `tickLower` and `tickUpper`.\n/// @notice From TradFi: https://www.investopedia.com/terms/n/notionalvalue.asp.\n/// @param contractSize the total number of contracts (position size) between `tickLower` and `tickUpper\n/// @param tickLower the lower price tick of the position. The strike price can be recovered from this + `tickUpper`\n/// @param tickUpper the upper price tick of the position. The strike price can be recovered from this + `tickLower`\n/// @param asset the asset for that leg (token0=0, token1=1)\n/// @return notional the notional value of the option position\nfunction convertNotional(uint128 contractSize, int24 tickLower, int24 tickUpper, uint256 asset) internal pure returns (uint128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)",
            "signature": "convert0to1(uint256,uint160)",
            "name": "convert0to1",
            "name_with_params": "convert0to1(amount, sqrtPriceX96)",
            "declaration_string": "/// @notice Convert an amount of token0 into an amount of token1 given the sqrtPriceX96 in a Uniswap pool defined as sqrt(1/0)*2^96.\n/// @dev Uses reduced precision after tick 443636 in order to accomodate the full range of ticks\n/// @param amount the amount of token0 to convert into token1\n/// @param sqrtPriceX96 the square root of the price at which to convert `amount` of token0 into token1\n/// @return the converted `amount` of token0 represented in terms of token1\nfunction convert0to1(uint256 amount, uint160 sqrtPriceX96) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)",
            "signature": "convert1to0(uint256,uint160)",
            "name": "convert1to0",
            "name_with_params": "convert1to0(amount, sqrtPriceX96)",
            "declaration_string": "/// @notice Convert an amount of token1 into an amount of token0 given the sqrtPriceX96 in a Uniswap pool defined as sqrt(1/0)*2^96.\n/// @dev Uses reduced precision after tick 443636 in order to accomodate the full range of ticks\n/// @param amount the amount of token1 to convert into token0\n/// @param sqrtPriceX96 the square root of the price at which to convert `amount` of token1 into token0\n/// @return the converted `amount` of token1 represented in terms of token0\nfunction convert1to0(uint256 amount, uint160 sqrtPriceX96) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)",
            "signature": "convert0to1(int256,uint160)",
            "name": "convert0to1",
            "name_with_params": "convert0to1(amount, sqrtPriceX96)",
            "declaration_string": "/// @notice Convert an amount of token0 into an amount of token1 given the sqrtPriceX96 in a Uniswap pool defined as sqrt(1/0)*2^96.\n/// @dev Uses reduced precision after tick 443636 in order to accomodate the full range of ticks\n/// @param amount the amount of token0 to convert into token1\n/// @param sqrtPriceX96 the square root of the price at which to convert `amount` of token0 into token1\n/// @return the converted `amount` of token0 represented in terms of token1\nfunction convert0to1(int256 amount, uint160 sqrtPriceX96) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)",
            "signature": "convert1to0(int256,uint160)",
            "name": "convert1to0",
            "name_with_params": "convert1to0(amount, sqrtPriceX96)",
            "declaration_string": "/// @notice Convert an amount of token0 into an amount of token1 given the sqrtPriceX96 in a Uniswap pool defined as sqrt(1/0)*2^96.\n/// @dev Uses reduced precision after tick 443636 in order to accomodate the full range of ticks\n/// @param amount the amount of token0 to convert into token1\n/// @param sqrtPriceX96 the square root of the price at which to convert `amount` of token0 into token1\n/// @return the converted `amount` of token0 represented in terms of token1\nfunction convert1to0(int256 amount, uint160 sqrtPriceX96) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)",
            "signature": "getAmountsMoved(uint256,uint128,uint256,int24)",
            "name": "getAmountsMoved",
            "name_with_params": "getAmountsMoved(tokenId, positionSize, legIndex, tickSpacing)",
            "declaration_string": "/// @notice Compute the amount of token0 and token1 moved. Given an option position `tokenId`, leg index `legIndex`, and how many contracts are in the leg `positionSize`.\n/// @param tokenId the option position identifier\n/// @param positionSize the number of option contracts held in this position (each contract can control multiple tokens)\n/// @param legIndex the leg index of the option contract, can be {0,1,2,3}\n/// @param tickSpacing the tick spacing of the underlying UniV3 pool\n/// @return amountsMoved a LeftRight encoded variable containing the amount0 and the amount1 value controlled by this option position's leg\nfunction getAmountsMoved(uint256 tokenId, uint128 positionSize, uint256 legIndex, int24 tickSpacing) internal pure returns (uint256 amountsMoved)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)",
            "signature": "_calculateIOAmounts(uint256,uint128,uint256,int24)",
            "name": "_calculateIOAmounts",
            "name_with_params": "_calculateIOAmounts(tokenId, positionSize, legIndex, tickSpacing)",
            "declaration_string": "/// @notice Compute the amount of funds that are moved to and removed from the Panoptic Pool.\n/// @param tokenId the option position identifier\n/// @param positionSize The number of positions minted\n/// @param legIndex the leg index minted in this position, can be {0,1,2,3}\n/// @param tickSpacing the tick spacing of the underlying Uniswap v3 pool\n/// @return longs A LeftRight-packed word containing the total amount of long positions\n/// @return shorts A LeftRight-packed word containing the amount of short positions\nfunction _calculateIOAmounts(uint256 tokenId, uint128 positionSize, uint256 legIndex, int24 tickSpacing) internal pure returns (int256 longs, int256 shorts)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
            "signature": "safeTransferFrom(address,address,address,uint256)",
            "name": "safeTransferFrom",
            "name_with_params": "safeTransferFrom(token, from, to, amount)",
            "declaration_string": "function safeTransferFrom(address token, address from, address to, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransfer(address,address,uint256)",
            "signature": "safeTransfer(address,address,uint256)",
            "name": "safeTransfer",
            "name_with_params": "safeTransfer(token, to, amount)",
            "declaration_string": "function safeTransfer(address token, address to, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall.multicall(bytes[])",
            "signature": "multicall(bytes[])",
            "name": "multicall",
            "name_with_params": "multicall(data)",
            "declaration_string": "/// @notice Performs multiple calls on the inheritor in a single transaction, and returns the data from each call.\n/// @param data The calldata for each call\n/// @return results The data returned by each call\nfunction multicall(bytes[] calldata data) public payable returns (bytes[] memory results)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "payable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.constructor(address)",
            "signature": "constructor(address)",
            "name": "constructor",
            "name_with_params": "constructor(_SFPM)",
            "declaration_string": "/// @notice Construct the PanopticHelper contract\n/// @param _SFPM address of the SemiFungiblePositionManager\n/// @dev the SFPM is used to get the pool ID for a given address\nconstructor(SemiFungiblePositionManager _SFPM) public payable",
            "kind": "constructor",
            "visibility": "public",
            "state_mutability": "payable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])",
            "signature": "checkCollateral(address,address,int24,uint256,uint256[])",
            "name": "checkCollateral",
            "name_with_params": "checkCollateral(pool, account, atTick, tokenType, positionIdList)",
            "declaration_string": "/// @notice Compute the total amount of collateral needed to cover the existing list of active positions in positionIdList.\n/// @param pool The PanopticPool instance to check collateral on\n/// @param account Address of the user that owns the positions\n/// @param atTick At what price is the collateral requirement evaluated at\n/// @param tokenType whether to return the values in term of token0 or token1\n/// @param positionIdList List of positions. Written as [tokenId1, tokenId2, ...]\n/// @return collateralBalance the total combined balance of token0 and token1 for a user in terms of tokenType\n/// @return requiredCollateral The combined collateral requirement for a user in terms of tokenType\nfunction checkCollateral(PanopticPool pool, address account, int24 atTick, uint256 tokenType, uint256[] calldata positionIdList) public view returns (uint256, uint256)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
            "signature": "netEquity(address,address,int24,uint256[])",
            "name": "netEquity",
            "name_with_params": "netEquity(pool, account, tick, positionIdList)",
            "declaration_string": "/// @notice Returns the net assets (balance - maintenance margin) of a given account on a given pool.\n/// @dev does not work for very large tick gradients.\n/// @param pool address of the pool\n/// @param account address of the account\n/// @param tick tick to consider\n/// @param positionIdList list of position IDs to consider\n/// @return netEquity the net assets of `account` on `pool`\nfunction netEquity(address pool, address account, int24 tick, uint256[] calldata positionIdList) internal view returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])",
            "signature": "findLiquidationPriceDown(address,address,uint256[])",
            "name": "findLiquidationPriceDown",
            "name_with_params": "findLiquidationPriceDown(pool, account, positionIdList)",
            "declaration_string": "/// @notice Returns an estimate of the downside liquidation price for a given account on a given pool.\n/// @dev returns MIN_TICK if the LP is more than 100000 ticks below the current tick.\n/// @param pool address of the pool\n/// @param account address of the account\n/// @param positionIdList list of position IDs to consider\n/// @return liquidationTick the downward liquidation price of `account` on `pool`, if any\nfunction findLiquidationPriceDown(address pool, address account, uint256[] calldata positionIdList) public view returns (int24 liquidationTick)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])",
            "signature": "findLiquidationPriceUp(address,address,uint256[])",
            "name": "findLiquidationPriceUp",
            "name_with_params": "findLiquidationPriceUp(pool, account, positionIdList)",
            "declaration_string": "/// @notice Returns an estimate of the upside liquidation price for a given account on a given pool.\n/// @dev returns MAX_TICK if the LP is more than 100000 ticks above current tick.\n/// @param pool address of the pool\n/// @param account address of the account\n/// @param positionIdList list of position IDs to consider\n/// @return liquidationTick the upward liquidation price of `account` on `pool`, if any\nfunction findLiquidationPriceUp(address pool, address account, uint256[] calldata positionIdList) public view returns (int24 liquidationTick)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
            "signature": "addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
            "name": "addCallLeg",
            "name_with_params": "addCallLeg(tokenId, legIndex, optionRatio, asset, isLong, riskPartner, strike, width)",
            "declaration_string": "/// @notice initializes a given leg in a tokenId as a call.\n/// @param tokenId tokenId to edit\n/// @param legIndex index of the leg to edit\n/// @param optionRatio relative size of the leg\n/// @param asset asset of the leg\n/// @param isLong whether the leg is long or short\n/// @param riskPartner defined risk partner of the leg\n/// @param strike strike of the leg\n/// @param width width of the leg\n/// @return tokenId with the leg initialized\nfunction addCallLeg(uint256 tokenId, uint256 legIndex, uint256 optionRatio, uint256 asset, uint256 isLong, uint256 riskPartner, int24 strike, int24 width) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
            "signature": "addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
            "name": "addPutLeg",
            "name_with_params": "addPutLeg(tokenId, legIndex, optionRatio, asset, isLong, riskPartner, strike, width)",
            "declaration_string": "/// @notice initializes a given leg in a tokenId as a put.\n/// @param tokenId tokenId to edit\n/// @param legIndex index of the leg to edit\n/// @param optionRatio relative size of the leg\n/// @param asset asset of the leg\n/// @param isLong whether the leg is long or short\n/// @param riskPartner defined risk partner of the leg\n/// @param strike strike of the leg\n/// @param width width of the leg\n/// @return tokenId with the leg initialized\nfunction addPutLeg(uint256 tokenId, uint256 legIndex, uint256 optionRatio, uint256 asset, uint256 isLong, uint256 riskPartner, int24 strike, int24 width) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)",
            "signature": "createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)",
            "name": "createStrangle",
            "name_with_params": "createStrangle(univ3pool, width, callStrike, putStrike, asset, isLong, optionRatio, start)",
            "declaration_string": "/// @notice creates \"Classic\" strangle using a call and a put, with asymmetric upward risk.\n/// @dev example: createStrangle(uniPoolAddress, 4, 50, -50, 0, 1, 1, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the strangle\n/// @param callStrike strike of the call\n/// @param putStrike strike of the put\n/// @param asset asset of the strangle\n/// @param isLong is the strangle long or short\n/// @param optionRatio relative size of the strangle\n/// @param start leg index where the (2 legs) of the strangle begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createStrangle(address univ3pool, int24 width, int24 callStrike, int24 putStrike, uint256 asset, uint256 isLong, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)",
            "signature": "createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)",
            "name": "createStraddle",
            "name_with_params": "createStraddle(univ3pool, width, strike, asset, isLong, optionRatio, start)",
            "declaration_string": "/// @notice creates \"Classic\" straddle using a call and a put, with asymmetric upward risk.\n/// @dev createStraddle(uniPoolAddress, 4, 0, 0, 1, 1, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the strangle\n/// @param strike strike of the call and put\n/// @param asset asset of the strangle\n/// @param isLong is the strangle long or short\n/// @param optionRatio relative size of the strangle\n/// @param start leg index where the (2 legs) of the straddle begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createStraddle(address univ3pool, int24 width, int24 strike, uint256 asset, uint256 isLong, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createCallSpread",
            "name_with_params": "createCallSpread(univ3pool, width, strikeLong, strikeShort, asset, optionRatio, start)",
            "declaration_string": "/// @notice creates a call spread with 1 long leg and 1 short leg.\n/// @dev example: createCallSpread(uniPoolAddress, 4, -50, 50, 0, 1, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param strikeLong strike of the long leg\n/// @param strikeShort strike of the short leg\n/// @param asset asset of the spread\n/// @param optionRatio relative size of the spread\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createCallSpread(address univ3pool, int24 width, int24 strikeLong, int24 strikeShort, uint256 asset, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createPutSpread",
            "name_with_params": "createPutSpread(univ3pool, width, strikeLong, strikeShort, asset, optionRatio, start)",
            "declaration_string": "/// @notice creates a put spread with 1 long leg and 1 short leg.\n/// @dev example: createPutSpread(uniPoolAddress, 4, -50, 50, 0, 1, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param strikeLong strike of the long leg\n/// @param strikeShort strike of the short leg\n/// @param asset asset of the spread\n/// @param optionRatio relative size of the spread\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createPutSpread(address univ3pool, int24 width, int24 strikeLong, int24 strikeShort, uint256 asset, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createCallDiagonalSpread",
            "name_with_params": "createCallDiagonalSpread(univ3pool, widthLong, widthShort, strikeLong, strikeShort, asset, optionRatio, start)",
            "declaration_string": "/// @notice creates a diagonal spread with 1 long leg and 1 short leg.abi.\n/// @dev example: createCallDiagonalSpread(uniPoolAddress, 4, 8, -50, 50, 0, 1, 0).\n/// @param univ3pool address of the pool\n/// @param widthLong width of the long leg\n/// @param widthShort width of the short leg\n/// @param strikeLong strike of the long leg\n/// @param strikeShort strike of the short leg\n/// @param asset asset of the spread\n/// @param optionRatio relative size of the spread\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createCallDiagonalSpread(address univ3pool, int24 widthLong, int24 widthShort, int24 strikeLong, int24 strikeShort, uint256 asset, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createPutDiagonalSpread",
            "name_with_params": "createPutDiagonalSpread(univ3pool, widthLong, widthShort, strikeLong, strikeShort, asset, optionRatio, start)",
            "declaration_string": "/// @notice creates a diagonal spread with 1 long leg and 1 short leg.\n/// @dev example: createPutDiagonalSpread(uniPoolAddress, 4, 8, -50, 50, 0, 1, 0).\n/// @param univ3pool address of the pool\n/// @param widthLong width of the long leg\n/// @param widthShort width of the short leg\n/// @param strikeLong strike of the long leg\n/// @param strikeShort strike of the short leg\n/// @param asset asset of the spread\n/// @param optionRatio relative size of the spread\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createPutDiagonalSpread(address univ3pool, int24 widthLong, int24 widthShort, int24 strikeLong, int24 strikeShort, uint256 asset, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallCalendarSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createCallCalendarSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createCallCalendarSpread",
            "name_with_params": "createCallCalendarSpread(univ3pool, widthLong, widthShort, strike, asset, optionRatio, start)",
            "declaration_string": "/// @notice creates a calendar spread with 1 long leg and 1 short leg.\n/// @dev example: createCallCalendarSpread(uniPoolAddress, 4, 8, 0, 0, 1, 0).\n/// @param univ3pool address of the pool\n/// @param widthLong width of the long leg\n/// @param widthShort width of the short leg\n/// @param strike strike of the long and short legs\n/// @param asset asset of the spread\n/// @param optionRatio relative size of the spread\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createCallCalendarSpread(address univ3pool, int24 widthLong, int24 widthShort, int24 strike, uint256 asset, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutCalendarSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createPutCalendarSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createPutCalendarSpread",
            "name_with_params": "createPutCalendarSpread(univ3pool, widthLong, widthShort, strike, asset, optionRatio, start)",
            "declaration_string": "/// @notice creates a calendar spread with 1 long leg and 1 short leg.\n/// @dev example: createPutCalendarSpread(uniPoolAddress, 4, 8, 0, 0, 1, 0).\n/// @param univ3pool address of the pool\n/// @param widthLong width of the long leg\n/// @param widthShort width of the short leg\n/// @param strike strike of the long and short legs\n/// @param asset asset of the spread\n/// @param optionRatio relative size of the spread\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createPutCalendarSpread(address univ3pool, int24 widthLong, int24 widthShort, int24 strike, uint256 asset, uint256 optionRatio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createIronCondor(address,int24,int24,int24,int24,uint256)",
            "signature": "createIronCondor(address,int24,int24,int24,int24,uint256)",
            "name": "createIronCondor",
            "name_with_params": "createIronCondor(univ3pool, width, callStrike, putStrike, wingWidth, asset)",
            "declaration_string": "/// @notice creates iron condor w/ call and put spread.\n/// @dev example: createIronCondor(uniPoolAddress, 4, 50, -50, 50, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param callStrike strike of the call spread\n/// @param putStrike strike of the put spread\n/// @param wingWidth width of the wings\n/// @param asset asset of the strategy\n/// @return tokenId the position id with the strategy configured\nfunction createIronCondor(address univ3pool, int24 width, int24 callStrike, int24 putStrike, int24 wingWidth, uint256 asset) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createJadeLizard(address,int24,int24,int24,int24,uint256)",
            "signature": "createJadeLizard(address,int24,int24,int24,int24,uint256)",
            "name": "createJadeLizard",
            "name_with_params": "createJadeLizard(univ3pool, width, longCallStrike, shortCallStrike, shortPutStrike, asset)",
            "declaration_string": "/// @notice creates a jade lizard w/ long call and short asymmetric (traditional) strangle.\n/// @dev example: createJadeLizard(uniPoolAddress, 4, 100, 50, -50, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longCallStrike strike of the long call\n/// @param shortCallStrike strike of the short call\n/// @param shortPutStrike strike of the short put\n/// @param asset asset of the strategy\n/// @return tokenId the position id with the strategy configured\nfunction createJadeLizard(address univ3pool, int24 width, int24 longCallStrike, int24 shortCallStrike, int24 shortPutStrike, uint256 asset) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createBigLizard(address,int24,int24,int24,uint256)",
            "signature": "createBigLizard(address,int24,int24,int24,uint256)",
            "name": "createBigLizard",
            "name_with_params": "createBigLizard(univ3pool, width, longCallStrike, straddleStrike, asset)",
            "declaration_string": "/// @notice creates a big lizard w/ long call and short asymmetric (traditional) straddle.\n/// @dev example: createBigLizard(uniPoolAddress, 4, 100, 50, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longCallStrike strike of the long call\n/// @param straddleStrike strike of the short straddle\n/// @param asset asset of the strategy\n/// @return tokenId the position id with the strategy configured\nfunction createBigLizard(address univ3pool, int24 width, int24 longCallStrike, int24 straddleStrike, uint256 asset) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createSuperBull(address,int24,int24,int24,int24,uint256)",
            "signature": "createSuperBull(address,int24,int24,int24,int24,uint256)",
            "name": "createSuperBull",
            "name_with_params": "createSuperBull(univ3pool, width, longCallStrike, shortCallStrike, shortPutStrike, asset)",
            "declaration_string": "/// @notice creates a super bull w/ long call spread and short put.\n/// @dev example: createSuperBull(uniPoolAddress, 4, -50, 50, 50, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longCallStrike strike of the long call\n/// @param shortCallStrike strike of the short call\n/// @param shortPutStrike strike of the short put\n/// @param asset asset of the strategy\n/// @return tokenId the position id with the strategy configured\nfunction createSuperBull(address univ3pool, int24 width, int24 longCallStrike, int24 shortCallStrike, int24 shortPutStrike, uint256 asset) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createSuperBear(address,int24,int24,int24,int24,uint256)",
            "signature": "createSuperBear(address,int24,int24,int24,int24,uint256)",
            "name": "createSuperBear",
            "name_with_params": "createSuperBear(univ3pool, width, longPutStrike, shortPutStrike, shortCallStrike, asset)",
            "declaration_string": "/// @notice creates a super bear w/ long put spread and short call.\n/// @dev example: createSuperBear(uniPoolAddress, 4, 50, -50, -50, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longPutStrike strike of the long put\n/// @param shortPutStrike strike of the short put\n/// @param shortCallStrike strike of the short call\n/// @param asset asset of the strategy\n/// @return tokenId the position id with the strategy configured\nfunction createSuperBear(address univ3pool, int24 width, int24 longPutStrike, int24 shortPutStrike, int24 shortCallStrike, uint256 asset) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createIronButterfly(address,int24,int24,int24,uint256)",
            "signature": "createIronButterfly(address,int24,int24,int24,uint256)",
            "name": "createIronButterfly",
            "name_with_params": "createIronButterfly(univ3pool, width, strike, wingWidth, asset)",
            "declaration_string": "/// @notice creates a butterfly w/ long call spread and short put spread.\n/// @dev example: createIronButterfly(uniPoolAddress, 4, 0, 50, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param strike strike of the long and short legs\n/// @param wingWidth width of the wings\n/// @param asset asset of the strategy\n/// @return tokenId the position id with the strategy configured\nfunction createIronButterfly(address univ3pool, int24 width, int24 strike, int24 wingWidth, uint256 asset) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createCallRatioSpread",
            "name_with_params": "createCallRatioSpread(univ3pool, width, longStrike, shortStrike, asset, ratio, start)",
            "declaration_string": "/// @notice creates a ratio spread w/ long call and multiple short calls.\n/// @dev example: createCallRatioSpread(uniPoolAddress, 4, -50, 50, 0, 2, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longStrike strike of the long call\n/// @param shortStrike strike of the short calls\n/// @param asset asset of the strategy\n/// @param ratio ratio of the short calls to the long call\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createCallRatioSpread(address univ3pool, int24 width, int24 longStrike, int24 shortStrike, uint256 asset, uint256 ratio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createPutRatioSpread",
            "name_with_params": "createPutRatioSpread(univ3pool, width, longStrike, shortStrike, asset, ratio, start)",
            "declaration_string": "/// @notice creates a ratio spread w/ long put and multiple short puts.\n/// @dev example: createPutRatioSpread(uniPoolAddress, 4, -50, 50, 0, 2, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longStrike strike of the long put\n/// @param shortStrike strike of the short puts\n/// @param asset asset of the strategy\n/// @param ratio ratio of the short puts to the long put\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createPutRatioSpread(address univ3pool, int24 width, int24 longStrike, int24 shortStrike, uint256 asset, uint256 ratio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createCallZEBRASpread",
            "name_with_params": "createCallZEBRASpread(univ3pool, width, longStrike, shortStrike, asset, ratio, start)",
            "declaration_string": "/// @notice creates a ZEBRA spread w/ short call and multiple long calls.\n/// @dev example: createCallZEBRASpread(uniPoolAddress, 4, -50, 50, 0, 2, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longStrike strike of the long calls\n/// @param shortStrike strike of the short call\n/// @param asset asset of the strategy\n/// @param ratio ratio of the short call to the long calls\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createCallZEBRASpread(address univ3pool, int24 width, int24 longStrike, int24 shortStrike, uint256 asset, uint256 ratio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "signature": "createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)",
            "name": "createPutZEBRASpread",
            "name_with_params": "createPutZEBRASpread(univ3pool, width, longStrike, shortStrike, asset, ratio, start)",
            "declaration_string": "/// @notice creates a ZEBRA spread w/ short put and multiple long puts.\n/// @dev example: createPutZEBRASpread(uniPoolAddress, 4, -50, 50, 0, 2, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longStrike strike of the long puts\n/// @param shortStrike strike of the short put\n/// @param asset asset of the strategy\n/// @param ratio ratio of the short put to the long puts\n/// @param start leg index where the (2 legs) of the spread begin (usually 0)\n/// @return tokenId the position id with the strategy configured\nfunction createPutZEBRASpread(address univ3pool, int24 width, int24 longStrike, int24 shortStrike, uint256 asset, uint256 ratio, uint256 start) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createZEEHBS(address,int24,int24,int24,uint256,uint256)",
            "signature": "createZEEHBS(address,int24,int24,int24,uint256,uint256)",
            "name": "createZEEHBS",
            "name_with_params": "createZEEHBS(univ3pool, width, longStrike, shortStrike, asset, ratio)",
            "declaration_string": "/// @notice creates a ZEEHBS w/ call and put ZEBRA spreads.\n/// @dev example: createPutZEBRASpread(uniPoolAddress, 4, -50, 50, 0, 2, 0).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longStrike strike of the long legs\n/// @param shortStrike strike of the short legs\n/// @param asset asset of the strategy\n/// @param ratio ratio of the short legs to the long legs\n/// @return tokenId the position id with the strategy configured\nfunction createZEEHBS(address univ3pool, int24 width, int24 longStrike, int24 shortStrike, uint256 asset, uint256 ratio) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createBATS(address,int24,int24,int24,uint256,uint256)",
            "signature": "createBATS(address,int24,int24,int24,uint256,uint256)",
            "name": "createBATS",
            "name_with_params": "createBATS(univ3pool, width, longStrike, shortStrike, asset, ratio)",
            "declaration_string": "/// @notice creates a BATS (AKA double ratio spread) w/ call and put ratio spreads.\n/// @dev example: createBATS(uniPoolAddress, 4, -50, 50, 0, 2).\n/// @param univ3pool address of the pool\n/// @param width width of the spread\n/// @param longStrike strike of the long legs\n/// @param shortStrike strike of the short legs\n/// @param asset asset of the strategy\n/// @param ratio ratio of the short legs to the long legs\n/// @return tokenId the position id with the strategy configured\nfunction createBATS(address univ3pool, int24 width, int24 longStrike, int24 shortStrike, uint256 asset, uint256 ratio) public view returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.setApprovalForAll(address,bool)",
            "signature": "setApprovalForAll(address,bool)",
            "name": "setApprovalForAll",
            "name_with_params": "setApprovalForAll(operator, approved)",
            "declaration_string": "/// @notice Approve or revoke approval for an operator to transfer all tokens on behalf of the caller\n/// @param operator the address to approve or revoke approval for\n/// @param approved true to approve, false to revoke approval\nfunction setApprovalForAll(address operator, bool approved) public",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)",
            "signature": "safeTransferFrom(address,address,uint256,uint256,bytes)",
            "name": "safeTransferFrom",
            "name_with_params": "safeTransferFrom(from, to, id, amount, data)",
            "declaration_string": "/// @notice Transfer a single token from one user to another\n/// @dev supports token approvals\n/// @param from the user to transfer tokens from\n/// @param to the user to transfer tokens to\n/// @param id the ERC1155 token id to transfer\n/// @param amount the amount of tokens to transfer\n/// @param data optional data to include in the receive hook\nfunction safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) public",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "signature": "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "name": "safeBatchTransferFrom",
            "name_with_params": "safeBatchTransferFrom(from, to, ids, amounts, data)",
            "declaration_string": "/// @notice Transfer multiple tokens from one user to another\n/// @dev supports token approvals\n/// @dev ids and amounts must be of equal length\n/// @param from the user to transfer tokens from\n/// @param to the user to transfer tokens to\n/// @param ids the ERC1155 token ids to transfer\n/// @param amounts the amounts of tokens to transfer\n/// @param data optional data to include in the receive hook\nfunction safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) public virtual",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.balanceOfBatch(address[],uint256[])",
            "signature": "balanceOfBatch(address[],uint256[])",
            "name": "balanceOfBatch",
            "name_with_params": "balanceOfBatch(owners, ids)",
            "declaration_string": "/// @notice Query balances for multiple users and tokens at once\n/// @dev owners and ids must be of equal length\n/// @param owners the users to query balances for\n/// @param ids the ERC1155 token ids to query\n/// @return balances the balances for each user-token pair in the same order as the input\nfunction balanceOfBatch(address[] calldata owners, uint256[] calldata ids) public view returns (uint256[] memory balances)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.supportsInterface(bytes4)",
            "signature": "supportsInterface(bytes4)",
            "name": "supportsInterface",
            "name_with_params": "supportsInterface(interfaceId)",
            "declaration_string": "/// @notice Signal support for ERC165 and ERC1155\n/// @param interfaceId the interface to check for support\n/// @return supported true if the interface is supported\nfunction supportsInterface(bytes4 interfaceId) public pure returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._mint(address,uint256,uint256)",
            "signature": "_mint(address,uint256,uint256)",
            "name": "_mint",
            "name_with_params": "_mint(to, id, amount)",
            "declaration_string": "/// @notice Internal utility to mint tokens to a user's account\n/// @param to the user to mint tokens to\n/// @param id the ERC1155 token id to mint\n/// @param amount the amount of tokens to mint\nfunction _mint(address to, uint256 id, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._burn(address,uint256,uint256)",
            "signature": "_burn(address,uint256,uint256)",
            "name": "_burn",
            "name_with_params": "_burn(from, id, amount)",
            "declaration_string": "/// @notice Internal utility to burn tokens from a user's account\n/// @param from the user to burn tokens from\n/// @param id the ERC1155 token id to mint\n/// @param amount the amount of tokens to burn\nfunction _burn(address from, uint256 id, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.afterTokenTransfer(address,address,uint256[],uint256[])",
            "signature": "afterTokenTransfer(address,address,uint256[],uint256[])",
            "name": "afterTokenTransfer",
            "name_with_params": "afterTokenTransfer(from, to, ids, amounts)",
            "declaration_string": "/// @notice Internal hook to be called after a batch token transfer\n/// @dev this can be implemented in a child contract to add additional logic\n/// @param from the user to transfer tokens from\n/// @param to the user to transfer tokens to\n/// @param ids the ERC1155 token ids being transferred\n/// @param amounts the amounts of tokens to transfer\nfunction afterTokenTransfer(address from, address to, uint256[] memory ids, uint256[] memory amounts) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.afterTokenTransfer(address,address,uint256[],uint256[])"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.afterTokenTransfer(address,address,uint256,uint256)",
            "signature": "afterTokenTransfer(address,address,uint256,uint256)",
            "name": "afterTokenTransfer",
            "name_with_params": "afterTokenTransfer(from, to, id, amount)",
            "declaration_string": "/// @notice Internal hook to be called after a single token transfer\n/// @dev this can be implemented in a child contract to add additional logic\n/// @param from the user to transfer tokens from\n/// @param to the user to transfer tokens to\n/// @param id the ERC1155 token id being transferred\n/// @param amount the amount of tokens to transfer\nfunction afterTokenTransfer(address from, address to, uint256 id, uint256 amount) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.afterTokenTransfer(address,address,uint256,uint256)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.approve(address,uint256)",
            "signature": "approve(address,uint256)",
            "name": "approve",
            "name_with_params": "approve(spender, amount)",
            "declaration_string": "/// @notice Approves a user to spend tokens on the caller's behalf\n/// @param spender the user to approve\n/// @param amount the amount of tokens to approve\n/// @return success whether the approval succeeded\nfunction approve(address spender, uint256 amount) public returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.transfer(address,uint256)",
            "signature": "transfer(address,uint256)",
            "name": "transfer",
            "name_with_params": "transfer(to, amount)",
            "declaration_string": "/// @notice Transfers tokens from the caller to another user\n/// @param to the user to transfer tokens to\n/// @param amount the amount of tokens to transfer\n/// @return success whether the transfer succeeded\nfunction transfer(address to, uint256 amount) public virtual returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transfer(address,uint256)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.transferFrom(address,address,uint256)",
            "signature": "transferFrom(address,address,uint256)",
            "name": "transferFrom",
            "name_with_params": "transferFrom(from, to, amount)",
            "declaration_string": "/// @notice Transfers tokens from one user to another\n/// @dev Supports token approvals\n/// @param from the user to transfer tokens from\n/// @param to the user to transfer tokens to\n/// @param amount the amount of tokens to transfer\n/// @return success whether the transfer succeeded\nfunction transferFrom(address from, address to, uint256 amount) public virtual returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transferFrom(address,address,uint256)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._transferFrom(address,address,uint256)",
            "signature": "_transferFrom(address,address,uint256)",
            "name": "_transferFrom",
            "name_with_params": "_transferFrom(from, to, amount)",
            "declaration_string": "/// @notice Internal utility to transfer tokens from one user to another\n/// @param from the user to transfer tokens from\n/// @param to the user to transfer tokens to\n/// @param amount the amount of tokens to transfer\nfunction _transferFrom(address from, address to, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._mint(address,uint256)",
            "signature": "_mint(address,uint256)",
            "name": "_mint",
            "name_with_params": "_mint(to, amount)",
            "declaration_string": "/// @notice Internal utility to mint tokens to a user's account\n/// @param to the user to mint tokens to\n/// @param amount the amount of tokens to mint\nfunction _mint(address to, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._burn(address,uint256)",
            "signature": "_burn(address,uint256)",
            "name": "_burn",
            "name_with_params": "_burn(from, amount)",
            "declaration_string": "/// @notice Internal utility to burn tokens from a user's account\n/// @param from the user to burn tokens from\n/// @param amount the amount of tokens to burn\nfunction _burn(address from, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.balanceOf(address)",
            "signature": "balanceOf(address)",
            "name": "balanceOf",
            "name_with_params": "balanceOf(account)",
            "declaration_string": "/// @notice Returns the amount of tokens owned by `account`\n/// @dev This function is unchanged from the EIP\n/// @param account The address to query the balance of\n/// @return The amount of tokens owned by `account`\nfunction balanceOf(address account) external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.approve(address,uint256)",
            "signature": "approve(address,uint256)",
            "name": "approve",
            "name_with_params": "approve(spender, amount)",
            "declaration_string": "/// @notice Sets `amount` as the allowance of `spender` over the caller's tokens\n/// @dev While this function is specified to return a boolean value in the EIP, this interface does not expect one\n/// @param spender The address which will spend the funds\n/// @param amount The amount of tokens allowed to be spent\nfunction approve(address spender, uint256 amount) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.transfer(address,uint256)",
            "signature": "transfer(address,uint256)",
            "name": "transfer",
            "name_with_params": "transfer(to, amount)",
            "declaration_string": "/// @notice Transfers tokens from the caller to another user\n/// @param to the user to transfer tokens to\n/// @param amount the amount of tokens to transfer\nfunction transfer(address to, uint256 amount) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
            "signature": "rightSlot(uint256)",
            "name": "rightSlot",
            "name_with_params": "rightSlot(self)",
            "declaration_string": "/// @notice Get the \"right\" slot from a uint256 bit pattern.\n/// @param self The uint256 (full 256 bits) to be cut in its right half\n/// @return the right half of self (128 bits)\nfunction rightSlot(uint256 self) internal pure returns (uint128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
            "signature": "rightSlot(int256)",
            "name": "rightSlot",
            "name_with_params": "rightSlot(self)",
            "declaration_string": "/// @notice Get the \"right\" slot from an int256 bit pattern.\n/// @param self The int256 (full 256 bits) to be cut in its right half\n/// @return the right half self (128 bits)\nfunction rightSlot(int256 self) internal pure returns (int128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
            "signature": "toRightSlot(uint256,uint128)",
            "name": "toRightSlot",
            "name_with_params": "toRightSlot(self, right)",
            "declaration_string": "/// @notice Write the \"right\" slot to a uint256.\n/// @param self the original full uint256 bit pattern to be written to\n/// @param right the bit pattern to write into the full pattern in the right half\n/// @return self with incoming right added (not overwritten, but added) to its right 128 bits\nfunction toRightSlot(uint256 self, uint128 right) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,int128)",
            "signature": "toRightSlot(uint256,int128)",
            "name": "toRightSlot",
            "name_with_params": "toRightSlot(self, right)",
            "declaration_string": "/// @notice Write the \"right\" slot to a uint256.\n/// @param self the original full uint256 bit pattern to be written to\n/// @param right the bit pattern to write into the full pattern in the right half\n/// @return self with right added to its right 128 bits\nfunction toRightSlot(uint256 self, int128 right) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,uint128)",
            "signature": "toRightSlot(int256,uint128)",
            "name": "toRightSlot",
            "name_with_params": "toRightSlot(self, right)",
            "declaration_string": "/// @notice Write the \"right\" slot to an int256.\n/// @param self the original full int256 bit pattern to be written to\n/// @param right the bit pattern to write into the full pattern in the right half\n/// @return self with right added to its right 128 bits\nfunction toRightSlot(int256 self, uint128 right) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
            "signature": "toRightSlot(int256,int128)",
            "name": "toRightSlot",
            "name_with_params": "toRightSlot(self, right)",
            "declaration_string": "/// @notice Write the \"right\" slot to an int256.\n/// @param self the original full int256 bit pattern to be written to\n/// @param right the bit pattern to write into the full pattern in the right half\n/// @return self with right added to its right 128 bits\nfunction toRightSlot(int256 self, int128 right) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
            "signature": "leftSlot(uint256)",
            "name": "leftSlot",
            "name_with_params": "leftSlot(self)",
            "declaration_string": "/// @notice Get the \"left\" half from a uint256 bit pattern.\n/// @param self The uint256 (full 256 bits) to be cut in its left half\n/// @return the left half (128 bits)\nfunction leftSlot(uint256 self) internal pure returns (uint128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
            "signature": "leftSlot(int256)",
            "name": "leftSlot",
            "name_with_params": "leftSlot(self)",
            "declaration_string": "/// @notice Get the \"left\" half from an int256 bit pattern.\n/// @param self The int256 (full 256 bits) to be cut in its left half\n/// @return the left half (128 bits)\nfunction leftSlot(int256 self) internal pure returns (int128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
            "signature": "toLeftSlot(uint256,uint128)",
            "name": "toLeftSlot",
            "name_with_params": "toLeftSlot(self, left)",
            "declaration_string": "/// @notice Write the \"left\" slot to a uint256 bit pattern.\n/// @param self the original full uint256 bit pattern to be written to\n/// @param left the bit pattern to write into the full pattern in the right half\n/// @return self with left added to its left 128 bits\nfunction toLeftSlot(uint256 self, uint128 left) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,uint128)",
            "signature": "toLeftSlot(int256,uint128)",
            "name": "toLeftSlot",
            "name_with_params": "toLeftSlot(self, left)",
            "declaration_string": "/// @notice Write the \"left\" slot to an int256 bit pattern.\n/// @param self the original full int256 bit pattern to be written to\n/// @param left the bit pattern to write into the full pattern in the right half\n/// @return self with left added to its left 128 bits\nfunction toLeftSlot(int256 self, uint128 left) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
            "signature": "toLeftSlot(int256,int128)",
            "name": "toLeftSlot",
            "name_with_params": "toLeftSlot(self, left)",
            "declaration_string": "/// @notice Write the \"left\" slot to an int256 bit pattern.\n/// @param self the original full int256 bit pattern to be written to\n/// @param left the bit pattern to write into the full pattern in the right half\n/// @return self with left added to its left 128 bits\nfunction toLeftSlot(int256 self, int128 left) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,uint256)",
            "signature": "add(uint256,uint256)",
            "name": "add",
            "name_with_params": "add(x, y)",
            "declaration_string": "/// @notice Add two uint256 bit LeftRight-encoded words; revert on overflow or underflow.\n/// @param x the augend\n/// @param y the addend\n/// @return z the sum x + y\nfunction add(uint256 x, uint256 y) internal pure returns (uint256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(uint256,uint256)",
            "signature": "sub(uint256,uint256)",
            "name": "sub",
            "name_with_params": "sub(x, y)",
            "declaration_string": "/// @notice Subtract two uint256 bit LeftRight-encoded words; revert on overflow or underflow.\n/// @param x the minuend\n/// @param y the subtrahend\n/// @return z the difference x - y\nfunction sub(uint256 x, uint256 y) internal pure returns (uint256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(uint256,uint256)",
            "signature": "mul(uint256,uint256)",
            "name": "mul",
            "name_with_params": "mul(x, y)",
            "declaration_string": "/// @notice Multiply two uint256 bit LeftRight-encoded words; revert on overflow.\n/// @param x the multiplicand\n/// @param y the multiplier\n/// @return z the product x/// y\nfunction mul(uint256 x, uint256 y) internal pure returns (uint256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)",
            "signature": "div(uint256,uint256)",
            "name": "div",
            "name_with_params": "div(x, y)",
            "declaration_string": "/// @notice Divide two uint256 bit LeftRight-encoded words; revert on division by zero.\n/// @param x the numerator\n/// @param y the denominator\n/// @return z the ratio x / y\nfunction div(uint256 x, uint256 y) internal pure returns (uint256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)",
            "signature": "add(uint256,int256)",
            "name": "add",
            "name_with_params": "add(x, y)",
            "declaration_string": "/// @notice Add uint256 to an int256 LeftRight-encoded word; revert on overflow or underflow.\n/// @param x the augend\n/// @param y the addend\n/// @return z (int256) the sum x + y\nfunction add(uint256 x, int256 y) internal pure returns (int256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
            "signature": "add(int256,int256)",
            "name": "add",
            "name_with_params": "add(x, y)",
            "declaration_string": "/// @notice Add two int256 bit LeftRight-encoded words; revert on overflow.\n/// @param x the augend\n/// @param y the addend\n/// @return z the sum x + y\nfunction add(int256 x, int256 y) internal pure returns (int256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
            "signature": "sub(int256,int256)",
            "name": "sub",
            "name_with_params": "sub(x, y)",
            "declaration_string": "/// @notice Subtract two int256 bit LeftRight-encoded words; revert on overflow.\n/// @param x the minuend\n/// @param y the subtrahend\n/// @return z the difference x - y\nfunction sub(int256 x, int256 y) internal pure returns (int256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)",
            "signature": "mul(int256,int256)",
            "name": "mul",
            "name_with_params": "mul(x, y)",
            "declaration_string": "/// @notice Multiply two int256 bit LeftRight-encoded words; revert on overflow.\n/// @param x the multiplicand\n/// @param y the multiplier\n/// @return z the product x * y\nfunction mul(int256 x, int256 y) internal pure returns (int256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)",
            "signature": "div(int256,int256)",
            "name": "div",
            "name_with_params": "div(x, y)",
            "declaration_string": "/// @notice Divide two int256 bit LeftRight-encoded words; revert on division by zero.\n/// @param x the numerator\n/// @param y the denominator\n/// @return z the ratio x / y\nfunction div(int256 x, int256 y) internal pure returns (int256 z)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt128(int256)",
            "signature": "toInt128(int256)",
            "name": "toInt128",
            "name_with_params": "toInt128(self)",
            "declaration_string": "/// @notice Cast an int256 to an int128, revert on overflow or underflow.\n/// @param self the int256 to be downcasted to int128\n/// @return selfAsInt128 the downcasted integer, now of type int128\nfunction toInt128(int256 self) internal pure returns (int128 selfAsInt128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
            "signature": "toUint128(uint256)",
            "name": "toUint128",
            "name_with_params": "toUint128(self)",
            "declaration_string": "/// @notice Downcast uint256 to a uint128, revert on overflow\n/// @param self the uint256 to be downcasted to uint128\n/// @return selfAsUint128 the downcasted uint256 now as uint128\nfunction toUint128(uint256 self) internal pure returns (uint128 selfAsUint128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt256(uint256)",
            "signature": "toInt256(uint256)",
            "name": "toInt256",
            "name_with_params": "toInt256(self)",
            "declaration_string": "/// @notice Cast a uint256 to an int256, revert on overflow\n/// @param self the uint256 to be downcasted to uint128\n/// @return the incoming uint256 but now of type int256\nfunction toInt256(uint256 self) internal pure returns (int256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.createChunk(uint256,int24,int24,uint128)",
            "signature": "createChunk(uint256,int24,int24,uint128)",
            "name": "createChunk",
            "name_with_params": "createChunk(self, _tickLower, _tickUpper, amount)",
            "declaration_string": "/// @notice Create a new liquidity chunk given by its bounding ticks and its liquidity.\n/// @param self the uint256 to turn into a liquidity chunk - assumed to be 0\n/// @param _tickLower the lower tick of this chunk\n/// @param _tickUpper the upper tick of this chunk\n/// @param amount the amount of liquidity to add to this chunk.\n/// @return the new liquidity chunk\nfunction createChunk(uint256 self, int24 _tickLower, int24 _tickUpper, uint128 amount) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addLiquidity(uint256,uint128)",
            "signature": "addLiquidity(uint256,uint128)",
            "name": "addLiquidity",
            "name_with_params": "addLiquidity(self, amount)",
            "declaration_string": "/// @notice Add liquidity to the chunk.\n/// @param self the LiquidityChunk\n/// @param amount the amount of liquidity to add to this chunk\n/// @return the chunk with added liquidity\nfunction addLiquidity(uint256 self, uint128 amount) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addTickLower(uint256,int24)",
            "signature": "addTickLower(uint256,int24)",
            "name": "addTickLower",
            "name_with_params": "addTickLower(self, _tickLower)",
            "declaration_string": "/// @notice Add the lower tick to this chunk.\n/// @param self the LiquidityChunk\n/// @param _tickLower the lower tick to add\n/// @return the chunk with added lower tick\nfunction addTickLower(uint256 self, int24 _tickLower) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addTickUpper(uint256,int24)",
            "signature": "addTickUpper(uint256,int24)",
            "name": "addTickUpper",
            "name_with_params": "addTickUpper(self, _tickUpper)",
            "declaration_string": "/// @notice Add the upper tick to this chunk.\n/// @param self the LiquidityChunk\n/// @param _tickUpper the upper tick to add\n/// @return the chunk with added upper tick\nfunction addTickUpper(uint256 self, int24 _tickUpper) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.copyTickRange(uint256,uint256)",
            "signature": "copyTickRange(uint256,uint256)",
            "name": "copyTickRange",
            "name_with_params": "copyTickRange(self, from)",
            "declaration_string": "/// @notice Copy the tick range (upper and lower ticks) of a chunk `from` to `self`.\n/// @notice This is helpful if you have a pre-existing liquidity amount, say \"100\" as a uint128. Simply cast to a uint256 and then we want\n///  to pack in the tick range as well so we add that to the front (towards the MSB) of the bit pattern keeping the liquidity amount the same.\n/// @dev note that the liquidity itself is not transferred over from `other` - only the chunk bounds/ticks are.\n/// @dev assumes that the incoming chunk does *not* already have ticks since the operation is additive.\n/// @param self the chunk to copy the ticks *to* (recipient of the tick range)\n/// @param from pre-existing chunk with lower and upper ticks that we want to copy *from*\n/// @return a liquidity chunk with the lower and upper tick values added to it\nfunction copyTickRange(uint256 self, uint256 from) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
            "signature": "tickLower(uint256)",
            "name": "tickLower",
            "name_with_params": "tickLower(self)",
            "declaration_string": "/// @notice Get the lower tick of a chunk.\n/// @param self the LiquidityChunk uint256\n/// @return the lower tick of this chunk\nfunction tickLower(uint256 self) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
            "signature": "tickUpper(uint256)",
            "name": "tickUpper",
            "name_with_params": "tickUpper(self)",
            "declaration_string": "/// @notice Get the upper tick of a chunk.\n/// @param self the LiquidityChunk uint256\n/// @return the upper tick of this chunk\nfunction tickUpper(uint256 self) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
            "signature": "liquidity(uint256)",
            "name": "liquidity",
            "name_with_params": "liquidity(self)",
            "declaration_string": "/// @notice Get the amount of liquidity/size of a chunk.\n/// @param self the LiquidityChunk uint256\n/// @return the size of this chunk\nfunction liquidity(uint256 self) internal pure returns (uint128)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.updateCurrentTick(uint256,int24)",
            "signature": "updateCurrentTick(uint256,int24)",
            "name": "updateCurrentTick",
            "name_with_params": "updateCurrentTick(self, _currentTick)",
            "declaration_string": "/// /// @notice Overwrite the `currentTick` to the `tickStateCallContext` packed data.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @param _currentTick The current tick of the uniswap pool.\n////// @return the tickStateCallContext with added currentTick data.\nfunction updateCurrentTick(uint256 self, int24 _currentTick) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addCurrentTick(uint256,int24)",
            "signature": "addCurrentTick(uint256,int24)",
            "name": "addCurrentTick",
            "name_with_params": "addCurrentTick(self, _currentTick)",
            "declaration_string": "/// /// @notice Add the `currentTick` to the `tickStateCallContext` packed data.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @param _currentTick The current tick of the uniswap pool.\n////// @return the tickStateCallContext with added currentTick data.\nfunction addCurrentTick(uint256 self, int24 _currentTick) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addMedianTick(uint256,int24)",
            "signature": "addMedianTick(uint256,int24)",
            "name": "addMedianTick",
            "name_with_params": "addMedianTick(self, _medianTick)",
            "declaration_string": "/// /// @notice Add the `MedianTick` to the `tickStateCallContext` packed data.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @param _medianTick The miniTWAP tick of the Panoptic pool.\n////// @return the tickStateCallContext with added median tick data.\nfunction addMedianTick(uint256 self, int24 _medianTick) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addCaller(uint256,address)",
            "signature": "addCaller(uint256,address)",
            "name": "addCaller",
            "name_with_params": "addCaller(self, _caller)",
            "declaration_string": "/// /// @notice Add the `msg.sender` to the `tickStateCallContext` packed data.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @param _caller The user who called the Panoptic Pool.\n////// @return the tickStateCallContext with added msg.sender data.\nfunction addCaller(uint256 self, address _caller) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.currentTick(uint256)",
            "signature": "currentTick(uint256)",
            "name": "currentTick",
            "name_with_params": "currentTick(self)",
            "declaration_string": "/// /// @notice Return the currentTick for data packed into tickStateCallContext.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @return the current tick of tickStateCallContext.\nfunction currentTick(uint256 self) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.medianTick(uint256)",
            "signature": "medianTick(uint256)",
            "name": "medianTick",
            "name_with_params": "medianTick(self)",
            "declaration_string": "/// /// @notice Return the median tick for data packed into tickStateCallContext.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @return the median tick of tickStateCallContext.\nfunction medianTick(uint256 self) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.caller(uint256)",
            "signature": "caller(uint256)",
            "name": "caller",
            "name_with_params": "caller(self)",
            "declaration_string": "/// /// @notice Return the caller for data packed into tickStateCallContext.\n////// @param self the packed uint256 that holds current tick, median tick, and caller.\n////// @return the caller stored in tickStateCallContext.\nfunction caller(uint256 self) internal pure returns (address)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
            "signature": "univ3pool(uint256)",
            "name": "univ3pool",
            "name_with_params": "univ3pool(self)",
            "declaration_string": "/// @notice The Uniswap v3 Pool pointed to by this option position.\n/// @param self the option position Id\n/// @return the poolId (Panoptic's uni v3 pool fingerprint) of the Uniswap v3 pool\nfunction univ3pool(uint256 self) internal pure returns (uint64)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
            "signature": "asset(uint256,uint256)",
            "name": "asset",
            "name_with_params": "asset(self, legIndex)",
            "declaration_string": "/// @notice Get the asset basis for this position.\n/// @dev which token is the asset - can be token0 (return 0) or token1 (return 1)\n/// @param self the option position Id\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @dev occupies the leftmost bit of the optionRatio 4 bits slot.\n/// @dev The final mod: \"% 2\" = takes the leftmost bit of the pattern.\n/// @return 0 if asset is token0, 1 if asset is token1\nfunction asset(uint256 self, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
            "signature": "optionRatio(uint256,uint256)",
            "name": "optionRatio",
            "name_with_params": "optionRatio(self, legIndex)",
            "declaration_string": "/// @notice Get the number of contracts per leg.\n/// @param self the option position Id.\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @dev The final mod: \"% 2**7\" = takes the rightmost (2 ** 7 = 128) 7 bits of the pattern.\nfunction optionRatio(uint256 self, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
            "signature": "isLong(uint256,uint256)",
            "name": "isLong",
            "name_with_params": "isLong(self, legIndex)",
            "declaration_string": "/// @notice Return 1 if the nth leg (leg index `legIndex`) is a long position.\n/// @param self the option position Id\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return 1 if long; 0 if not long.\nfunction isLong(uint256 self, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
            "signature": "tokenType(uint256,uint256)",
            "name": "tokenType",
            "name_with_params": "tokenType(self, legIndex)",
            "declaration_string": "/// @notice Get the type of token moved for a given leg (implies a call or put). Either Token0 or Token1.\n/// @param self the tokenId in the SFPM representing an option position\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return 1 if the token moved is token1 or 0 if the token moved is token0\nfunction tokenType(uint256 self, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.riskPartner(uint256,uint256)",
            "signature": "riskPartner(uint256,uint256)",
            "name": "riskPartner",
            "name_with_params": "riskPartner(self, legIndex)",
            "declaration_string": "/// @notice Get the associated risk partner of the leg index (generally another leg index in the position).\n/// @notice that returning the riskPartner for any leg is 0 by default, this does not necessarily imply that token 1 (index 0)\n/// @notice is the risk partner of that leg. We are assuming here that the position has been validated before this and that\n/// @notice the risk partner of any leg always makes sense in this way. A leg btw. does not need to have a risk partner.\n/// @notice the point here is that this function is very low level and must be used with utmost care because it comes down\n/// @notice to the caller to interpret whether 00 means \"no risk partner\" or \"risk partner leg index 0\".\n/// @notice But in general we can return 00, 01, 10, and 11 meaning the partner is leg 0, 1, 2, or 3.\n/// @param self the tokenId in the SFPM representing an option position\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the leg index of `legIndex`'s risk partner.\nfunction riskPartner(uint256 self, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
            "signature": "strike(uint256,uint256)",
            "name": "strike",
            "name_with_params": "strike(self, legIndex)",
            "declaration_string": "/// @notice Get the strike price tick of the nth leg (with index `legIndex`).\n/// @param self the tokenId in the SFPM representing an option position\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the strike price (the underlying price of the leg).\nfunction strike(uint256 self, uint256 legIndex) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
            "signature": "width(uint256,uint256)",
            "name": "width",
            "name_with_params": "width(self, legIndex)",
            "declaration_string": "/// @notice Get the width of the nth leg (index `legIndex`). This is half the tick-range covered by the leg (tickUpper - tickLower)/2.\n/// @dev return as int24 to be compatible with the strike tick format (they naturally go together)\n/// @param self the tokenId in the SFPM representing an option position\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the width of the position.\nfunction width(uint256 self, uint256 legIndex) internal pure returns (int24)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
            "signature": "addUniv3pool(uint256,uint64)",
            "name": "addUniv3pool",
            "name_with_params": "addUniv3pool(self, _poolId)",
            "declaration_string": "/// @notice Add the Uniswap v3 Pool pointed to by this option position.\n/// @param self the option position Id.\n/// @return the tokenId with the Uniswap V3 pool added to it.\nfunction addUniv3pool(uint256 self, uint64 _poolId) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addAsset(uint256,uint256,uint256)",
            "signature": "addAsset(uint256,uint256,uint256)",
            "name": "addAsset",
            "name_with_params": "addAsset(self, _asset, legIndex)",
            "declaration_string": "/// @notice Add the asset basis for this position.\n/// @param self the option position Id.\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @dev occupies the leftmost bit of the optionRatio 4 bits slot\n/// @dev The final mod: \"% 2\" = takes the rightmost bit of the pattern\n/// @return the tokenId with numerarire added to the incoming leg index\nfunction addAsset(uint256 self, uint256 _asset, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addOptionRatio(uint256,uint256,uint256)",
            "signature": "addOptionRatio(uint256,uint256,uint256)",
            "name": "addOptionRatio",
            "name_with_params": "addOptionRatio(self, _optionRatio, legIndex)",
            "declaration_string": "/// @notice Add the number of contracts to leg index `legIndex`.\n/// @param self the option position Id\n/// @param legIndex the leg index of the position (in {0,1,2,3})\n/// @dev The final mod: \"% 128\" = takes the rightmost (2 ** 7 = 128) 7 bits of the pattern.\n/// @return the tokenId with optionRatio added to the incoming leg index\nfunction addOptionRatio(uint256 self, uint256 _optionRatio, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addIsLong(uint256,uint256,uint256)",
            "signature": "addIsLong(uint256,uint256,uint256)",
            "name": "addIsLong",
            "name_with_params": "addIsLong(self, _isLong, legIndex)",
            "declaration_string": "/// @notice Add \"isLong\" parameter indicating whether a leg is long (isLong=1) or short (isLong=0)\n/// @notice returns 1 if the nth leg (leg index n-1) is a long position.\n/// @param self the option position Id\n/// @param _isLong whether the leg is long\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the tokenId with isLong added to its relevant leg\nfunction addIsLong(uint256 self, uint256 _isLong, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addTokenType(uint256,uint256,uint256)",
            "signature": "addTokenType(uint256,uint256,uint256)",
            "name": "addTokenType",
            "name_with_params": "addTokenType(self, _tokenType, legIndex)",
            "declaration_string": "/// @notice Add the type of token moved for a given leg (implies a call or put). Either Token0 or Token1.\n/// @param self the tokenId in the SFPM representing an option position\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the tokenId with tokenType added to its relevant leg.\nfunction addTokenType(uint256 self, uint256 _tokenType, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addRiskPartner(uint256,uint256,uint256)",
            "signature": "addRiskPartner(uint256,uint256,uint256)",
            "name": "addRiskPartner",
            "name_with_params": "addRiskPartner(self, _riskPartner, legIndex)",
            "declaration_string": "/// @notice Add the associated risk partner of the leg index (generally another leg in the overall position).\n/// @param self the tokenId in the SFPM representing an option position\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the tokenId with riskPartner added to its relevant leg.\nfunction addRiskPartner(uint256 self, uint256 _riskPartner, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addStrike(uint256,int24,uint256)",
            "signature": "addStrike(uint256,int24,uint256)",
            "name": "addStrike",
            "name_with_params": "addStrike(self, _strike, legIndex)",
            "declaration_string": "/// @notice Add the strike price tick of the nth leg (index `legIndex`).\n/// @param self the tokenId in the SFPM representing an option position.\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the tokenId with strike price tick added to its relevant leg\nfunction addStrike(uint256 self, int24 _strike, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addWidth(uint256,int24,uint256)",
            "signature": "addWidth(uint256,int24,uint256)",
            "name": "addWidth",
            "name_with_params": "addWidth(self, _width, legIndex)",
            "declaration_string": "/// @notice Add the width of the nth leg (index `legIndex`). This is half the tick-range covered by the leg (tickUpper - tickLower)/2.\n/// @param self the tokenId in the SFPM representing an option position.\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @return the tokenId with width added to its relevant leg\nfunction addWidth(uint256 self, int24 _width, uint256 legIndex) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
            "signature": "addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
            "name": "addLeg",
            "name_with_params": "addLeg(self, legIndex, _optionRatio, _asset, _isLong, _tokenType, _riskPartner, _strike, _width)",
            "declaration_string": "/// @notice Add a leg to the tokenId.\n/// @param self the tokenId in the SFPM representing an option position.\n/// @param legIndex the leg index of this position (in {0,1,2,3})\n/// @param _optionRatio the relative size of the leg\n/// @param _asset the asset of the leg\n/// @param _isLong whether the leg is long\n/// @param _tokenType the type of token moved for the leg\n/// @param _riskPartner the associated risk partner of the leg\n/// @param _strike the strike price tick of the leg\n/// @param _width the width of the leg\n/// @return tokenId the tokenId with the leg added\nfunction addLeg(uint256 self, uint256 legIndex, uint256 _optionRatio, uint256 _asset, uint256 _isLong, uint256 _tokenType, uint256 _riskPartner, int24 _strike, int24 _width) internal pure returns (uint256 tokenId)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.flipToBurnToken(uint256)",
            "signature": "flipToBurnToken(uint256)",
            "name": "flipToBurnToken",
            "name_with_params": "flipToBurnToken(self)",
            "declaration_string": "/// @notice Flip all the `isLong` positions in the legs in the `tokenId` option position.\n/// @dev uses XOR on existing isLong bits.\n/// @dev useful during rolling an option position where we need to burn and mint. So we need to take\n/// an existing tokenId but now burn it. The way to do this is to simply flip it to a short instead.\n/// @param self the tokenId in the SFPM representing an option position.\nfunction flipToBurnToken(uint256 self) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLongs(uint256)",
            "signature": "countLongs(uint256)",
            "name": "countLongs",
            "name_with_params": "countLongs(self)",
            "declaration_string": "/// @notice Get the number of longs in this option position.\n/// @notice count the number of legs (out of a maximum of 4) that are long positions.\n/// @param self the tokenId in the SFPM representing an option position.\n/// @return the number of long positions (in the range {0,...,4}).\nfunction countLongs(uint256 self) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)",
            "signature": "asTicks(uint256,uint256,int24)",
            "name": "asTicks",
            "name_with_params": "asTicks(self, legIndex, tickSpacing)",
            "declaration_string": "/// @notice Get the option position's nth leg's (index `legIndex`) tick ranges (lower, upper).\n/// @dev NOTE does not extract liquidity which is the third piece of information in a LiquidityChunk.\n/// @param self the option position id.\n/// @param legIndex the leg index of the position (in {0,1,2,3}).\n/// @param tickSpacing the tick spacing of the underlying Univ3 pool.\n/// @return legLowerTick the lower tick of the leg/liquidity chunk.\n/// @return legUpperTick the upper tick of the leg/liquidity chunk.\nfunction asTicks(uint256 self, uint256 legIndex, int24 tickSpacing) internal pure returns (int24 legLowerTick, int24 legUpperTick)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
            "signature": "countLegs(uint256)",
            "name": "countLegs",
            "name_with_params": "countLegs(self)",
            "declaration_string": "/// @notice Return the number of active legs in the option position.\n/// @param self the option position Id (tokenId).\n/// @dev ASSUMPTION: There is at least 1 leg in this option position.\n/// @dev ASSUMPTION: For any leg, the option ratio is always > 0 (the leg always has a number of contracts associated with it).\n/// @return the number of legs in the option position.\nfunction countLegs(uint256 self) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)",
            "signature": "validate(uint256)",
            "name": "validate",
            "name_with_params": "validate(self)",
            "declaration_string": "/// @notice Validate an option position and all its active legs; return the underlying AMM address.\n/// @dev used to validate a position tokenId and its legs.\n/// @param self the option position id.\n/// @return the first 64 bits of the underlying Uniswap V3 address.\nfunction validate(uint256 self) internal pure returns (uint64)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.ensureIsOTM(uint256,int24,int24)",
            "signature": "ensureIsOTM(uint256,int24,int24)",
            "name": "ensureIsOTM",
            "name_with_params": "ensureIsOTM(self, currentTick, tickSpacing)",
            "declaration_string": "/// @notice Make sure that an option position `self`'s all active legs are out-of-the-money (OTM). Revert if not.\n/// @dev OTMness depends on where the current price tick is in the AMM relative to the tick bounds of the leg.\n/// @param self the option position Id (tokenId)\n/// @param currentTick the current tick corresponding to the current price in the Univ3 pool.\n/// @param tickSpacing the tick spacing of the Univ3 pool.\nfunction ensureIsOTM(uint256 self, int24 currentTick, int24 tickSpacing) internal pure",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)",
            "signature": "validateIsExercisable(uint256,int24,int24)",
            "name": "validateIsExercisable",
            "name_with_params": "validateIsExercisable(self, currentTick, tickSpacing)",
            "declaration_string": "/// @notice Validate that a position `self` and its legs/chunks are exercisable.\n/// @dev At least one long leg must be far-out-of-the-money (i.e. price is outside its range).\n/// @param self the option position Id (tokenId)\n/// @param currentTick the current tick corresponding to the current price in the Univ3 pool.\n/// @param tickSpacing the tick spacing of the Univ3 pool used to compute the width of the chunks.\nfunction validateIsExercisable(uint256 self, int24 currentTick, int24 tickSpacing) internal pure",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rolledTokenIsValid(uint256,uint256)",
            "signature": "rolledTokenIsValid(uint256,uint256)",
            "name": "rolledTokenIsValid",
            "name_with_params": "rolledTokenIsValid(oldTokenId, newTokenId)",
            "declaration_string": "/// @notice Validate that a roll didn't change unexpected parameters.\n/// @notice Does NOT revert if invalid; returns the validation check as a boolean.\n/// @dev Call this on an old tokenId when rolling into a new TokenId.\n/// this checks that the new tokenId is valid in structure.\n/// @param oldTokenId the old tokenId that is being rolled into a new position.\n/// @param newTokenId the new tokenId that the old position is being rolled into.\n/// @return true of the rolled token (newTokenId) is valid in structure.\nfunction rolledTokenIsValid(uint256 oldTokenId, uint256 newTokenId) internal pure returns (bool)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.constructRollTokenIdWith(uint256,uint256)",
            "signature": "constructRollTokenIdWith(uint256,uint256)",
            "name": "constructRollTokenIdWith",
            "name_with_params": "constructRollTokenIdWith(oldTokenId, newTokenId)",
            "declaration_string": "/// @notice Roll an option position from an old TokenId to a position with parameters from the newTokenId.\n/// @dev a roll in general burns existing legs and re-mints the legs.\n/// @param oldTokenId the old option position that we are rolling into a new position.\n/// @param newTokenId the new option position that we are rolling into.\n/// @return burnTokenId the details of the legs to burn as part of the roll.\n/// @return mintTokenId the details of the legs to mint as part of the roll.\nfunction constructRollTokenIdWith(uint256 oldTokenId, uint256 newTokenId) internal pure returns (uint256 burnTokenId, uint256 mintTokenId)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.clearLeg(uint256,uint256)",
            "signature": "clearLeg(uint256,uint256)",
            "name": "clearLeg",
            "name_with_params": "clearLeg(self, i)",
            "declaration_string": "/// @notice Clear a leg in an option position with index `i`.\n/// @dev set bits of the leg to zero. Also sets the optionRatio and asset to zero of that leg.\n/// @dev NOTE it's important that the caller fills in the leg details after.\n/// @dev  - optionRatio is zeroed\n/// @dev  - asset is zeroed\n/// @dev  - width is zeroed\n/// @dev  - strike is zeroed\n/// @dev  - tokenType is zeroed\n/// @dev  - isLong is zeroed\n/// @dev  - riskPartner is zeroed\n/// @param self the tokenId to reset the leg of\n/// @param i the leg index to reset, in {0,1,2,3}\n/// @return `self` with the `i`th leg zeroed including optionRatio and asset.\nfunction clearLeg(uint256 self, uint256 i) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)",
            "signature": "rollTokenInfo(uint256,uint256,uint256,uint256)",
            "name": "rollTokenInfo",
            "name_with_params": "rollTokenInfo(self, other, src, dst)",
            "declaration_string": "/// @notice Roll (by copying) over the information from `other`'s leg index `src` to `self`'s leg index `dst`.\n/// @notice to leg index `dst` in `self`.\n/// @param self the destination tokenId of the roll\n/// @param other the source tokenId of the roll\n/// @param src the leg index in `other` we are rolling/copying over to `self`s `dst` leg index\n/// @param dst the leg index in `self` we are rolling/copying into from `other`s `src` leg index\n/// @return `self` with its `dst` leg index overwritten by the `src` leg index of `other`\nfunction rollTokenInfo(uint256 self, uint256 other, uint256 src, uint256 dst) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.toUint128(uint256)",
            "signature": "toUint128(uint256)",
            "name": "toUint128",
            "name_with_params": "toUint128(x)",
            "declaration_string": "/// @notice Downcasts uint256 to uint128\n/// @param x The uint258 to be downcasted\n/// @return y The passed value, downcasted to uint128\nfunction toUint128(uint256 x) internal pure returns (uint128 y)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)",
            "signature": "getLiquidityForAmount0(uint160,uint160,uint256)",
            "name": "getLiquidityForAmount0",
            "name_with_params": "getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)",
            "declaration_string": "/// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n/// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n/// @param amount0 The amount0 being sent in\n/// @return liquidity The amount of returned liquidity\nfunction getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount0) public pure returns (uint128 liquidity)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256)",
            "signature": "getLiquidityForAmount1(uint160,uint160,uint256)",
            "name": "getLiquidityForAmount1",
            "name_with_params": "getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)",
            "declaration_string": "/// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n/// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n/// @param amount1 The amount1 being sent in\n/// @return liquidity The amount of returned liquidity\nfunction getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount1) public pure returns (uint128 liquidity)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128)",
            "signature": "getAmount0ForLiquidity(uint160,uint160,uint128)",
            "name": "getAmount0ForLiquidity",
            "name_with_params": "getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity)",
            "declaration_string": "/// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n/// @param liquidity The liquidity being valued\n/// @return amount0 The amount of token0\nfunction getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) public pure returns (uint256 amount0)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128)",
            "signature": "getAmount1ForLiquidity(uint160,uint160,uint128)",
            "name": "getAmount1ForLiquidity",
            "name_with_params": "getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity)",
            "declaration_string": "/// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n/// @param liquidity The liquidity being valued\n/// @return amount1 The amount of token1\nfunction getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) public pure returns (uint256 amount1)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)",
            "signature": "getAmountsForLiquidity(uint160,uint160,uint160,uint128)",
            "name": "getAmountsForLiquidity",
            "name_with_params": "getAmountsForLiquidity(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, liquidity)",
            "declaration_string": "/// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n/// pool prices and the prices at the tick boundaries\n/// @param sqrtRatioX96 A sqrt price representing the current pool prices\n/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n/// @param liquidity The liquidity being valued\n/// @return amount0 The amount of token0\n/// @return amount1 The amount of token1\nfunction getAmountsForLiquidity(uint160 sqrtRatioX96, uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) public pure returns (uint256 amount0, uint256 amount1)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)",
            "signature": "getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)",
            "name": "getLiquidityForAmounts",
            "name_with_params": "getLiquidityForAmounts(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, amount0, amount1)",
            "declaration_string": "/// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n/// pool prices and the prices at the tick boundaries\n/// @param sqrtRatioX96 A sqrt price representing the current pool prices\n/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n/// @param amount0 The amount of token0 being sent in\n/// @param amount1 The amount of token1 being sent in\n/// @return liquidity The maximum amount of liquidity received\nfunction getLiquidityForAmounts(uint160 sqrtRatioX96, uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount0, uint256 amount1) public pure returns (uint128 liquidity)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
            "signature": "getSqrtRatioAtTick(int24)",
            "name": "getSqrtRatioAtTick",
            "name_with_params": "getSqrtRatioAtTick(tick)",
            "declaration_string": "/// @notice Calculates sqrt(1.0001^tick) * 2^96\n/// @dev Throws if |tick| > max tick\n/// @param tick The input tick for the above formula\n/// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n/// at the given tick\nfunction getSqrtRatioAtTick(int24 tick) external pure returns (uint160 sqrtPriceX96)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.clone(address)",
            "signature": "clone(address)",
            "name": "clone",
            "name_with_params": "clone(implementation)",
            "declaration_string": "///  @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n/// This function uses the create opcode, which should never revert.\nfunction clone(address implementation) internal returns (address instance)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.cloneDeterministic(address,bytes32)",
            "signature": "cloneDeterministic(address,bytes32)",
            "name": "cloneDeterministic",
            "name_with_params": "cloneDeterministic(implementation, salt)",
            "declaration_string": "///  @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n/// This function uses the create2 opcode and a `salt` to deterministically deploy\n/// the clone. Using the same `implementation` and `salt` multiple time will revert, since\n/// the clones cannot be deployed twice at the same address.\nfunction cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.predictDeterministicAddress(address,bytes32,address)",
            "signature": "predictDeterministicAddress(address,bytes32,address)",
            "name": "predictDeterministicAddress",
            "name_with_params": "predictDeterministicAddress(implementation, salt, deployer)",
            "declaration_string": "///  @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\nfunction predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.predictDeterministicAddress(address,bytes32)",
            "signature": "predictDeterministicAddress(address,bytes32)",
            "name": "predictDeterministicAddress",
            "name_with_params": "predictDeterministicAddress(implementation, salt)",
            "declaration_string": "///  @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\nfunction predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard.constructor()",
            "signature": "constructor()",
            "name": "constructor",
            "name_with_params": "constructor()",
            "declaration_string": "constructor() internal",
            "kind": "constructor",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard._nonReentrantBefore()",
            "signature": "_nonReentrantBefore()",
            "name": "_nonReentrantBefore",
            "name_with_params": "_nonReentrantBefore()",
            "declaration_string": "function _nonReentrantBefore() private",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard._nonReentrantAfter()",
            "signature": "_nonReentrantAfter()",
            "name": "_nonReentrantAfter",
            "name_with_params": "_nonReentrantAfter()",
            "declaration_string": "function _nonReentrantAfter() private",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.constructor(string)",
            "signature": "constructor(string)",
            "name": "constructor",
            "name_with_params": "constructor(uri_)",
            "declaration_string": "///  @dev See {_setURI}.\nconstructor(string memory uri_) public",
            "kind": "constructor",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.supportsInterface(bytes4)",
            "signature": "supportsInterface(bytes4)",
            "name": "supportsInterface",
            "name_with_params": "supportsInterface(interfaceId)",
            "declaration_string": "///  @dev See {IERC165-supportsInterface}.\nfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165.supportsInterface(bytes4)",
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165.supportsInterface(bytes4)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.uri(uint256)",
            "signature": "uri(uint256)",
            "name": "uri",
            "name_with_params": "uri()",
            "declaration_string": "///  @dev See {IERC1155MetadataURI-uri}.\n/// This implementation returns the same URI for *all* token types. It relies\n/// on the token type ID substitution mechanism\n/// https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n/// Clients calling this function must replace the `\\{id\\}` substring with the\n/// actual token type ID.\nfunction uri(uint256) public view virtual override returns (string memory)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI.uri(uint256)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.balanceOf(address,uint256)",
            "signature": "balanceOf(address,uint256)",
            "name": "balanceOf",
            "name_with_params": "balanceOf(account, id)",
            "declaration_string": "///  @dev See {IERC1155-balanceOf}.\n/// Requirements:\n/// - `account` cannot be the zero address.\nfunction balanceOf(address account, uint256 id) public view virtual override returns (uint256)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.balanceOf(address,uint256)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.balanceOfBatch(address[],uint256[])",
            "signature": "balanceOfBatch(address[],uint256[])",
            "name": "balanceOfBatch",
            "name_with_params": "balanceOfBatch(accounts, ids)",
            "declaration_string": "///  @dev See {IERC1155-balanceOfBatch}.\n/// Requirements:\n/// - `accounts` and `ids` must have the same length.\nfunction balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.balanceOfBatch(address[],uint256[])"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.setApprovalForAll(address,bool)",
            "signature": "setApprovalForAll(address,bool)",
            "name": "setApprovalForAll",
            "name_with_params": "setApprovalForAll(operator, approved)",
            "declaration_string": "///  @dev See {IERC1155-setApprovalForAll}.\nfunction setApprovalForAll(address operator, bool approved) public virtual override",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.setApprovalForAll(address,bool)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.isApprovedForAll(address,address)",
            "signature": "isApprovedForAll(address,address)",
            "name": "isApprovedForAll",
            "name_with_params": "isApprovedForAll(account, operator)",
            "declaration_string": "///  @dev See {IERC1155-isApprovedForAll}.\nfunction isApprovedForAll(address account, address operator) public view virtual override returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.isApprovedForAll(address,address)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)",
            "signature": "safeTransferFrom(address,address,uint256,uint256,bytes)",
            "name": "safeTransferFrom",
            "name_with_params": "safeTransferFrom(from, to, id, amount, data)",
            "declaration_string": "///  @dev See {IERC1155-safeTransferFrom}.\nfunction safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public virtual override",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "signature": "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "name": "safeBatchTransferFrom",
            "name_with_params": "safeBatchTransferFrom(from, to, ids, amounts, data)",
            "declaration_string": "///  @dev See {IERC1155-safeBatchTransferFrom}.\nfunction safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)",
            "signature": "_safeTransferFrom(address,address,uint256,uint256,bytes)",
            "name": "_safeTransferFrom",
            "name_with_params": "_safeTransferFrom(from, to, id, amount, data)",
            "declaration_string": "///  @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n/// Emits a {TransferSingle} event.\n/// Requirements:\n/// - `to` cannot be the zero address.\n/// - `from` must have a balance of tokens of type `id` of at least `amount`.\n/// - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n/// acceptance magic value.\nfunction _safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "signature": "_safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "name": "_safeBatchTransferFrom",
            "name_with_params": "_safeBatchTransferFrom(from, to, ids, amounts, data)",
            "declaration_string": "///  @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n/// Emits a {TransferBatch} event.\n/// Requirements:\n/// - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n/// acceptance magic value.\nfunction _safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._setURI(string)",
            "signature": "_setURI(string)",
            "name": "_setURI",
            "name_with_params": "_setURI(newuri)",
            "declaration_string": "///  @dev Sets a new URI for all token types, by relying on the token type ID\n/// substitution mechanism\n/// https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n/// By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n/// URI or any of the amounts in the JSON file at said URI will be replaced by\n/// clients with the token type ID.\n/// For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n/// interpreted by clients as\n/// `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n/// for token type ID 0x4cce0.\n/// See {uri}.\n/// Because these URIs cannot be meaningfully represented by the {URI} event,\n/// this function emits no events.\nfunction _setURI(string memory newuri) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)",
            "signature": "_mint(address,uint256,uint256,bytes)",
            "name": "_mint",
            "name_with_params": "_mint(to, id, amount, data)",
            "declaration_string": "///  @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n/// Emits a {TransferSingle} event.\n/// Requirements:\n/// - `to` cannot be the zero address.\n/// - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n/// acceptance magic value.\nfunction _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mintBatch(address,uint256[],uint256[],bytes)",
            "signature": "_mintBatch(address,uint256[],uint256[],bytes)",
            "name": "_mintBatch",
            "name_with_params": "_mintBatch(to, ids, amounts, data)",
            "declaration_string": "///  @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n/// Emits a {TransferBatch} event.\n/// Requirements:\n/// - `ids` and `amounts` must have the same length.\n/// - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n/// acceptance magic value.\nfunction _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burn(address,uint256,uint256)",
            "signature": "_burn(address,uint256,uint256)",
            "name": "_burn",
            "name_with_params": "_burn(from, id, amount)",
            "declaration_string": "///  @dev Destroys `amount` tokens of token type `id` from `from`\n/// Emits a {TransferSingle} event.\n/// Requirements:\n/// - `from` cannot be the zero address.\n/// - `from` must have at least `amount` tokens of token type `id`.\nfunction _burn(address from, uint256 id, uint256 amount) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burnBatch(address,uint256[],uint256[])",
            "signature": "_burnBatch(address,uint256[],uint256[])",
            "name": "_burnBatch",
            "name_with_params": "_burnBatch(from, ids, amounts)",
            "declaration_string": "///  @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n/// Emits a {TransferBatch} event.\n/// Requirements:\n/// - `ids` and `amounts` must have the same length.\nfunction _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._setApprovalForAll(address,address,bool)",
            "signature": "_setApprovalForAll(address,address,bool)",
            "name": "_setApprovalForAll",
            "name_with_params": "_setApprovalForAll(owner, operator, approved)",
            "declaration_string": "///  @dev Approve `operator` to operate on all of `owner` tokens\n/// Emits an {ApprovalForAll} event.\nfunction _setApprovalForAll(address owner, address operator, bool approved) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
            "signature": "_beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
            "name": "_beforeTokenTransfer",
            "name_with_params": "_beforeTokenTransfer(operator, from, to, ids, amounts, data)",
            "declaration_string": "///  @dev Hook that is called before any token transfer. This includes minting\n/// and burning, as well as batched variants.\n/// The same hook is called on both single and batched variants. For single\n/// transfers, the length of the `ids` and `amounts` arrays will be 1.\n/// Calling conditions (for each `id` and `amount` pair):\n/// - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n/// of token type `id` will be  transferred to `to`.\n/// - When `from` is zero, `amount` tokens of token type `id` will be minted\n/// for `to`.\n/// - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n/// will be burned.\n/// - `from` and `to` are never both zero.\n/// - `ids` and `amounts` have the same, non-zero length.\n/// To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\nfunction _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
            "signature": "_afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
            "name": "_afterTokenTransfer",
            "name_with_params": "_afterTokenTransfer(operator, from, to, ids, amounts, data)",
            "declaration_string": "///  @dev Hook that is called after any token transfer. This includes minting\n/// and burning, as well as batched variants.\n/// The same hook is called on both single and batched variants. For single\n/// transfers, the length of the `id` and `amount` arrays will be 1.\n/// Calling conditions (for each `id` and `amount` pair):\n/// - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n/// of token type `id` will be  transferred to `to`.\n/// - When `from` is zero, `amount` tokens of token type `id` will be minted\n/// for `to`.\n/// - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n/// will be burned.\n/// - `from` and `to` are never both zero.\n/// - `ids` and `amounts` have the same, non-zero length.\n/// To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\nfunction _afterTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)",
            "signature": "_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)",
            "name": "_doSafeTransferAcceptanceCheck",
            "name_with_params": "_doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data)",
            "declaration_string": "function _doSafeTransferAcceptanceCheck(address operator, address from, address to, uint256 id, uint256 amount, bytes memory data) private",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)",
            "signature": "_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)",
            "name": "_doSafeBatchTransferAcceptanceCheck",
            "name_with_params": "_doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data)",
            "declaration_string": "function _doSafeBatchTransferAcceptanceCheck(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) private",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
            "signature": "_asSingletonArray(uint256)",
            "name": "_asSingletonArray",
            "name_with_params": "_asSingletonArray(element)",
            "declaration_string": "function _asSingletonArray(uint256 element) private pure returns (uint256[] memory)",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.balanceOf(address,uint256)",
            "signature": "balanceOf(address,uint256)",
            "name": "balanceOf",
            "name_with_params": "balanceOf(account, id)",
            "declaration_string": "///  @dev Returns the amount of tokens of token type `id` owned by `account`.\n/// Requirements:\n/// - `account` cannot be the zero address.\nfunction balanceOf(address account, uint256 id) external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.balanceOf(address,uint256)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.balanceOfBatch(address[],uint256[])",
            "signature": "balanceOfBatch(address[],uint256[])",
            "name": "balanceOfBatch",
            "name_with_params": "balanceOfBatch(accounts, ids)",
            "declaration_string": "///  @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n/// Requirements:\n/// - `accounts` and `ids` must have the same length.\nfunction balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.balanceOfBatch(address[],uint256[])"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.setApprovalForAll(address,bool)",
            "signature": "setApprovalForAll(address,bool)",
            "name": "setApprovalForAll",
            "name_with_params": "setApprovalForAll(operator, approved)",
            "declaration_string": "///  @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n/// Emits an {ApprovalForAll} event.\n/// Requirements:\n/// - `operator` cannot be the caller.\nfunction setApprovalForAll(address operator, bool approved) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.setApprovalForAll(address,bool)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.isApprovedForAll(address,address)",
            "signature": "isApprovedForAll(address,address)",
            "name": "isApprovedForAll",
            "name_with_params": "isApprovedForAll(account, operator)",
            "declaration_string": "///  @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n/// See {setApprovalForAll}.\nfunction isApprovedForAll(address account, address operator) external view returns (bool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.isApprovedForAll(address,address)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)",
            "signature": "safeTransferFrom(address,address,uint256,uint256,bytes)",
            "name": "safeTransferFrom",
            "name_with_params": "safeTransferFrom(from, to, id, amount, data)",
            "declaration_string": "///  @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n/// Emits a {TransferSingle} event.\n/// Requirements:\n/// - `to` cannot be the zero address.\n/// - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n/// - `from` must have a balance of tokens of type `id` of at least `amount`.\n/// - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n/// acceptance magic value.\nfunction safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "signature": "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
            "name": "safeBatchTransferFrom",
            "name_with_params": "safeBatchTransferFrom(from, to, ids, amounts, data)",
            "declaration_string": "///  @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n/// Emits a {TransferBatch} event.\n/// Requirements:\n/// - `ids` and `amounts` must have the same length.\n/// - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n/// acceptance magic value.\nfunction safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes)",
            "signature": "onERC1155Received(address,address,uint256,uint256,bytes)",
            "name": "onERC1155Received",
            "name_with_params": "onERC1155Received(operator, from, id, value, data)",
            "declaration_string": "///  @dev Handles the receipt of a single ERC1155 token type. This function is\n/// called at the end of a `safeTransferFrom` after the balance has been updated.\n/// NOTE: To accept the transfer, this must return\n/// `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n/// (i.e. 0xf23a6e61, or its own function selector).\n/// @param operator The address which initiated the transfer (i.e. msg.sender)\n/// @param from The address which previously owned the token\n/// @param id The ID of the token being transferred\n/// @param value The amount of tokens being transferred\n/// @param data Additional data with no specified format\n/// @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\nfunction onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
            "signature": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
            "name": "onERC1155BatchReceived",
            "name_with_params": "onERC1155BatchReceived(operator, from, ids, values, data)",
            "declaration_string": "///  @dev Handles the receipt of a multiple ERC1155 token types. This function\n/// is called at the end of a `safeBatchTransferFrom` after the balances have\n/// been updated.\n/// NOTE: To accept the transfer(s), this must return\n/// `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n/// (i.e. 0xbc197c81, or its own function selector).\n/// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n/// @param from The address which previously owned the token\n/// @param ids An array containing ids of each token being transferred (order and length must match values array)\n/// @param values An array containing amounts of each token being transferred (order and length must match ids array)\n/// @param data Additional data with no specified format\n/// @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\nfunction onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns (bytes4)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI.uri(uint256)",
            "signature": "uri(uint256)",
            "name": "uri",
            "name_with_params": "uri(id)",
            "declaration_string": "///  @dev Returns the URI for token type `id`.\n/// If the `\\{id\\}` substring is present in the URI, it must be replaced by\n/// clients with the actual token type ID.\nfunction uri(uint256 id) external view returns (string memory)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.uri(uint256)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)",
            "signature": "onERC1155Received(address,address,uint256,uint256,bytes)",
            "name": "onERC1155Received",
            "name_with_params": "onERC1155Received(, , , , )",
            "declaration_string": "function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
            "signature": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
            "name": "onERC1155BatchReceived",
            "name_with_params": "onERC1155BatchReceived(, , , , )",
            "declaration_string": "function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver.supportsInterface(bytes4)",
            "signature": "supportsInterface(bytes4)",
            "name": "supportsInterface",
            "name_with_params": "supportsInterface(interfaceId)",
            "declaration_string": "///  @dev See {IERC165-supportsInterface}.\nfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165.supportsInterface(bytes4)",
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165.supportsInterface(bytes4)"
            ],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20.totalSupply()",
            "signature": "totalSupply()",
            "name": "totalSupply",
            "name_with_params": "totalSupply()",
            "declaration_string": "///  @dev Returns the amount of tokens in existence.\nfunction totalSupply() external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20.balanceOf(address)",
            "signature": "balanceOf(address)",
            "name": "balanceOf",
            "name_with_params": "balanceOf(account)",
            "declaration_string": "///  @dev Returns the amount of tokens owned by `account`.\nfunction balanceOf(address account) external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20.transfer(address,uint256)",
            "signature": "transfer(address,uint256)",
            "name": "transfer",
            "name_with_params": "transfer(to, amount)",
            "declaration_string": "///  @dev Moves `amount` tokens from the caller's account to `to`.\n/// Returns a boolean value indicating whether the operation succeeded.\n/// Emits a {Transfer} event.\nfunction transfer(address to, uint256 amount) external returns (bool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20.allowance(address,address)",
            "signature": "allowance(address,address)",
            "name": "allowance",
            "name_with_params": "allowance(owner, spender)",
            "declaration_string": "///  @dev Returns the remaining number of tokens that `spender` will be\n/// allowed to spend on behalf of `owner` through {transferFrom}. This is\n/// zero by default.\n/// This value changes when {approve} or {transferFrom} are called.\nfunction allowance(address owner, address spender) external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20.approve(address,uint256)",
            "signature": "approve(address,uint256)",
            "name": "approve",
            "name_with_params": "approve(spender, amount)",
            "declaration_string": "///  @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n/// Returns a boolean value indicating whether the operation succeeded.\n/// IMPORTANT: Beware that changing an allowance with this method brings the risk\n/// that someone may use both the old and the new allowance by unfortunate\n/// transaction ordering. One possible solution to mitigate this race\n/// condition is to first reduce the spender's allowance to 0 and set the\n/// desired value afterwards:\n/// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n/// Emits an {Approval} event.\nfunction approve(address spender, uint256 amount) external returns (bool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20.transferFrom(address,address,uint256)",
            "signature": "transferFrom(address,address,uint256)",
            "name": "transferFrom",
            "name_with_params": "transferFrom(from, to, amount)",
            "declaration_string": "///  @dev Moves `amount` tokens from `from` to `to` using the\n/// allowance mechanism. `amount` is then deducted from the caller's\n/// allowance.\n/// Returns a boolean value indicating whether the operation succeeded.\n/// Emits a {Transfer} event.\nfunction transferFrom(address from, address to, uint256 amount) external returns (bool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.name()",
            "signature": "name()",
            "name": "name",
            "name_with_params": "name()",
            "declaration_string": "///  @dev Returns the name of the token.\nfunction name() external view returns (string memory)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.symbol()",
            "signature": "symbol()",
            "name": "symbol",
            "name_with_params": "symbol()",
            "declaration_string": "///  @dev Returns the symbol of the token.\nfunction symbol() external view returns (string memory)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.decimals()",
            "signature": "decimals()",
            "name": "decimals",
            "name_with_params": "decimals()",
            "declaration_string": "///  @dev Returns the decimals places of the token.\nfunction decimals() external view returns (uint8)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.isContract(address)",
            "signature": "isContract(address)",
            "name": "isContract",
            "name_with_params": "isContract(account)",
            "declaration_string": "///  @dev Returns true if `account` is a contract.\n/// [IMPORTANT]\n/// ====\n/// It is unsafe to assume that an address for which this function returns\n/// false is an externally-owned account (EOA) and not a contract.\n/// Among others, `isContract` will return false for the following\n/// types of addresses:\n///  - an externally-owned account\n///  - a contract in construction\n///  - an address where a contract will be created\n///  - an address where a contract lived, but was destroyed\n/// ====\n/// [IMPORTANT]\n/// ====\n/// You shouldn't rely on `isContract` to protect against flash loan attacks!\n/// Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n/// like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n/// constructor.\n/// ====\nfunction isContract(address account) internal view returns (bool)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.sendValue(address,uint256)",
            "signature": "sendValue(address,uint256)",
            "name": "sendValue",
            "name_with_params": "sendValue(recipient, amount)",
            "declaration_string": "///  @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n/// `recipient`, forwarding all available gas and reverting on errors.\n/// https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n/// of certain opcodes, possibly making contracts go over the 2300 gas limit\n/// imposed by `transfer`, making them unable to receive funds via\n/// `transfer`. {sendValue} removes this limitation.\n/// https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n/// IMPORTANT: because control is transferred to `recipient`, care must be\n/// taken to not create reentrancy vulnerabilities. Consider using\n/// {ReentrancyGuard} or the\n/// https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\nfunction sendValue(address payable recipient, uint256 amount) internal",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCall(address,bytes)",
            "signature": "functionCall(address,bytes)",
            "name": "functionCall",
            "name_with_params": "functionCall(target, data)",
            "declaration_string": "///  @dev Performs a Solidity function call using a low level `call`. A\n/// plain `call` is an unsafe replacement for a function call: use this\n/// function instead.\n/// If `target` reverts with a revert reason, it is bubbled up by this\n/// function (like regular Solidity function calls).\n/// Returns the raw returned data. To convert to the expected return value,\n/// use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n/// Requirements:\n/// - `target` must be a contract.\n/// - calling `target` with `data` must not revert.\n/// _Available since v3.1._\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCall(address,bytes,string)",
            "signature": "functionCall(address,bytes,string)",
            "name": "functionCall",
            "name_with_params": "functionCall(target, data, errorMessage)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n/// `errorMessage` as a fallback revert reason when `target` reverts.\n/// _Available since v3.1._\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256)",
            "signature": "functionCallWithValue(address,bytes,uint256)",
            "name": "functionCallWithValue",
            "name_with_params": "functionCallWithValue(target, data, value)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n/// but also transferring `value` wei to `target`.\n/// Requirements:\n/// - the calling contract must have an ETH balance of at least `value`.\n/// - the called Solidity function must be `payable`.\n/// _Available since v3.1._\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256,string)",
            "signature": "functionCallWithValue(address,bytes,uint256,string)",
            "name": "functionCallWithValue",
            "name_with_params": "functionCallWithValue(target, data, value, errorMessage)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n/// with `errorMessage` as a fallback revert reason when `target` reverts.\n/// _Available since v3.1._\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionStaticCall(address,bytes)",
            "signature": "functionStaticCall(address,bytes)",
            "name": "functionStaticCall",
            "name_with_params": "functionStaticCall(target, data)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n/// but performing a static call.\n/// _Available since v3.3._\nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionStaticCall(address,bytes,string)",
            "signature": "functionStaticCall(address,bytes,string)",
            "name": "functionStaticCall",
            "name_with_params": "functionStaticCall(target, data, errorMessage)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n/// but performing a static call.\n/// _Available since v3.3._\nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionDelegateCall(address,bytes)",
            "signature": "functionDelegateCall(address,bytes)",
            "name": "functionDelegateCall",
            "name_with_params": "functionDelegateCall(target, data)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n/// but performing a delegate call.\n/// _Available since v3.4._\nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionDelegateCall(address,bytes,string)",
            "signature": "functionDelegateCall(address,bytes,string)",
            "name": "functionDelegateCall",
            "name_with_params": "functionDelegateCall(target, data, errorMessage)",
            "declaration_string": "///  @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n/// but performing a delegate call.\n/// _Available since v3.4._\nfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResultFromTarget(address,bool,bytes,string)",
            "signature": "verifyCallResultFromTarget(address,bool,bytes,string)",
            "name": "verifyCallResultFromTarget",
            "name_with_params": "verifyCallResultFromTarget(target, success, returndata, errorMessage)",
            "declaration_string": "///  @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n/// the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n/// _Available since v4.8._\nfunction verifyCallResultFromTarget(address target, bool success, bytes memory returndata, string memory errorMessage) internal view returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResult(bool,bytes,string)",
            "signature": "verifyCallResult(bool,bytes,string)",
            "name": "verifyCallResult",
            "name_with_params": "verifyCallResult(success, returndata, errorMessage)",
            "declaration_string": "///  @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n/// revert reason or using the provided one.\n/// _Available since v4.3._\nfunction verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address._revert(bytes,string)",
            "signature": "_revert(bytes,string)",
            "name": "_revert",
            "name_with_params": "_revert(returndata, errorMessage)",
            "declaration_string": "function _revert(bytes memory returndata, string memory errorMessage) private pure",
            "kind": "function",
            "visibility": "private",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
            "signature": "_msgSender()",
            "name": "_msgSender",
            "name_with_params": "_msgSender()",
            "declaration_string": "function _msgSender() internal view virtual returns (address)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgData()",
            "signature": "_msgData()",
            "name": "_msgData",
            "name_with_params": "_msgData()",
            "declaration_string": "function _msgData() internal view virtual returns (bytes calldata)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toString(uint256)",
            "signature": "toString(uint256)",
            "name": "toString",
            "name_with_params": "toString(value)",
            "declaration_string": "///  @dev Converts a `uint256` to its ASCII `string` decimal representation.\nfunction toString(uint256 value) internal pure returns (string memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(uint256)",
            "signature": "toHexString(uint256)",
            "name": "toHexString",
            "name_with_params": "toHexString(value)",
            "declaration_string": "///  @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\nfunction toHexString(uint256 value) internal pure returns (string memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(uint256,uint256)",
            "signature": "toHexString(uint256,uint256)",
            "name": "toHexString",
            "name_with_params": "toHexString(value, length)",
            "declaration_string": "///  @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\nfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(address)",
            "signature": "toHexString(address)",
            "name": "toHexString",
            "name_with_params": "toHexString(addr)",
            "declaration_string": "///  @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\nfunction toHexString(address addr) internal pure returns (string memory)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165.supportsInterface(bytes4)",
            "signature": "supportsInterface(bytes4)",
            "name": "supportsInterface",
            "name_with_params": "supportsInterface(interfaceId)",
            "declaration_string": "///  @dev See {IERC165-supportsInterface}.\nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool)",
            "kind": "function",
            "visibility": "public",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165.supportsInterface(bytes4)"
            ],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver.supportsInterface(bytes4)",
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.supportsInterface(bytes4)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165.supportsInterface(bytes4)",
            "signature": "supportsInterface(bytes4)",
            "name": "supportsInterface",
            "name_with_params": "supportsInterface(interfaceId)",
            "declaration_string": "///  @dev Returns true if this contract implements the interface defined by\n/// `interfaceId`. See the corresponding\n/// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n/// to learn more about how these ids are created.\n/// This function call must use less than 30 000 gas.\nfunction supportsInterface(bytes4 interfaceId) external view returns (bool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver.supportsInterface(bytes4)",
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.supportsInterface(bytes4)",
                "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165.supportsInterface(bytes4)"
            ],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.max(uint256,uint256)",
            "signature": "max(uint256,uint256)",
            "name": "max",
            "name_with_params": "max(a, b)",
            "declaration_string": "///  @dev Returns the largest of two numbers.\nfunction max(uint256 a, uint256 b) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.min(uint256,uint256)",
            "signature": "min(uint256,uint256)",
            "name": "min",
            "name_with_params": "min(a, b)",
            "declaration_string": "///  @dev Returns the smallest of two numbers.\nfunction min(uint256 a, uint256 b) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.average(uint256,uint256)",
            "signature": "average(uint256,uint256)",
            "name": "average",
            "name_with_params": "average(a, b)",
            "declaration_string": "///  @dev Returns the average of two numbers. The result is rounded towards\n/// zero.\nfunction average(uint256 a, uint256 b) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.ceilDiv(uint256,uint256)",
            "signature": "ceilDiv(uint256,uint256)",
            "name": "ceilDiv",
            "name_with_params": "ceilDiv(a, b)",
            "declaration_string": "///  @dev Returns the ceiling of the division of two numbers.\n/// This differs from standard division with `/` in that it rounds up instead\n/// of rounding down.\nfunction ceilDiv(uint256 a, uint256 b) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
            "signature": "mulDiv(uint256,uint256,uint256)",
            "name": "mulDiv",
            "name_with_params": "mulDiv(x, y, denominator)",
            "declaration_string": "///  @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n/// @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n/// with further edits by Uniswap Labs also under MIT license.\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.mulDiv(uint256,uint256,uint256,uint8)",
            "signature": "mulDiv(uint256,uint256,uint256,uint8)",
            "name": "mulDiv",
            "name_with_params": "mulDiv(x, y, denominator, rounding)",
            "declaration_string": "///  @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.sqrt(uint256)",
            "signature": "sqrt(uint256)",
            "name": "sqrt",
            "name_with_params": "sqrt(a)",
            "declaration_string": "///  @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n/// Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\nfunction sqrt(uint256 a) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.sqrt(uint256,uint8)",
            "signature": "sqrt(uint256,uint8)",
            "name": "sqrt",
            "name_with_params": "sqrt(a, rounding)",
            "declaration_string": "///  @notice Calculates sqrt(a), following the selected rounding direction.\nfunction sqrt(uint256 a, Rounding rounding) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log2(uint256)",
            "signature": "log2(uint256)",
            "name": "log2",
            "name_with_params": "log2(value)",
            "declaration_string": "///  @dev Return the log in base 2, rounded down, of a positive value.\n/// Returns 0 if given 0.\nfunction log2(uint256 value) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log2(uint256,uint8)",
            "signature": "log2(uint256,uint8)",
            "name": "log2",
            "name_with_params": "log2(value, rounding)",
            "declaration_string": "///  @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n/// Returns 0 if given 0.\nfunction log2(uint256 value, Rounding rounding) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log10(uint256)",
            "signature": "log10(uint256)",
            "name": "log10",
            "name_with_params": "log10(value)",
            "declaration_string": "///  @dev Return the log in base 10, rounded down, of a positive value.\n/// Returns 0 if given 0.\nfunction log10(uint256 value) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log10(uint256,uint8)",
            "signature": "log10(uint256,uint8)",
            "name": "log10",
            "name_with_params": "log10(value, rounding)",
            "declaration_string": "///  @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n/// Returns 0 if given 0.\nfunction log10(uint256 value, Rounding rounding) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log256(uint256)",
            "signature": "log256(uint256)",
            "name": "log256",
            "name_with_params": "log256(value)",
            "declaration_string": "///  @dev Return the log in base 256, rounded down, of a positive value.\n/// Returns 0 if given 0.\n/// Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\nfunction log256(uint256 value) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log256(uint256,uint8)",
            "signature": "log256(uint256,uint8)",
            "name": "log256",
            "name_with_params": "log256(value, rounding)",
            "declaration_string": "///  @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n/// Returns 0 if given 0.\nfunction log256(uint256 value, Rounding rounding) internal pure returns (uint256)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.owner()",
            "signature": "owner()",
            "name": "owner",
            "name_with_params": "owner()",
            "declaration_string": "/// @notice Returns the current owner of the factory\n/// @dev Can be changed by the current owner via setOwner\n/// @return The address of the factory owner\nfunction owner() external view returns (address)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.feeAmountTickSpacing(uint24)",
            "signature": "feeAmountTickSpacing(uint24)",
            "name": "feeAmountTickSpacing",
            "name_with_params": "feeAmountTickSpacing(fee)",
            "declaration_string": "/// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n/// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n/// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n/// @return The tick spacing\nfunction feeAmountTickSpacing(uint24 fee) external view returns (int24)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.getPool(address,address,uint24)",
            "signature": "getPool(address,address,uint24)",
            "name": "getPool",
            "name_with_params": "getPool(tokenA, tokenB, fee)",
            "declaration_string": "/// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n/// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n/// @param tokenA The contract address of either token0 or token1\n/// @param tokenB The contract address of the other token\n/// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n/// @return pool The pool address\nfunction getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.createPool(address,address,uint24)",
            "signature": "createPool(address,address,uint24)",
            "name": "createPool",
            "name_with_params": "createPool(tokenA, tokenB, fee)",
            "declaration_string": "/// @notice Creates a pool for the given two tokens and fee\n/// @param tokenA One of the two tokens in the desired pool\n/// @param tokenB The other of the two tokens in the desired pool\n/// @param fee The desired fee for the pool\n/// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n/// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n/// are invalid.\n/// @return pool The address of the newly created pool\nfunction createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.setOwner(address)",
            "signature": "setOwner(address)",
            "name": "setOwner",
            "name_with_params": "setOwner(_owner)",
            "declaration_string": "/// @notice Updates the owner of the factory\n/// @dev Must be called by the current owner\n/// @param _owner The new owner of the factory\nfunction setOwner(address _owner) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.enableFeeAmount(uint24,int24)",
            "signature": "enableFeeAmount(uint24,int24)",
            "name": "enableFeeAmount",
            "name_with_params": "enableFeeAmount(fee, tickSpacing)",
            "declaration_string": "/// @notice Enables a fee amount with the given tickSpacing\n/// @dev Fee amounts may never be removed once enabled\n/// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n/// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\nfunction enableFeeAmount(uint24 fee, int24 tickSpacing) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.initialize(uint160)",
            "signature": "initialize(uint160)",
            "name": "initialize",
            "name_with_params": "initialize(sqrtPriceX96)",
            "declaration_string": "/// @notice Sets the initial price for the pool\n/// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n/// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\nfunction initialize(uint160 sqrtPriceX96) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.mint(address,int24,int24,uint128,bytes)",
            "signature": "mint(address,int24,int24,uint128,bytes)",
            "name": "mint",
            "name_with_params": "mint(recipient, tickLower, tickUpper, amount, data)",
            "declaration_string": "/// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n/// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n/// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n/// on tickLower, tickUpper, the amount of liquidity, and the current price.\n/// @param recipient The address for which the liquidity will be created\n/// @param tickLower The lower tick of the position in which to add liquidity\n/// @param tickUpper The upper tick of the position in which to add liquidity\n/// @param amount The amount of liquidity to mint\n/// @param data Any data that should be passed through to the callback\n/// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n/// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\nfunction mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128)",
            "signature": "collect(address,int24,int24,uint128,uint128)",
            "name": "collect",
            "name_with_params": "collect(recipient, tickLower, tickUpper, amount0Requested, amount1Requested)",
            "declaration_string": "/// @notice Collects tokens owed to a position\n/// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n/// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n/// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n/// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n/// @param recipient The address which should receive the fees collected\n/// @param tickLower The lower tick of the position for which to collect fees\n/// @param tickUpper The upper tick of the position for which to collect fees\n/// @param amount0Requested How much token0 should be withdrawn from the fees owed\n/// @param amount1Requested How much token1 should be withdrawn from the fees owed\n/// @return amount0 The amount of fees collected in token0\n/// @return amount1 The amount of fees collected in token1\nfunction collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.burn(int24,int24,uint128)",
            "signature": "burn(int24,int24,uint128)",
            "name": "burn",
            "name_with_params": "burn(tickLower, tickUpper, amount)",
            "declaration_string": "/// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n/// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n/// @dev Fees must be collected separately via a call to #collect\n/// @param tickLower The lower tick of the position for which to burn liquidity\n/// @param tickUpper The upper tick of the position for which to burn liquidity\n/// @param amount How much liquidity to burn\n/// @return amount0 The amount of token0 sent to the recipient\n/// @return amount1 The amount of token1 sent to the recipient\nfunction burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.swap(address,bool,int256,uint160,bytes)",
            "signature": "swap(address,bool,int256,uint160,bytes)",
            "name": "swap",
            "name_with_params": "swap(recipient, zeroForOne, amountSpecified, sqrtPriceLimitX96, data)",
            "declaration_string": "/// @notice Swap token0 for token1, or token1 for token0\n/// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n/// @param recipient The address to receive the output of the swap\n/// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n/// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n/// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n/// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n/// @param data Any data to be passed through to the callback\n/// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n/// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\nfunction swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data) external returns (int256 amount0, int256 amount1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.flash(address,uint256,uint256,bytes)",
            "signature": "flash(address,uint256,uint256,bytes)",
            "name": "flash",
            "name_with_params": "flash(recipient, amount0, amount1, data)",
            "declaration_string": "/// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n/// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n/// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n/// with 0 amount{0,1} and sending the donation amount(s) from the callback\n/// @param recipient The address which will receive the token0 and token1 amounts\n/// @param amount0 The amount of token0 to send\n/// @param amount1 The amount of token1 to send\n/// @param data Any data to be passed through to the callback\nfunction flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.increaseObservationCardinalityNext(uint16)",
            "signature": "increaseObservationCardinalityNext(uint16)",
            "name": "increaseObservationCardinalityNext",
            "name_with_params": "increaseObservationCardinalityNext(observationCardinalityNext)",
            "declaration_string": "/// @notice Increase the maximum number of price and liquidity observations that this pool will store\n/// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n/// the input observationCardinalityNext.\n/// @param observationCardinalityNext The desired minimum number of observations for the pool to store\nfunction increaseObservationCardinalityNext(uint16 observationCardinalityNext) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState.observe(uint32[])",
            "signature": "observe(uint32[])",
            "name": "observe",
            "name_with_params": "observe(secondsAgos)",
            "declaration_string": "/// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n/// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n/// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n/// you must call it with secondsAgos = [3600, 0].\n/// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n/// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n/// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n/// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n/// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n/// timestamp\nfunction observe(uint32[] calldata secondsAgos) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState.snapshotCumulativesInside(int24,int24)",
            "signature": "snapshotCumulativesInside(int24,int24)",
            "name": "snapshotCumulativesInside",
            "name_with_params": "snapshotCumulativesInside(tickLower, tickUpper)",
            "declaration_string": "/// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n/// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n/// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n/// snapshot is taken and the second snapshot is taken.\n/// @param tickLower The lower tick of the range\n/// @param tickUpper The upper tick of the range\n/// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n/// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n/// @return secondsInside The snapshot of seconds per liquidity for the range\nfunction snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.factory()",
            "signature": "factory()",
            "name": "factory",
            "name_with_params": "factory()",
            "declaration_string": "/// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n/// @return The contract address\nfunction factory() external view returns (address)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token0()",
            "signature": "token0()",
            "name": "token0",
            "name_with_params": "token0()",
            "declaration_string": "/// @notice The first of the two tokens of the pool, sorted by address\n/// @return The token contract address\nfunction token0() external view returns (address)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token1()",
            "signature": "token1()",
            "name": "token1",
            "name_with_params": "token1()",
            "declaration_string": "/// @notice The second of the two tokens of the pool, sorted by address\n/// @return The token contract address\nfunction token1() external view returns (address)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.fee()",
            "signature": "fee()",
            "name": "fee",
            "name_with_params": "fee()",
            "declaration_string": "/// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n/// @return The fee\nfunction fee() external view returns (uint24)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
            "signature": "tickSpacing()",
            "name": "tickSpacing",
            "name_with_params": "tickSpacing()",
            "declaration_string": "/// @notice The pool tick spacing\n/// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n/// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n/// This value is an int24 to avoid casting even though it is always positive.\n/// @return The tick spacing\nfunction tickSpacing() external view returns (int24)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.maxLiquidityPerTick()",
            "signature": "maxLiquidityPerTick()",
            "name": "maxLiquidityPerTick",
            "name_with_params": "maxLiquidityPerTick()",
            "declaration_string": "/// @notice The maximum amount of position liquidity that can use any tick in the range\n/// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n/// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n/// @return The max amount of liquidity per tick\nfunction maxLiquidityPerTick() external view returns (uint128)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8)",
            "signature": "setFeeProtocol(uint8,uint8)",
            "name": "setFeeProtocol",
            "name_with_params": "setFeeProtocol(feeProtocol0, feeProtocol1)",
            "declaration_string": "/// @notice Set the denominator of the protocol's % share of the fees\n/// @param feeProtocol0 new protocol fee for token0 of the pool\n/// @param feeProtocol1 new protocol fee for token1 of the pool\nfunction setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128)",
            "signature": "collectProtocol(address,uint128,uint128)",
            "name": "collectProtocol",
            "name_with_params": "collectProtocol(recipient, amount0Requested, amount1Requested)",
            "declaration_string": "/// @notice Collect the protocol fee accrued to the pool\n/// @param recipient The address to which collected protocol fees should be sent\n/// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n/// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n/// @return amount0 The protocol fee collected in token0\n/// @return amount1 The protocol fee collected in token1\nfunction collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "nonpayable",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
            "signature": "slot0()",
            "name": "slot0",
            "name_with_params": "slot0()",
            "declaration_string": "/// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n/// when accessed externally.\n/// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n/// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n/// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n/// boundary.\n/// @return observationIndex The index of the last oracle observation that was written,\n/// @return observationCardinality The current maximum number of observations stored in the pool,\n/// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n/// @return feeProtocol The protocol fee for both tokens of the pool.\n/// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n/// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n/// unlocked Whether the pool is currently locked to reentrancy\nfunction slot0() external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.feeGrowthGlobal0X128()",
            "signature": "feeGrowthGlobal0X128()",
            "name": "feeGrowthGlobal0X128",
            "name_with_params": "feeGrowthGlobal0X128()",
            "declaration_string": "/// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n/// @dev This value can overflow the uint256\nfunction feeGrowthGlobal0X128() external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.feeGrowthGlobal1X128()",
            "signature": "feeGrowthGlobal1X128()",
            "name": "feeGrowthGlobal1X128",
            "name_with_params": "feeGrowthGlobal1X128()",
            "declaration_string": "/// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n/// @dev This value can overflow the uint256\nfunction feeGrowthGlobal1X128() external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.protocolFees()",
            "signature": "protocolFees()",
            "name": "protocolFees",
            "name_with_params": "protocolFees()",
            "declaration_string": "/// @notice The amounts of token0 and token1 that are owed to the protocol\n/// @dev Protocol fees will never exceed uint128 max in either token\nfunction protocolFees() external view returns (uint128 token0, uint128 token1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.liquidity()",
            "signature": "liquidity()",
            "name": "liquidity",
            "name_with_params": "liquidity()",
            "declaration_string": "/// @notice The currently in range liquidity available to the pool\n/// @dev This value has no relationship to the total liquidity across all ticks\n/// @return The liquidity at the current price of the pool\nfunction liquidity() external view returns (uint128)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.ticks(int24)",
            "signature": "ticks(int24)",
            "name": "ticks",
            "name_with_params": "ticks(tick)",
            "declaration_string": "/// @notice Look up information about a specific tick in the pool\n/// @param tick The tick to look up\n/// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n/// tick upper\n/// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n/// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n/// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n/// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n/// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n/// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n/// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n/// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n/// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n/// a specific position.\nfunction ticks(int24 tick) external view returns (uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.tickBitmap(int16)",
            "signature": "tickBitmap(int16)",
            "name": "tickBitmap",
            "name_with_params": "tickBitmap(wordPosition)",
            "declaration_string": "/// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\nfunction tickBitmap(int16 wordPosition) external view returns (uint256)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.positions(bytes32)",
            "signature": "positions(bytes32)",
            "name": "positions",
            "name_with_params": "positions(key)",
            "declaration_string": "/// @notice Returns the information about a position by the position's key\n/// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n/// @return liquidity The amount of liquidity in the position,\n/// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n/// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n/// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n/// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\nfunction positions(bytes32 key) external view returns (uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.observations(uint256)",
            "signature": "observations(uint256)",
            "name": "observations",
            "name_with_params": "observations(index)",
            "declaration_string": "/// @notice Returns data about a specific observation index\n/// @param index The element of the observations array to fetch\n/// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n/// ago, rather than at a specific index in the array.\n/// @return blockTimestamp The timestamp of the observation,\n/// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n/// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n/// @return initialized whether the observation has been initialized and the values are safe to use\nfunction observations(uint256 index) external view returns (uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized)",
            "kind": "function",
            "visibility": "external",
            "state_mutability": "view",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDiv(uint256,uint256,uint256)",
            "signature": "mulDiv(uint256,uint256,uint256)",
            "name": "mulDiv",
            "name_with_params": "mulDiv(a, b, denominator)",
            "declaration_string": "/// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n/// @param a The multiplicand\n/// @param b The multiplier\n/// @param denominator The divisor\n/// @return result The 256-bit result\n/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\nfunction mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath",
            "node_type": "function"
        },
        {
            "key": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDivRoundingUp(uint256,uint256,uint256)",
            "signature": "mulDivRoundingUp(uint256,uint256,uint256)",
            "name": "mulDivRoundingUp",
            "name_with_params": "mulDivRoundingUp(a, b, denominator)",
            "declaration_string": "/// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n/// @param a The multiplicand\n/// @param b The multiplier\n/// @param denominator The divisor\n/// @return result The 256-bit result\nfunction mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result)",
            "kind": "function",
            "visibility": "internal",
            "state_mutability": "pure",
            "modifiers": [],
            "base_functions": [],
            "child_functions": [],
            "parent": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath",
            "checked": true,
            "contract": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath",
            "node_type": "function"
        }
    ],
    "links": {
        "contract_inheritance": [
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol.ReentrancyGuard"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/multicall/Multicall.sol.Multicall"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol.IERC1155MetadataURI",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol.IERC1155"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol.IERC20"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol.IERC165"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol.IUniswapV3PoolOwnerActions"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol.IUniswapV3PoolErrors"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol.IUniswapV3Pool",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol.IUniswapV3PoolEvents"
            }
        ],
        "function_inheritance": [],
        "function_references": [
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.totalAssets()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewWithdraw(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.totalAssets()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewMint(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.totalAssets()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.totalAssets()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.totalAssets()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._poolUtilization()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxMint(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxRedeem(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewDeposit(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxWithdraw(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewRedeem(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewDeposit(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.deposit(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewMint(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.mint(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxWithdraw(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.withdraw(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewWithdraw(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.withdraw(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxRedeem(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.redeem(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewRedeem(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.redeem(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._poolUtilization()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getPoolData()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._poolUtilization()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._sellCollateralRatio(int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._sellCollateralRatio(int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtUtilization(uint128,uint256,int64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._buyCollateralRatio(int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtUtilization(uint128,uint256,int64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getExchangedAmount(int128,int128,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getAccountMarginDetails(address,int24,uint256[2][],int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getTotalRequiredCollateral(int24,uint256[2][])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtTickSinglePosition(uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getTotalRequiredCollateral(int24,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLeg(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtTickSinglePosition(uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLeg(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeStrangle(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLeg(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtUtilization(uint128,uint256,int64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeStrangle(uint256,uint256,uint128,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._mintFullRange(address,address,address,uint24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._issueNFTToDonor()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getUniswapPool(address,address,uint24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getUniswapPool(address,address,uint24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getSalt(address,address,uint96)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getSalt(address,address,uint96)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.startPool(address,int24,int24,address,address,address,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculateAccumulatedFeesBatch(address,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculateAccumulatedFeesBatch(address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.rollOptions(uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._setUserOptionsBalance(address,uint256,uint128,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._setUserOptionsBalance(address,uint256,uint128,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doMintChecks(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRollChecks(uint256[],uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doMintChecks(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAllOptionsFrom(address,int24,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAllOptionsFrom(address,int24,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.burnOptions(uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAllOptionsFrom(address,int24,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAllOptionsFrom(address,int24,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAllOptionsFrom(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.burnOptions(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.rollOptions(uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRoll(uint256,uint256,uint128,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRollChecks(uint256[],uint256,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._validatePositionList(address,uint256[],uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRollChecks(uint256[],uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._validatePositionList(address,uint256[],uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._validatePositionList(address,uint256[],uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionsHash(address,uint256,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionsHash(address,uint256,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.withdraw(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.mint(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.redeem(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.deposit(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getMedian()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getPriceArray()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.updateMedian(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.updateMedian(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.updateMedian(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.updateMedian(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.univ3pool()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.univ3pool()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.collateralToken0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.collateralToken1()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.numberOfPositions(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transfer(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.numberOfPositions(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.numberOfPositions(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxWithdraw(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.numberOfPositions(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transferFrom(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.numberOfPositions(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.maxRedeem(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getUniV3TWAP()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getUniV3TWAP()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.initializeAMMPool(address,address,uint24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.burnTokenizedPosition(uint256,uint128,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRoll(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.mintTokenizedPosition(uint256,uint128,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.afterTokenTransfer(address,address,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.afterTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._exerciseRolls(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._exerciseRolls(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.burnTokenizedPosition(uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.mintTokenizedPosition(uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._updateStoredPremia(bytes32,uint256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._updateStoredPremia(bytes32,uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._exerciseRolls(uint256,uint256,uint128,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountLiquidity(address,address,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doMintChecks(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib.validateCallback(address,address,(address,address,uint24))",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib.validateCallback(address,address,(address,address,uint24))",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3SwapCallback(int256,int256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/CallbackLib.sol.CallbackLib.validateCallback(address,address,(address,address,uint24))",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculatePortfolioValue(address,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFees(address,int24,uint256,uint256,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc._getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.doApprovals(address,address,address,address,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.startPool(address,int24,int24,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeName(address,address,bool,uint24,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.name()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeSymbol(address,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.symbol()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeDecimals(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.decimals()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.max24(int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.max24(int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.abs(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.absUint(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.absUint(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.absUint(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.absUint(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mostSignificantNibble(uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.numberOfLeadingHexZeros(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.toInt128(uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.toInt128(uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.toInt128(uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.toInt128(uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv64(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv64(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv64(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv64(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv96(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv128(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv128(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv128(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv128(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv192(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDiv192(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDivDown(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToShares(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDivDown(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.convertToAssets(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDivUp(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewWithdraw(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.mulDivUp(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.previewMint(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.quickSort(int24[],int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.sort(int24[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.quickSort(int24[],int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.quickSort(int24[],int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.quickSort(int24[],int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.quickSort(int24[],int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/Math.sol.Math.sort(int24[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.twapFilter(address,uint32)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.initializeAMMPool(address,address,uint24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getPoolId(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getSalt(address,address,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getFinalPoolId(uint64,address,address,uint24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.initializeAMMPool(address,address,uint24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.numberOfLeadingHexZeros(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.numberOfLeadingHexZeros(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.updatePositionsHash(uint256,uint256,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._validatePositionList(address,uint256[],uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.updatePositionsHash(uint256,uint256,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionsHash(address,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.twapFilter(address,uint32)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.getUniV3TWAP()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFees(address,int24,uint256,uint256,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(uint256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3SwapCallback(int256,int256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.mint(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.withdraw(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.deposit(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.redeem(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/SafeTransferLib.sol.SafeTransferLib.safeTransferFrom(address,address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.checkCollateral(address,address,int24,uint256,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.netEquity(address,address,int24,uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createBigLizard(address,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createJadeLizard(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createSuperBear(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createSuperBull(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createJadeLizard(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createBigLizard(address,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createSuperBull(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createIronCondor(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createIronButterfly(address,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createIronCondor(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createIronButterfly(address,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createSuperBear(address,int24,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallCalendarSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutCalendarSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createBATS(address,int24,int24,int24,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createBATS(address,int24,int24,int24,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createZEEHBS(address,int24,int24,int24,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createZEEHBS(address,int24,int24,int24,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._mint(address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.mintTokenizedPosition(uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._mint(address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._burn(address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.burnTokenizedPosition(uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._burn(address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.afterTokenTransfer(address,address,uint256[],uint256[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.afterTokenTransfer(address,address,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.transfer(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transfer(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal.transferFrom(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.transferFrom(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._transferFrom(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._transferFrom(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.delegate(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._transferFrom(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._transferFrom(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._transferFrom(address,address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.refund(address,address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._mint(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.revoke(address,address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._mint(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._mint(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.mint(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._mint(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._mint(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.deposit(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._burn(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.redeem(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._burn(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._burn(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exercise(address,int128,int128,int128,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC20Minimal.sol.ERC20Minimal._burn(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.withdraw(uint256,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.approve(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.doApprovals(address,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.approve(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.doApprovals(address,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.approve(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.doApprovals(address,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/interfaces/IERC20Partial.sol.IERC20Partial.approve(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.doApprovals(address,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getTotalRequiredCollateral(int24,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.optionPositionBalance(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnOptions(uint256,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountFeesBase(address,address,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculateAccumulatedFeesBatch(address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.rightSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._setUserOptionsBalance(address,uint256,uint128,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toRightSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.optionPositionBalance(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getTotalRequiredCollateral(int24,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getSolvencyBalances(uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.optionPositionBalance(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculateAccumulatedFeesBatch(address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._burnAndHandleExercise(uint256,uint128,address,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.leftSlot(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountFeesBase(address,address,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._setUserOptionsBalance(address,uint256,uint128,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.div(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.computeBonus(address,uint256[2][],uint256,int24,uint160,int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.mul(int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toLeftSlot(int256,int128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._updateStoredPremia(bytes32,uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._updateStoredPremia(bytes32,uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(uint256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRoll(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._calculateAccumulatedPremia(address,uint256[],bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.add(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.sub(int256,int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt128(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt128(int256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getAccountMargin(address,int24,uint256[2][],int128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getPremiaDeltas(uint256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt256(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt256(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt256(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert0to1(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LeftRight.sol.LeftRight.toInt256(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convert1to0(int256,uint160)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.createChunk(uint256,int24,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.getAccountPremium(address,address,uint256,int24,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.createChunk(uint256,int24,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addLiquidity(uint256,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.createChunk(uint256,int24,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addTickLower(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.copyTickRange(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addTickLower(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.createChunk(uint256,int24,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addTickUpper(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.copyTickRange(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.addTickUpper(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.createChunk(uint256,int24,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.copyTickRange(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickLower(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.copyTickRange(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFeesLiquidityChunk(address,int24,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.tickUpper(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFees(address,int24,uint256,uint256,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/LiquidityChunk.sol.LiquidityChunk.liquidity(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.updateCurrentTick(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintInSFPMAndUpdateCollateral(uint256,uint256,uint128,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.updateCurrentTick(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._writeDataForRolls(uint256,uint256,uint128,uint256,uint256[],int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addCurrentTick(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.rollOptions(uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addCurrentTick(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addMedianTick(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addMedianTick(uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.rollOptions(uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addCaller(uint256,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.rollOptions(uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.addCaller(uint256,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.currentTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._payCommissionAndWriteData(uint256,uint256,uint256,uint128,int256,int256,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.currentTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._rollOptions(uint256,uint256,uint256,uint256[],uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.currentTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.currentTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._mintOptions(uint256[],uint128,uint64,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.currentTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.medianTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.medianTick(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.caller(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.caller(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TickStateCallContext.sol.TickStateCallContext.caller(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.takeCommissionAddData(uint256,int128,int128,int128,int128,int128,uint256[2][])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.burnTokenizedPosition(uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doMintChecks(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.univ3pool(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.mintTokenizedPosition(uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asset(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.optionRatio(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLongs(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLongs(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLongs(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.isLong(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLongs(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath._calculateIOAmounts(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtTickSinglePosition(uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._checkLiquiditySpread(uint256,uint256,int24,int24,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.ensureIsOTM(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createLegInAMM(address,uint256,uint256,uint256,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeSpread(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.tokenType(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.riskPartner(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLeg(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.riskPartner(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.riskPartner(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.riskPartner(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.ensureIsOTM(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.constructRollTokenIdWith(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.strike(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.constructRollTokenIdWith(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.ensureIsOTM(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.width(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStrangle(address,int24,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallRatioSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallZEBRASpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createStraddle(address,int24,int24,uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createCallSpread(address,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addUniv3pool(uint256,uint64)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.createPutDiagonalSpread(address,int24,int24,int24,int24,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addAsset(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addAsset(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addOptionRatio(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addOptionRatio(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addIsLong(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addIsLong(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addTokenType(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addTokenType(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addRiskPartner(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addRiskPartner(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addStrike(uint256,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addStrike(uint256,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addWidth(uint256,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addWidth(uint256,int24,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addCallLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.addLeg(uint256,uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.addPutLeg(uint256,uint256,uint256,uint256,uint256,uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.flipToBurnToken(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._computeBase(uint256,uint128,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.flipToBurnToken(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getAmountsMoved(uint256,uint128,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.asTicks(uint256,uint256,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPremia(uint256,uint128,address,bool,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.ensureIsOTM(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.computeExercisedAmounts(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralAtTickSinglePosition(uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._updatePositionDataBurn(address,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.countLegs(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._addUserOption(uint256,uint64)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validate(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.ensureIsOTM(uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRollChecks(uint256[],uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.validateIsExercisable(uint256,int24,int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rolledTokenIsValid(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rolledTokenIsValid(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._doRollChecks(uint256[],uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.constructRollTokenIdWith(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.rollTokenizedPositions(uint256,uint256,uint128,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.clearLeg(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.constructRollTokenIdWith(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.rollTokenInfo(uint256,uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/types/TokenId.sol.TokenId.constructRollTokenIdWith(uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.toUint128(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmounts(uint160,uint160,uint160,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount1ForLiquidity(uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmountsForLiquidity(uint160,uint160,uint160,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertCollateralData(uint256,uint256,uint256,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.liquidateAccount(address,int24,int24,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.takeCommission(uint256[2][],uint256,int256,int256,int256,int256,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.getRefundAmounts(address,int256,int24,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.getLiquidityChunk(uint256,uint256,uint128,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.exerciseCost(address,int24,int24,uint256,uint128,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker._getRequiredCollateralSingleLegNoPartner(uint256,uint256,uint128,int24,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/TickMath.sol.TickMath.getSqrtRatioAtTick(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.convertNotional(uint128,int24,int24,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.clone(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.clone(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.cloneDeterministic(address,bytes32)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.predictDeterministicAddress(address,bytes32,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.predictDeterministicAddress(address,bytes32)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/proxy/Clones.sol.Clones.predictDeterministicAddress(address,bytes32)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.balanceOf(address,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.balanceOfBatch(address[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.isApprovedForAll(address,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.isApprovedForAll(address,address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._setURI(string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.constructor(string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._issueNFTToDonor()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._setApprovalForAll(address,address,bool)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.setApprovalForAll(address,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mintBatch(address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burnBatch(address,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burn(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mintBatch(address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burnBatch(address,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._afterTokenTransfer(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burn(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mintBatch(address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burn(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burn(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._asSingletonArray(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol.IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._mint(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155._mint(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155Received(address,address,uint256,uint256,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/tokens/ERC1155Minimal.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Holder.sol.ERC1155Holder.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.symbol()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeName(address,address,bool,uint24,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.symbol()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeName(address,address,bool,uint24,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.symbol()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeSymbol(address,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol.IERC20Metadata.decimals()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeDecimals(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.isContract(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.isContract(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.isContract(address)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResultFromTarget(address,bool,bytes,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCall(address,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCall(address,bytes,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionStaticCall(address,bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionStaticCall(address,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionDelegateCall(address,bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionDelegateCall(address,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResultFromTarget(address,bool,bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionDelegateCall(address,bytes,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResultFromTarget(address,bool,bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionCallWithValue(address,bytes,uint256,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResultFromTarget(address,bool,bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.functionStaticCall(address,bytes,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address._revert(bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResultFromTarget(address,bool,bytes,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address._revert(bytes,string)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Address.sol.Address.verifyCallResult(bool,bytes,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.constructor(address,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.constructor(address,address,address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._issueNFTToDonor()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mint(address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._mintBatch(address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._mintFullRange(address,address,address,uint24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burnBatch(address,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.setApprovalForAll(address,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.uniswapV3MintCallback(uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155._burn(address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Context.sol.Context._msgSender()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.minePoolAddress(address,address,uint24,uint96,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toString(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/InteractionHelper.sol.InteractionHelper.computeName(address,address,bool,uint24,string)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165.supportsInterface(bytes4)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol.ERC1155.supportsInterface(bytes4)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol.ERC165.supportsInterface(bytes4)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/token/ERC1155/utils/ERC1155Receiver.sol.ERC1155Receiver.supportsInterface(bytes4)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.min(uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.sqrt(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.mulDiv(uint256,uint256,uint256,uint8)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.sqrt(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.sqrt(uint256,uint8)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log2(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.sqrt(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log2(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log2(uint256,uint8)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log10(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log10(uint256,uint8)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log10(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toString(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log256(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log256(uint256,uint8)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/math/Math.sol.Math.log256(uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/openzeppelin-contracts/contracts/utils/Strings.sol.Strings.toHexString(uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.getPool(address,address,uint24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._getUniswapPool(address,address,uint24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/IUniswapV3Factory.sol.IUniswapV3Factory.getPool(address,address,uint24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.initializeAMMPool(address,address,uint24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.mint(address,int24,int24,uint128,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._mintFullRange(address,address,address,uint24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.mint(address,int24,int24,uint128,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._collectAndWritePositionData(uint256,address,uint256,bytes32,int256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.burn(int24,int24,uint128)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._burnLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.swap(address,bool,int256,uint160,bytes)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol.IUniswapV3PoolActions.increaseObservationCardinalityNext(uint16)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol.IUniswapV3PoolDerivedState.observe(uint32[])",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/PanopticMath.sol.PanopticMath.twapFilter(address,uint32)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token1()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token1()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.token1()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.fee()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.fee()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.fee()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._mintLiquidity(uint256,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.calculateAMMSwapFees(address,int24,uint256,uint256,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.registerTokenTransfer(address,address,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/CollateralTracker.sol.CollateralTracker.startToken(address,address,address)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._createPositionInAMM(address,uint256,uint128,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol.IUniswapV3PoolImmutables.tickSpacing()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc.getPortfolioValue(address,int24,mapping(uint256 => uint256),uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceDown(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager.swapInAMM(address,int256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._validateAndForwardToAMM(uint256,uint128,int24,int24,bool)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory._mintFullRange(address,address,address,uint24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.forceExercise(address,int24,int24,uint256[],uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/periphery/PanopticHelper.sol.PanopticHelper.findLiquidationPriceUp(address,address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticFactory.sol.PanopticFactory.deployNewPool(address,address,uint24,uint96)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.pokeMedian()"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool.calculateAccumulatedFeesBatch(address,uint256[])"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.slot0()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/PanopticPool.sol.PanopticPool._getPriceAndCheckSlippageViolation(int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.feeGrowthGlobal0X128()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc._getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.feeGrowthGlobal1X128()",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc._getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.ticks(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc._getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.ticks(int24)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/libraries/FeesCalc.sol.FeesCalc._getAMMSwapFeesPerLiquidityCollected(address,int24,int24,int24)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol.IUniswapV3PoolState.positions(bytes32)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/SemiFungiblePositionManager.sol.SemiFungiblePositionManager._getFeesBase(address,uint128,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDivRoundingUp(uint256,uint256,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount1(uint160,uint160,uint256)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getAmount0ForLiquidity(uint160,uint160,uint128)"
            },
            {
                "from": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/lib/v3-core/contracts/libraries/FullMath.sol.FullMath.mulDiv(uint256,uint256,uint256)",
                "to": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core/contracts/univ3-libraries/LiquidityAmounts.sol.LiquidityAmounts.getLiquidityForAmount0(uint160,uint160,uint256)"
            }
        ]
    },
    "metadata": {
        "project_root_path": "/Users/dteiml/p/logic-group/23-panoptic/panoptic-v1-core",
        "project_name": "panoptic-v1-core"
    }
}